/*
 * This file is auto-generated.  DO NOT MODIFY.
 * Using: out/host/linux-x86/bin/aidl -dout/soong/.intermediates/frameworks/base/framework-minus-apex/android_common/gen/aidl/frameworks/base/core/java/android/content/pm/IPackageManager.aidl.d -Iframeworks/base/core/java -Iframeworks/base/drm/java -Iframeworks/base/graphics/java -Iframeworks/base/identity/java -Iframeworks/base/keystore/java -Iframeworks/base/location/java -Iframeworks/base/media/java -Iframeworks/base/media/mca/effect/java -Iframeworks/base/media/mca/filterfw/java -Iframeworks/base/media/mca/filterpacks/java -Iframeworks/base/mms/java -Iframeworks/base/opengl/java -Iframeworks/base/rs/java -Iframeworks/base/sax/java -Iframeworks/base/telecomm/java -Iframeworks/base/telephony/java -Iframeworks/base/media/aidl -Iframeworks/base/core/java -Iframeworks/base/drm/java -Iframeworks/base/graphics/java -Iframeworks/base/identity/java -Iframeworks/base/keystore/java -Iframeworks/base/location/java -Iframeworks/base/media/java -Iframeworks/base/media/mca/effect/java -Iframeworks/base/media/mca/filterfw/java -Iframeworks/base/media/mca/filterpacks/java -Iframeworks/base/mms/java -Iframeworks/base/opengl/java -Iframeworks/base/rs/java -Iframeworks/base/sax/java -Iframeworks/base/telecomm/java -Iframeworks/base/telephony/java -Iframeworks/av/aidl -Iframeworks/native/libs/permission/aidl -Ipackages/modules/Bluetooth/framework/aidl-export -Ipackages/modules/Connectivity/framework/aidl-export -Ipackages/modules/Media/apex/aidl/stable -Ihardware/interfaces/graphics/common/aidl -Iframeworks/base -Iframeworks/base/apex/blobstore/framework/java -Iframeworks/base/apex/jobscheduler/framework/java -Isystem/connectivity/wificond/aidl -Iframeworks/base/packages/services/PacProcessor/src -Iframeworks/base/packages/services/Proxy/src -Iframeworks/base/native/android/aidl -Isystem/security/identity/binder -Iframeworks/native/cmds/dumpstate/binder -Iframeworks/native/aidl/binder -Iframeworks/native/aidl/gui -Isystem/core/gatekeeperd/binder -Isystem/gsid/aidl -Iframeworks/native/libs/gui -Iframeworks/base/cmds/idmap2/idmap2d/aidl/services -Iframeworks/base/cmds/idmap2/idmap2d/aidl/core -Iframeworks/native/libs/incidentcompanion/binder -Iframeworks/native/libs/input -Iframeworks/native/cmds/installd/binder -Iframeworks/av/media/libaudioclient/aidl -Iframeworks/native/libs/binder/aidl -Iframeworks/av/camera/aidl -Isystem/update_engine/binder_bindings -Isystem/logging/logd/binder -Iframeworks/av/services/mediaresourcemanager/aidl -Isystem/core/storaged/binder -Isystem/vold/binder -Iframeworks/native/aidl -t --transaction_names --min_sdk_version=current frameworks/base/core/java/android/content/pm/IPackageManager.aidl out/soong/.intermediates/frameworks/base/framework-minus-apex/android_common/gen/aidl/aidl5.tmp/frameworks/base/core/java/android/content/pm/IPackageManager.java
 */
package android.content.pm;
/**
 *  See {@link PackageManager} for documentation on most of the APIs
 *  here.
 *
 *  {@hide}
 */
public interface IPackageManager extends android.os.IInterface
{
  /** Default implementation for IPackageManager. */
  public static class Default implements android.content.pm.IPackageManager
  {
    @Override public void checkPackageStartable(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
    }
    @Override public boolean isPackageAvailable(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public android.content.pm.PackageInfo getPackageInfo(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage versionedPackage, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public int getPackageUid(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public int[] getPackageGids(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String[] currentToCanonicalPackageNames(java.lang.String[] names) throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[] names) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    /** @return the target SDK for the given package name, or -1 if it cannot be retrieved */
    @Override public int getTargetSdkVersion(java.lang.String packageName) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean activitySupportsIntent(android.content.ComponentName className, android.content.Intent intent, java.lang.String resolvedType) throws android.os.RemoteException
    {
      return false;
    }
    @Override public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean isProtectedBroadcast(java.lang.String actionName) throws android.os.RemoteException
    {
      return false;
    }
    @Override public int checkSignatures(java.lang.String pkg1, java.lang.String pkg2) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public int checkUidSignatures(int uid1, int uid2) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public java.util.List<java.lang.String> getAllPackages() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String[] getPackagesForUid(int uid) throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getNameForUid(int uid) throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String[] getNamesForUids(int[] uids) throws android.os.RemoteException
    {
      return null;
    }
    @Override public int getUidForSharedUser(java.lang.String sharedUserName) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public int getFlagsForUid(int uid) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public int getPrivateFlagsForUid(int uid) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public boolean isUidPrivileged(int uid) throws android.os.RemoteException
    {
      return false;
    }
    @Override public android.content.pm.ResolveInfo resolveIntent(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent intent, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean canForwardTo(android.content.Intent intent, java.lang.String resolvedType, int sourceUserId, int targetUserId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName caller, android.content.Intent[] specifics, java.lang.String[] specificTypes, android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ResolveInfo resolveService(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    /**
     * This implements getInstalledPackages via a "last returned row"
     * mechanism that is not exposed in the API. This is to get around the IPC
     * limit that kicks in when flags are included that bloat up the data
     * returned.
     */
    @Override public android.content.pm.ParceledListSlice getInstalledPackages(long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    /**
     * This implements getPackagesHoldingPermissions via a "last returned row"
     * mechanism that is not exposed in the API. This is to get around the IPC
     * limit that kicks in when flags are included that bloat up the data
     * returned.
     */
    @Override public android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[] permissions, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    /**
     * This implements getInstalledApplications via a "last returned row"
     * mechanism that is not exposed in the API. This is to get around the IPC
     * limit that kicks in when flags are included that bloat up the data
     * returned.
     */
    @Override public android.content.pm.ParceledListSlice getInstalledApplications(long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    /**
     * Retrieve all applications that are marked as persistent.
     *
     * @return A List<ApplicationInfo> containing one entry for each persistent
     *         application.
     */
    @Override public android.content.pm.ParceledListSlice getPersistentApplications(int flags) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String name, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    /**
     * Retrieve sync information for all content providers.
     *
     * @param outNames Filled in with a list of the root names of the content
     *                 providers that can sync.
     * @param outInfo Filled in with a list of the ProviderInfo for each
     *                name in 'outNames'.
     */
    @Override public void querySyncProviders(java.util.List<java.lang.String> outNames, java.util.List<android.content.pm.ProviderInfo> outInfo) throws android.os.RemoteException
    {
    }
    @Override public android.content.pm.ParceledListSlice queryContentProviders(java.lang.String processName, int uid, long flags, java.lang.String metaDataKey) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName className, int flags) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ParceledListSlice queryInstrumentation(java.lang.String targetPackage, int flags) throws android.os.RemoteException
    {
      return null;
    }
    @Override public void finishPackageInstall(int token, boolean didLaunch) throws android.os.RemoteException
    {
    }
    @Override public void setInstallerPackageName(java.lang.String targetPackage, java.lang.String installerPackageName) throws android.os.RemoteException
    {
    }
    @Override public void setApplicationCategoryHint(java.lang.String packageName, int categoryHint, java.lang.String callerPackageName) throws android.os.RemoteException
    {
    }
    /** @deprecated rawr, don't call AIDL methods directly! */
    @Override public void deletePackageAsUser(java.lang.String packageName, int versionCode, android.content.pm.IPackageDeleteObserver observer, int userId, int flags) throws android.os.RemoteException
    {
    }
    /**
     * Delete a package for a specific user.
     *
     * @param versionedPackage The package to delete.
     * @param observer a callback to use to notify when the package deletion in finished.
     * @param userId the id of the user for whom to delete the package
     * @param flags - possible values: {@link #DELETE_KEEP_DATA}
     */
    @Override public void deletePackageVersioned(android.content.pm.VersionedPackage versionedPackage, android.content.pm.IPackageDeleteObserver2 observer, int userId, int flags) throws android.os.RemoteException
    {
    }
    /**
     * Delete a package for a specific user.
     *
     * @param versionedPackage The package to delete.
     * @param observer a callback to use to notify when the package deletion in finished.
     * @param userId the id of the user for whom to delete the package
     */
    @Override public void deleteExistingPackageAsUser(android.content.pm.VersionedPackage versionedPackage, android.content.pm.IPackageDeleteObserver2 observer, int userId) throws android.os.RemoteException
    {
    }
    @Override public java.lang.String getInstallerPackageName(java.lang.String packageName) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String packageName) throws android.os.RemoteException
    {
      return null;
    }
    @Override public void resetApplicationPreferences(int userId) throws android.os.RemoteException
    {
    }
    @Override public android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent intent, java.lang.String resolvedType, int flags) throws android.os.RemoteException
    {
      return null;
    }
    @Override public void setLastChosenActivity(android.content.Intent intent, java.lang.String resolvedType, int flags, android.content.IntentFilter filter, int match, android.content.ComponentName activity) throws android.os.RemoteException
    {
    }
    @Override public void addPreferredActivity(android.content.IntentFilter filter, int match, android.content.ComponentName[] set, android.content.ComponentName activity, int userId, boolean removeExisting) throws android.os.RemoteException
    {
    }
    @Override public void replacePreferredActivity(android.content.IntentFilter filter, int match, android.content.ComponentName[] set, android.content.ComponentName activity, int userId) throws android.os.RemoteException
    {
    }
    @Override public void clearPackagePreferredActivities(java.lang.String packageName) throws android.os.RemoteException
    {
    }
    @Override public int getPreferredActivities(java.util.List<android.content.IntentFilter> outFilters, java.util.List<android.content.ComponentName> outActivities, java.lang.String packageName) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public void addPersistentPreferredActivity(android.content.IntentFilter filter, android.content.ComponentName activity, int userId) throws android.os.RemoteException
    {
    }
    @Override public void clearPackagePersistentPreferredActivities(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
    }
    @Override public void addCrossProfileIntentFilter(android.content.IntentFilter intentFilter, java.lang.String ownerPackage, int sourceUserId, int targetUserId, int flags) throws android.os.RemoteException
    {
    }
    @Override public void clearCrossProfileIntentFilters(int sourceUserId, java.lang.String ownerPackage) throws android.os.RemoteException
    {
    }
    @Override public java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[] packageNames, int restrictionFlags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[] packageNames, boolean suspended, android.os.PersistableBundle appExtras, android.os.PersistableBundle launcherExtras, android.content.pm.SuspendDialogInfo dialogInfo, java.lang.String callingPackage, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[] packageNames, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean isPackageSuspendedForUser(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public android.os.Bundle getSuspendedPackageAppExtras(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return null;
    }
    /** Backup/restore support - only the system uid may use these. */
    @Override public byte[] getPreferredActivityBackup(int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public void restorePreferredActivities(byte[] backup, int userId) throws android.os.RemoteException
    {
    }
    @Override public byte[] getDefaultAppsBackup(int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public void restoreDefaultApps(byte[] backup, int userId) throws android.os.RemoteException
    {
    }
    @Override public byte[] getDomainVerificationBackup(int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public void restoreDomainVerification(byte[] backup, int userId) throws android.os.RemoteException
    {
    }
    /**
     * Report the set of 'Home' activity candidates, plus (if any) which of them
     * is the current "always use this one" setting.
     */
    @Override public android.content.ComponentName getHomeActivities(java.util.List<android.content.pm.ResolveInfo> outHomeCandidates) throws android.os.RemoteException
    {
      return null;
    }
    @Override public void setHomeActivity(android.content.ComponentName className, int userId) throws android.os.RemoteException
    {
    }
    /**
     * Overrides the label and icon of the component specified by the component name. The component
     * must belong to the calling app.
     *
     * These changes will be reset on the next boot and whenever the package is updated.
     *
     * Only the app defined as com.android.internal.R.config_overrideComponentUiPackage is allowed
     * to call this.
     *
     * @param componentName The component name to override the label/icon of.
     * @param nonLocalizedLabel The label to be displayed.
     * @param icon The icon to be displayed.
     * @param userId The user id.
     */
    @Override public void overrideLabelAndIcon(android.content.ComponentName componentName, java.lang.String nonLocalizedLabel, int icon, int userId) throws android.os.RemoteException
    {
    }
    /**
     * Restores the label and icon of the activity specified by the component name if either has
     * been overridden. The component must belong to the calling app.
     *
     * Only the app defined as com.android.internal.R.config_overrideComponentUiPackage is allowed
     * to call this.
     *
     * @param componentName The component name.
     * @param userId The user id.
     */
    @Override public void restoreLabelAndIcon(android.content.ComponentName componentName, int userId) throws android.os.RemoteException
    {
    }
    /** As per {@link android.content.pm.PackageManager#setComponentEnabledSetting}. */
    @Override public void setComponentEnabledSetting(android.content.ComponentName componentName, int newState, int flags, int userId) throws android.os.RemoteException
    {
    }
    /** As per {@link android.content.pm.PackageManager#setComponentEnabledSettings}. */
    @Override public void setComponentEnabledSettings(java.util.List<android.content.pm.PackageManager.ComponentEnabledSetting> settings, int userId) throws android.os.RemoteException
    {
    }
    /** As per {@link android.content.pm.PackageManager#getComponentEnabledSetting}. */
    @Override public int getComponentEnabledSetting(android.content.ComponentName componentName, int userId) throws android.os.RemoteException
    {
      return 0;
    }
    /** As per {@link android.content.pm.PackageManager#setApplicationEnabledSetting}. */
    @Override public void setApplicationEnabledSetting(java.lang.String packageName, int newState, int flags, int userId, java.lang.String callingPackage) throws android.os.RemoteException
    {
    }
    /** As per {@link android.content.pm.PackageManager#getApplicationEnabledSetting}. */
    @Override public int getApplicationEnabledSetting(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return 0;
    }
    /** Logs process start information (including APK hash) to the security log. */
    @Override public void logAppProcessStartIfNeeded(java.lang.String packageName, java.lang.String processName, int uid, java.lang.String seinfo, java.lang.String apkFile, int pid) throws android.os.RemoteException
    {
    }
    /** As per {@link android.content.pm.PackageManager#flushPackageRestrictionsAsUser}. */
    @Override public void flushPackageRestrictionsAsUser(int userId) throws android.os.RemoteException
    {
    }
    /**
     * Set whether the given package should be considered stopped, making
     * it not visible to implicit intents that filter out stopped packages.
     */
    @Override public void setPackageStoppedState(java.lang.String packageName, boolean stopped, int userId) throws android.os.RemoteException
    {
    }
    /**
     * Free storage by deleting LRU sorted list of cache files across
     * all applications. If the currently available free storage
     * on the device is greater than or equal to the requested
     * free storage, no cache files are cleared. If the currently
     * available storage on the device is less than the requested
     * free storage, some or all of the cache files across
     * all applications are deleted (based on last accessed time)
     * to increase the free storage space on the device to
     * the requested value. There is no guarantee that clearing all
     * the cache files from all applications will clear up
     * enough storage to achieve the desired value.
     * @param freeStorageSize The number of bytes of storage to be
     * freed by the system. Say if freeStorageSize is XX,
     * and the current free storage is YY,
     * if XX is less than YY, just return. if not free XX-YY number
     * of bytes if possible.
     * @param observer call back used to notify when
     * the operation is completed
     */
    @Override public void freeStorageAndNotify(java.lang.String volumeUuid, long freeStorageSize, int storageFlags, android.content.pm.IPackageDataObserver observer) throws android.os.RemoteException
    {
    }
    /**
     * Free storage by deleting LRU sorted list of cache files across
     * all applications. If the currently available free storage
     * on the device is greater than or equal to the requested
     * free storage, no cache files are cleared. If the currently
     * available storage on the device is less than the requested
     * free storage, some or all of the cache files across
     * all applications are deleted (based on last accessed time)
     * to increase the free storage space on the device to
     * the requested value. There is no guarantee that clearing all
     * the cache files from all applications will clear up
     * enough storage to achieve the desired value.
     * @param freeStorageSize The number of bytes of storage to be
     * freed by the system. Say if freeStorageSize is XX,
     * and the current free storage is YY,
     * if XX is less than YY, just return. if not free XX-YY number
     * of bytes if possible.
     * @param pi IntentSender call back used to
     * notify when the operation is completed.May be null
     * to indicate that no call back is desired.
     */
    @Override public void freeStorage(java.lang.String volumeUuid, long freeStorageSize, int storageFlags, android.content.IntentSender pi) throws android.os.RemoteException
    {
    }
    /**
     * Delete all the cache files in an applications cache directory
     * @param packageName The package name of the application whose cache
     * files need to be deleted
     * @param observer a callback used to notify when the deletion is finished.
     */
    @Override public void deleteApplicationCacheFiles(java.lang.String packageName, android.content.pm.IPackageDataObserver observer) throws android.os.RemoteException
    {
    }
    /**
     * Delete all the cache files in an applications cache directory
     * @param packageName The package name of the application whose cache
     * files need to be deleted
     * @param userId the user to delete application cache for
     * @param observer a callback used to notify when the deletion is finished.
     */
    @Override public void deleteApplicationCacheFilesAsUser(java.lang.String packageName, int userId, android.content.pm.IPackageDataObserver observer) throws android.os.RemoteException
    {
    }
    /**
     * Clear the user data directory of an application.
     * @param packageName The package name of the application whose cache
     * files need to be deleted
     * @param observer a callback used to notify when the operation is completed.
     */
    @Override public void clearApplicationUserData(java.lang.String packageName, android.content.pm.IPackageDataObserver observer, int userId) throws android.os.RemoteException
    {
    }
    /**
     * Clear the profile data of an application.
     * @param packageName The package name of the application whose profile data
     * need to be deleted
     */
    @Override public void clearApplicationProfileData(java.lang.String packageName) throws android.os.RemoteException
    {
    }
    /**
     * Get package statistics including the code, data and cache size for
     * an already installed package
     * @param packageName The package name of the application
     * @param userHandle Which user the size should be retrieved for
     * @param observer a callback to use to notify when the asynchronous
     * retrieval of information is complete.
     */
    @Override public void getPackageSizeInfo(java.lang.String packageName, int userHandle, android.content.pm.IPackageStatsObserver observer) throws android.os.RemoteException
    {
    }
    /**
     * Get a list of shared libraries that are available on the
     * system.
     */
    @Override public java.lang.String[] getSystemSharedLibraryNames() throws android.os.RemoteException
    {
      return null;
    }
    /**
     * Get a list of features that are available on the
     * system.
     */
    @Override public android.content.pm.ParceledListSlice getSystemAvailableFeatures() throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean hasSystemFeature(java.lang.String name, int version) throws android.os.RemoteException
    {
      return false;
    }
    @Override public void enterSafeMode() throws android.os.RemoteException
    {
    }
    @Override public boolean isSafeMode() throws android.os.RemoteException
    {
      return false;
    }
    @Override public boolean hasSystemUidErrors() throws android.os.RemoteException
    {
      return false;
    }
    /**
     * Notify the package manager that a package is going to be used and why.
     *
     * See PackageManager.NOTIFY_PACKAGE_USE_* for reasons.
     */
    @Override public void notifyPackageUse(java.lang.String packageName, int reason) throws android.os.RemoteException
    {
    }
    /**
     * Notify the package manager that a list of dex files have been loaded.
     *
     * @param loadingPackageName the name of the package who performs the load
     * @param classLoaderContextMap a map from file paths to dex files that have been loaded to
     *     the class loader context that was used to load them.
     * @param loaderIsa the ISA of the loader process
     */
    @Override public void notifyDexLoad(java.lang.String loadingPackageName, java.util.Map<java.lang.String,java.lang.String> classLoaderContextMap, java.lang.String loaderIsa) throws android.os.RemoteException
    {
    }
    /**
     * Register an application dex module with the package manager.
     * The package manager will keep track of the given module for future optimizations.
     *
     * Dex module optimizations will disable the classpath checking at runtime. The client bares
     * the responsibility to ensure that the static assumptions on classes in the optimized code
     * hold at runtime (e.g. there's no duplicate classes in the classpath).
     *
     * Note that the package manager already keeps track of dex modules loaded with
     * {@link dalvik.system.DexClassLoader} and {@link dalvik.system.PathClassLoader}.
     * This can be called for an eager registration.
     *
     * The call might take a while and the results will be posted on the main thread, using
     * the given callback.
     *
     * If the module is intended to be shared with other apps, make sure that the file
     * permissions allow for it.
     * If at registration time the permissions allow for others to read it, the module would
     * be marked as a shared module which might undergo a different optimization strategy.
     * (usually shared modules will generated larger optimizations artifacts,
     * taking more disk space).
     *
     * @param packageName the package name to which the dex module belongs
     * @param dexModulePath the absolute path of the dex module.
     * @param isSharedModule whether or not the module is intended to be used by other apps.
     * @param callback if not null,
     *   {@link android.content.pm.IDexModuleRegisterCallback.IDexModuleRegisterCallback#onDexModuleRegistered}
     *   will be called once the registration finishes.
     */
    @Override public void registerDexModule(java.lang.String packageName, java.lang.String dexModulePath, boolean isSharedModule, android.content.pm.IDexModuleRegisterCallback callback) throws android.os.RemoteException
    {
    }
    /**
     * Ask the package manager to perform a dex-opt with the given compiler filter.
     *
     * Note: exposed only for the shell command to allow moving packages explicitly to a
     *       definite state.
     */
    @Override public boolean performDexOptMode(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete, java.lang.String splitName) throws android.os.RemoteException
    {
      return false;
    }
    /**
     * Ask the package manager to perform a dex-opt with the given compiler filter on the
     * secondary dex files belonging to the given package.
     *
     * Note: exposed only for the shell command to allow moving packages explicitly to a
     *       definite state.
     */
    @Override public boolean performDexOptSecondary(java.lang.String packageName, java.lang.String targetCompilerFilter, boolean force) throws android.os.RemoteException
    {
      return false;
    }
    /**
     * Ask the package manager to dump profiles associated with a package.
     *
     * @param packageName The name of the package to dump.
     * @param dumpClassesAndMethods If false, pass {@code --dump-only} to profman to dump the
     *   profile in a human readable form intended for debugging. If true, pass
     *   {@code --dump-classes-and-methods} to profman to dump a sorted list of classes and methods
     *   in a human readable form that is valid input for {@code profman --create-profile-from}.
     */
    @Override public void dumpProfiles(java.lang.String packageName, boolean dumpClassesAndMethods) throws android.os.RemoteException
    {
    }
    @Override public void forceDexOpt(java.lang.String packageName) throws android.os.RemoteException
    {
    }
    /**
     * Reconcile the information we have about the secondary dex files belonging to
     * {@code packagName} and the actual dex files. For all dex files that were
     * deleted, update the internal records and delete the generated oat files.
     */
    @Override public void reconcileSecondaryDexFiles(java.lang.String packageName) throws android.os.RemoteException
    {
    }
    @Override public int getMoveStatus(int moveId) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public void registerMoveCallback(android.content.pm.IPackageMoveObserver callback) throws android.os.RemoteException
    {
    }
    @Override public void unregisterMoveCallback(android.content.pm.IPackageMoveObserver callback) throws android.os.RemoteException
    {
    }
    @Override public int movePackage(java.lang.String packageName, java.lang.String volumeUuid) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public int movePrimaryStorage(java.lang.String volumeUuid) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public boolean setInstallLocation(int loc) throws android.os.RemoteException
    {
      return false;
    }
    @Override public int getInstallLocation() throws android.os.RemoteException
    {
      return 0;
    }
    @Override public int installExistingPackageAsUser(java.lang.String packageName, int userId, int installFlags, int installReason, java.util.List<java.lang.String> whiteListedPermissions) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public void verifyPendingInstall(int id, int verificationCode) throws android.os.RemoteException
    {
    }
    @Override public void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay) throws android.os.RemoteException
    {
    }
    /** @deprecated */
    @Override public void verifyIntentFilter(int id, int verificationCode, java.util.List<java.lang.String> failedDomains) throws android.os.RemoteException
    {
    }
    /** @deprecated */
    @Override public int getIntentVerificationStatus(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return 0;
    }
    /** @deprecated */
    @Override public boolean updateIntentVerificationStatus(java.lang.String packageName, int status, int userId) throws android.os.RemoteException
    {
      return false;
    }
    /** @deprecated */
    @Override public android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String packageName) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String packageName) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity() throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean isFirstBoot() throws android.os.RemoteException
    {
      return false;
    }
    @Override public boolean isOnlyCoreApps() throws android.os.RemoteException
    {
      return false;
    }
    @Override public boolean isDeviceUpgrading() throws android.os.RemoteException
    {
      return false;
    }
    /** Reflects current DeviceStorageMonitorService state */
    @Override public boolean isStorageLow() throws android.os.RemoteException
    {
      return false;
    }
    @Override public boolean setApplicationHiddenSettingAsUser(java.lang.String packageName, boolean hidden, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public boolean getApplicationHiddenSettingAsUser(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public void setSystemAppHiddenUntilInstalled(java.lang.String packageName, boolean hidden) throws android.os.RemoteException
    {
    }
    @Override public boolean setSystemAppInstallState(java.lang.String packageName, boolean installed, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public android.content.pm.IPackageInstaller getPackageInstaller() throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean setBlockUninstallForUser(java.lang.String packageName, boolean blockUninstall, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public boolean getBlockUninstallForUser(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public android.content.pm.KeySet getKeySetByAlias(java.lang.String packageName, java.lang.String alias) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.KeySet getSigningKeySet(java.lang.String packageName) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean isPackageSignedByKeySet(java.lang.String packageName, android.content.pm.KeySet ks) throws android.os.RemoteException
    {
      return false;
    }
    @Override public boolean isPackageSignedByKeySetExactly(java.lang.String packageName, android.content.pm.KeySet ks) throws android.os.RemoteException
    {
      return false;
    }
    @Override public java.lang.String getPermissionControllerPackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getSdkSandboxPackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ParceledListSlice getInstantApps(int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public byte[] getInstantAppCookie(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean setInstantAppCookie(java.lang.String packageName, byte[] cookie, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public android.graphics.Bitmap getInstantAppIcon(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean isInstantApp(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public boolean setRequiredForSystemUser(java.lang.String packageName, boolean systemUserApp) throws android.os.RemoteException
    {
      return false;
    }
    /**
     * Sets whether or not an update is available. Ostensibly for instant apps
     * to force exteranl resolution.
     */
    @Override public void setUpdateAvailable(java.lang.String packageName, boolean updateAvaialble) throws android.os.RemoteException
    {
    }
    @Override public java.lang.String getServicesSystemSharedLibraryPackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getSharedSystemSharedLibraryPackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ChangedPackages getChangedPackages(int sequenceNumber, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean isPackageDeviceAdminOnAnyUser(java.lang.String packageName) throws android.os.RemoteException
    {
      return false;
    }
    @Override public int getInstallReason(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean canRequestPackageInstalls(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public void deletePreloadsFileCache() throws android.os.RemoteException
    {
    }
    @Override public android.content.ComponentName getInstantAppResolverComponent() throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.ComponentName getInstantAppResolverSettingsComponent() throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.ComponentName getInstantAppInstallerComponent() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getInstantAppAndroidId(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.dex.IArtManager getArtManager() throws android.os.RemoteException
    {
      return null;
    }
    @Override public void setHarmfulAppWarning(java.lang.String packageName, java.lang.CharSequence warning, int userId) throws android.os.RemoteException
    {
    }
    @Override public java.lang.CharSequence getHarmfulAppWarning(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean hasSigningCertificate(java.lang.String packageName, byte[] signingCertificate, int flags) throws android.os.RemoteException
    {
      return false;
    }
    @Override public boolean hasUidSigningCertificate(int uid, byte[] signingCertificate, int flags) throws android.os.RemoteException
    {
      return false;
    }
    @Override public java.lang.String getDefaultTextClassifierPackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getSystemTextClassifierPackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getAttentionServicePackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getRotationResolverPackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getWellbeingPackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getAppPredictionServicePackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getSystemCaptionsServicePackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getSetupWizardPackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getIncidentReportApproverPackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public java.lang.String getContentCaptureServicePackageName() throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean isPackageStateProtected(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override public void sendDeviceCustomizationReadyBroadcast() throws android.os.RemoteException
    {
    }
    @Override public java.util.List<android.content.pm.ModuleInfo> getInstalledModules(int flags) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ModuleInfo getModuleInfo(java.lang.String packageName, int flags) throws android.os.RemoteException
    {
      return null;
    }
    @Override public int getRuntimePermissionsVersion(int userId) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public void setRuntimePermissionsVersion(int version, int userId) throws android.os.RemoteException
    {
    }
    @Override public void notifyPackagesReplacedReceived(java.lang.String[] packages) throws android.os.RemoteException
    {
    }
    @Override public void requestPackageChecksums(java.lang.String packageName, boolean includeSplits, int optional, int required, java.util.List trustedInstallers, android.content.pm.IOnChecksumsReadyListener onChecksumsReadyListener, int userId) throws android.os.RemoteException
    {
    }
    @Override public android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String packageName, java.lang.String callingPackage, java.lang.String featureId, int userId) throws android.os.RemoteException
    {
      return null;
    }
    //------------------------------------------------------------------------
    //
    // The following binder interfaces have been moved to IPermissionManager
    //
    //------------------------------------------------------------------------
    //------------------------------------------------------------------------
    // We need to keep these in IPackageManager for app compatibility
    //------------------------------------------------------------------------
    @Override public java.lang.String[] getAppOpPermissionPackages(java.lang.String permissionName) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String name, int flags) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean addPermission(android.content.pm.PermissionInfo info) throws android.os.RemoteException
    {
      return false;
    }
    @Override public boolean addPermissionAsync(android.content.pm.PermissionInfo info) throws android.os.RemoteException
    {
      return false;
    }
    @Override public void removePermission(java.lang.String name) throws android.os.RemoteException
    {
    }
    @Override public int checkPermission(java.lang.String permName, java.lang.String pkgName, int userId) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public void grantRuntimePermission(java.lang.String packageName, java.lang.String permissionName, int userId) throws android.os.RemoteException
    {
    }
    //------------------------------------------------------------------------
    // We need to keep these in IPackageManager for convenience in splitting
    // out the permission manager. This should be cleaned up, but, will require
    // a large change that modifies many repos.
    //------------------------------------------------------------------------
    @Override public int checkUidPermission(java.lang.String permName, int uid) throws android.os.RemoteException
    {
      return 0;
    }
    @Override public void setMimeGroup(java.lang.String packageName, java.lang.String group, java.util.List<java.lang.String> mimeTypes) throws android.os.RemoteException
    {
    }
    @Override public java.lang.String getSplashScreenTheme(java.lang.String packageName, int userId) throws android.os.RemoteException
    {
      return null;
    }
    @Override public void setSplashScreenTheme(java.lang.String packageName, java.lang.String themeName, int userId) throws android.os.RemoteException
    {
    }
    @Override public java.util.List<java.lang.String> getMimeGroup(java.lang.String packageName, java.lang.String group) throws android.os.RemoteException
    {
      return null;
    }
    @Override public boolean isAutoRevokeWhitelisted(java.lang.String packageName) throws android.os.RemoteException
    {
      return false;
    }
    @Override public void makeProviderVisible(int recipientAppId, java.lang.String visibleAuthority) throws android.os.RemoteException
    {
    }
    @Override public void makeUidVisible(int recipientAppId, int visibleUid) throws android.os.RemoteException
    {
    }
    @Override public android.os.IBinder getHoldLockToken() throws android.os.RemoteException
    {
      return null;
    }
    @Override public void holdLock(android.os.IBinder token, int durationMs) throws android.os.RemoteException
    {
    }
    @Override public android.content.pm.PackageManager.Property getProperty(java.lang.String propertyName, java.lang.String packageName, java.lang.String className) throws android.os.RemoteException
    {
      return null;
    }
    @Override public android.content.pm.ParceledListSlice queryProperty(java.lang.String propertyName, int componentType) throws android.os.RemoteException
    {
      return null;
    }
    @Override public void setKeepUninstalledPackages(java.util.List<java.lang.String> packageList) throws android.os.RemoteException
    {
    }
    @Override public boolean canPackageQuery(java.lang.String sourcePackageName, java.lang.String targetPackageName, int userId) throws android.os.RemoteException
    {
      return false;
    }
    @Override
    public android.os.IBinder asBinder() {
      return null;
    }
  }
  /** Local-side IPC implementation stub class. */
  public static abstract class Stub extends android.os.Binder implements android.content.pm.IPackageManager
  {
    /** Construct the stub at attach it to the interface. */
    public Stub()
    {
      this.attachInterface(this, DESCRIPTOR);
    }
    /**
     * Cast an IBinder object into an android.content.pm.IPackageManager interface,
     * generating a proxy if needed.
     */
    public static android.content.pm.IPackageManager asInterface(android.os.IBinder obj)
    {
      if ((obj==null)) {
        return null;
      }
      android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
      if (((iin!=null)&&(iin instanceof android.content.pm.IPackageManager))) {
        return ((android.content.pm.IPackageManager)iin);
      }
      return new android.content.pm.IPackageManager.Stub.Proxy(obj);
    }
    @Override public android.os.IBinder asBinder()
    {
      return this;
    }
    /** @hide */
    public static java.lang.String getDefaultTransactionName(int transactionCode)
    {
      switch (transactionCode)
      {
        case TRANSACTION_checkPackageStartable:
        {
          return "checkPackageStartable";
        }
        case TRANSACTION_isPackageAvailable:
        {
          return "isPackageAvailable";
        }
        case TRANSACTION_getPackageInfo:
        {
          return "getPackageInfo";
        }
        case TRANSACTION_getPackageInfoVersioned:
        {
          return "getPackageInfoVersioned";
        }
        case TRANSACTION_getPackageUid:
        {
          return "getPackageUid";
        }
        case TRANSACTION_getPackageGids:
        {
          return "getPackageGids";
        }
        case TRANSACTION_currentToCanonicalPackageNames:
        {
          return "currentToCanonicalPackageNames";
        }
        case TRANSACTION_canonicalToCurrentPackageNames:
        {
          return "canonicalToCurrentPackageNames";
        }
        case TRANSACTION_getApplicationInfo:
        {
          return "getApplicationInfo";
        }
        case TRANSACTION_getTargetSdkVersion:
        {
          return "getTargetSdkVersion";
        }
        case TRANSACTION_getActivityInfo:
        {
          return "getActivityInfo";
        }
        case TRANSACTION_activitySupportsIntent:
        {
          return "activitySupportsIntent";
        }
        case TRANSACTION_getReceiverInfo:
        {
          return "getReceiverInfo";
        }
        case TRANSACTION_getServiceInfo:
        {
          return "getServiceInfo";
        }
        case TRANSACTION_getProviderInfo:
        {
          return "getProviderInfo";
        }
        case TRANSACTION_isProtectedBroadcast:
        {
          return "isProtectedBroadcast";
        }
        case TRANSACTION_checkSignatures:
        {
          return "checkSignatures";
        }
        case TRANSACTION_checkUidSignatures:
        {
          return "checkUidSignatures";
        }
        case TRANSACTION_getAllPackages:
        {
          return "getAllPackages";
        }
        case TRANSACTION_getPackagesForUid:
        {
          return "getPackagesForUid";
        }
        case TRANSACTION_getNameForUid:
        {
          return "getNameForUid";
        }
        case TRANSACTION_getNamesForUids:
        {
          return "getNamesForUids";
        }
        case TRANSACTION_getUidForSharedUser:
        {
          return "getUidForSharedUser";
        }
        case TRANSACTION_getFlagsForUid:
        {
          return "getFlagsForUid";
        }
        case TRANSACTION_getPrivateFlagsForUid:
        {
          return "getPrivateFlagsForUid";
        }
        case TRANSACTION_isUidPrivileged:
        {
          return "isUidPrivileged";
        }
        case TRANSACTION_resolveIntent:
        {
          return "resolveIntent";
        }
        case TRANSACTION_findPersistentPreferredActivity:
        {
          return "findPersistentPreferredActivity";
        }
        case TRANSACTION_canForwardTo:
        {
          return "canForwardTo";
        }
        case TRANSACTION_queryIntentActivities:
        {
          return "queryIntentActivities";
        }
        case TRANSACTION_queryIntentActivityOptions:
        {
          return "queryIntentActivityOptions";
        }
        case TRANSACTION_queryIntentReceivers:
        {
          return "queryIntentReceivers";
        }
        case TRANSACTION_resolveService:
        {
          return "resolveService";
        }
        case TRANSACTION_queryIntentServices:
        {
          return "queryIntentServices";
        }
        case TRANSACTION_queryIntentContentProviders:
        {
          return "queryIntentContentProviders";
        }
        case TRANSACTION_getInstalledPackages:
        {
          return "getInstalledPackages";
        }
        case TRANSACTION_getPackagesHoldingPermissions:
        {
          return "getPackagesHoldingPermissions";
        }
        case TRANSACTION_getInstalledApplications:
        {
          return "getInstalledApplications";
        }
        case TRANSACTION_getPersistentApplications:
        {
          return "getPersistentApplications";
        }
        case TRANSACTION_resolveContentProvider:
        {
          return "resolveContentProvider";
        }
        case TRANSACTION_querySyncProviders:
        {
          return "querySyncProviders";
        }
        case TRANSACTION_queryContentProviders:
        {
          return "queryContentProviders";
        }
        case TRANSACTION_getInstrumentationInfo:
        {
          return "getInstrumentationInfo";
        }
        case TRANSACTION_queryInstrumentation:
        {
          return "queryInstrumentation";
        }
        case TRANSACTION_finishPackageInstall:
        {
          return "finishPackageInstall";
        }
        case TRANSACTION_setInstallerPackageName:
        {
          return "setInstallerPackageName";
        }
        case TRANSACTION_setApplicationCategoryHint:
        {
          return "setApplicationCategoryHint";
        }
        case TRANSACTION_deletePackageAsUser:
        {
          return "deletePackageAsUser";
        }
        case TRANSACTION_deletePackageVersioned:
        {
          return "deletePackageVersioned";
        }
        case TRANSACTION_deleteExistingPackageAsUser:
        {
          return "deleteExistingPackageAsUser";
        }
        case TRANSACTION_getInstallerPackageName:
        {
          return "getInstallerPackageName";
        }
        case TRANSACTION_getInstallSourceInfo:
        {
          return "getInstallSourceInfo";
        }
        case TRANSACTION_resetApplicationPreferences:
        {
          return "resetApplicationPreferences";
        }
        case TRANSACTION_getLastChosenActivity:
        {
          return "getLastChosenActivity";
        }
        case TRANSACTION_setLastChosenActivity:
        {
          return "setLastChosenActivity";
        }
        case TRANSACTION_addPreferredActivity:
        {
          return "addPreferredActivity";
        }
        case TRANSACTION_replacePreferredActivity:
        {
          return "replacePreferredActivity";
        }
        case TRANSACTION_clearPackagePreferredActivities:
        {
          return "clearPackagePreferredActivities";
        }
        case TRANSACTION_getPreferredActivities:
        {
          return "getPreferredActivities";
        }
        case TRANSACTION_addPersistentPreferredActivity:
        {
          return "addPersistentPreferredActivity";
        }
        case TRANSACTION_clearPackagePersistentPreferredActivities:
        {
          return "clearPackagePersistentPreferredActivities";
        }
        case TRANSACTION_addCrossProfileIntentFilter:
        {
          return "addCrossProfileIntentFilter";
        }
        case TRANSACTION_clearCrossProfileIntentFilters:
        {
          return "clearCrossProfileIntentFilters";
        }
        case TRANSACTION_setDistractingPackageRestrictionsAsUser:
        {
          return "setDistractingPackageRestrictionsAsUser";
        }
        case TRANSACTION_setPackagesSuspendedAsUser:
        {
          return "setPackagesSuspendedAsUser";
        }
        case TRANSACTION_getUnsuspendablePackagesForUser:
        {
          return "getUnsuspendablePackagesForUser";
        }
        case TRANSACTION_isPackageSuspendedForUser:
        {
          return "isPackageSuspendedForUser";
        }
        case TRANSACTION_getSuspendedPackageAppExtras:
        {
          return "getSuspendedPackageAppExtras";
        }
        case TRANSACTION_getPreferredActivityBackup:
        {
          return "getPreferredActivityBackup";
        }
        case TRANSACTION_restorePreferredActivities:
        {
          return "restorePreferredActivities";
        }
        case TRANSACTION_getDefaultAppsBackup:
        {
          return "getDefaultAppsBackup";
        }
        case TRANSACTION_restoreDefaultApps:
        {
          return "restoreDefaultApps";
        }
        case TRANSACTION_getDomainVerificationBackup:
        {
          return "getDomainVerificationBackup";
        }
        case TRANSACTION_restoreDomainVerification:
        {
          return "restoreDomainVerification";
        }
        case TRANSACTION_getHomeActivities:
        {
          return "getHomeActivities";
        }
        case TRANSACTION_setHomeActivity:
        {
          return "setHomeActivity";
        }
        case TRANSACTION_overrideLabelAndIcon:
        {
          return "overrideLabelAndIcon";
        }
        case TRANSACTION_restoreLabelAndIcon:
        {
          return "restoreLabelAndIcon";
        }
        case TRANSACTION_setComponentEnabledSetting:
        {
          return "setComponentEnabledSetting";
        }
        case TRANSACTION_setComponentEnabledSettings:
        {
          return "setComponentEnabledSettings";
        }
        case TRANSACTION_getComponentEnabledSetting:
        {
          return "getComponentEnabledSetting";
        }
        case TRANSACTION_setApplicationEnabledSetting:
        {
          return "setApplicationEnabledSetting";
        }
        case TRANSACTION_getApplicationEnabledSetting:
        {
          return "getApplicationEnabledSetting";
        }
        case TRANSACTION_logAppProcessStartIfNeeded:
        {
          return "logAppProcessStartIfNeeded";
        }
        case TRANSACTION_flushPackageRestrictionsAsUser:
        {
          return "flushPackageRestrictionsAsUser";
        }
        case TRANSACTION_setPackageStoppedState:
        {
          return "setPackageStoppedState";
        }
        case TRANSACTION_freeStorageAndNotify:
        {
          return "freeStorageAndNotify";
        }
        case TRANSACTION_freeStorage:
        {
          return "freeStorage";
        }
        case TRANSACTION_deleteApplicationCacheFiles:
        {
          return "deleteApplicationCacheFiles";
        }
        case TRANSACTION_deleteApplicationCacheFilesAsUser:
        {
          return "deleteApplicationCacheFilesAsUser";
        }
        case TRANSACTION_clearApplicationUserData:
        {
          return "clearApplicationUserData";
        }
        case TRANSACTION_clearApplicationProfileData:
        {
          return "clearApplicationProfileData";
        }
        case TRANSACTION_getPackageSizeInfo:
        {
          return "getPackageSizeInfo";
        }
        case TRANSACTION_getSystemSharedLibraryNames:
        {
          return "getSystemSharedLibraryNames";
        }
        case TRANSACTION_getSystemAvailableFeatures:
        {
          return "getSystemAvailableFeatures";
        }
        case TRANSACTION_hasSystemFeature:
        {
          return "hasSystemFeature";
        }
        case TRANSACTION_enterSafeMode:
        {
          return "enterSafeMode";
        }
        case TRANSACTION_isSafeMode:
        {
          return "isSafeMode";
        }
        case TRANSACTION_hasSystemUidErrors:
        {
          return "hasSystemUidErrors";
        }
        case TRANSACTION_notifyPackageUse:
        {
          return "notifyPackageUse";
        }
        case TRANSACTION_notifyDexLoad:
        {
          return "notifyDexLoad";
        }
        case TRANSACTION_registerDexModule:
        {
          return "registerDexModule";
        }
        case TRANSACTION_performDexOptMode:
        {
          return "performDexOptMode";
        }
        case TRANSACTION_performDexOptSecondary:
        {
          return "performDexOptSecondary";
        }
        case TRANSACTION_dumpProfiles:
        {
          return "dumpProfiles";
        }
        case TRANSACTION_forceDexOpt:
        {
          return "forceDexOpt";
        }
        case TRANSACTION_reconcileSecondaryDexFiles:
        {
          return "reconcileSecondaryDexFiles";
        }
        case TRANSACTION_getMoveStatus:
        {
          return "getMoveStatus";
        }
        case TRANSACTION_registerMoveCallback:
        {
          return "registerMoveCallback";
        }
        case TRANSACTION_unregisterMoveCallback:
        {
          return "unregisterMoveCallback";
        }
        case TRANSACTION_movePackage:
        {
          return "movePackage";
        }
        case TRANSACTION_movePrimaryStorage:
        {
          return "movePrimaryStorage";
        }
        case TRANSACTION_setInstallLocation:
        {
          return "setInstallLocation";
        }
        case TRANSACTION_getInstallLocation:
        {
          return "getInstallLocation";
        }
        case TRANSACTION_installExistingPackageAsUser:
        {
          return "installExistingPackageAsUser";
        }
        case TRANSACTION_verifyPendingInstall:
        {
          return "verifyPendingInstall";
        }
        case TRANSACTION_extendVerificationTimeout:
        {
          return "extendVerificationTimeout";
        }
        case TRANSACTION_verifyIntentFilter:
        {
          return "verifyIntentFilter";
        }
        case TRANSACTION_getIntentVerificationStatus:
        {
          return "getIntentVerificationStatus";
        }
        case TRANSACTION_updateIntentVerificationStatus:
        {
          return "updateIntentVerificationStatus";
        }
        case TRANSACTION_getIntentFilterVerifications:
        {
          return "getIntentFilterVerifications";
        }
        case TRANSACTION_getAllIntentFilters:
        {
          return "getAllIntentFilters";
        }
        case TRANSACTION_getVerifierDeviceIdentity:
        {
          return "getVerifierDeviceIdentity";
        }
        case TRANSACTION_isFirstBoot:
        {
          return "isFirstBoot";
        }
        case TRANSACTION_isOnlyCoreApps:
        {
          return "isOnlyCoreApps";
        }
        case TRANSACTION_isDeviceUpgrading:
        {
          return "isDeviceUpgrading";
        }
        case TRANSACTION_isStorageLow:
        {
          return "isStorageLow";
        }
        case TRANSACTION_setApplicationHiddenSettingAsUser:
        {
          return "setApplicationHiddenSettingAsUser";
        }
        case TRANSACTION_getApplicationHiddenSettingAsUser:
        {
          return "getApplicationHiddenSettingAsUser";
        }
        case TRANSACTION_setSystemAppHiddenUntilInstalled:
        {
          return "setSystemAppHiddenUntilInstalled";
        }
        case TRANSACTION_setSystemAppInstallState:
        {
          return "setSystemAppInstallState";
        }
        case TRANSACTION_getPackageInstaller:
        {
          return "getPackageInstaller";
        }
        case TRANSACTION_setBlockUninstallForUser:
        {
          return "setBlockUninstallForUser";
        }
        case TRANSACTION_getBlockUninstallForUser:
        {
          return "getBlockUninstallForUser";
        }
        case TRANSACTION_getKeySetByAlias:
        {
          return "getKeySetByAlias";
        }
        case TRANSACTION_getSigningKeySet:
        {
          return "getSigningKeySet";
        }
        case TRANSACTION_isPackageSignedByKeySet:
        {
          return "isPackageSignedByKeySet";
        }
        case TRANSACTION_isPackageSignedByKeySetExactly:
        {
          return "isPackageSignedByKeySetExactly";
        }
        case TRANSACTION_getPermissionControllerPackageName:
        {
          return "getPermissionControllerPackageName";
        }
        case TRANSACTION_getSdkSandboxPackageName:
        {
          return "getSdkSandboxPackageName";
        }
        case TRANSACTION_getInstantApps:
        {
          return "getInstantApps";
        }
        case TRANSACTION_getInstantAppCookie:
        {
          return "getInstantAppCookie";
        }
        case TRANSACTION_setInstantAppCookie:
        {
          return "setInstantAppCookie";
        }
        case TRANSACTION_getInstantAppIcon:
        {
          return "getInstantAppIcon";
        }
        case TRANSACTION_isInstantApp:
        {
          return "isInstantApp";
        }
        case TRANSACTION_setRequiredForSystemUser:
        {
          return "setRequiredForSystemUser";
        }
        case TRANSACTION_setUpdateAvailable:
        {
          return "setUpdateAvailable";
        }
        case TRANSACTION_getServicesSystemSharedLibraryPackageName:
        {
          return "getServicesSystemSharedLibraryPackageName";
        }
        case TRANSACTION_getSharedSystemSharedLibraryPackageName:
        {
          return "getSharedSystemSharedLibraryPackageName";
        }
        case TRANSACTION_getChangedPackages:
        {
          return "getChangedPackages";
        }
        case TRANSACTION_isPackageDeviceAdminOnAnyUser:
        {
          return "isPackageDeviceAdminOnAnyUser";
        }
        case TRANSACTION_getInstallReason:
        {
          return "getInstallReason";
        }
        case TRANSACTION_getSharedLibraries:
        {
          return "getSharedLibraries";
        }
        case TRANSACTION_getDeclaredSharedLibraries:
        {
          return "getDeclaredSharedLibraries";
        }
        case TRANSACTION_canRequestPackageInstalls:
        {
          return "canRequestPackageInstalls";
        }
        case TRANSACTION_deletePreloadsFileCache:
        {
          return "deletePreloadsFileCache";
        }
        case TRANSACTION_getInstantAppResolverComponent:
        {
          return "getInstantAppResolverComponent";
        }
        case TRANSACTION_getInstantAppResolverSettingsComponent:
        {
          return "getInstantAppResolverSettingsComponent";
        }
        case TRANSACTION_getInstantAppInstallerComponent:
        {
          return "getInstantAppInstallerComponent";
        }
        case TRANSACTION_getInstantAppAndroidId:
        {
          return "getInstantAppAndroidId";
        }
        case TRANSACTION_getArtManager:
        {
          return "getArtManager";
        }
        case TRANSACTION_setHarmfulAppWarning:
        {
          return "setHarmfulAppWarning";
        }
        case TRANSACTION_getHarmfulAppWarning:
        {
          return "getHarmfulAppWarning";
        }
        case TRANSACTION_hasSigningCertificate:
        {
          return "hasSigningCertificate";
        }
        case TRANSACTION_hasUidSigningCertificate:
        {
          return "hasUidSigningCertificate";
        }
        case TRANSACTION_getDefaultTextClassifierPackageName:
        {
          return "getDefaultTextClassifierPackageName";
        }
        case TRANSACTION_getSystemTextClassifierPackageName:
        {
          return "getSystemTextClassifierPackageName";
        }
        case TRANSACTION_getAttentionServicePackageName:
        {
          return "getAttentionServicePackageName";
        }
        case TRANSACTION_getRotationResolverPackageName:
        {
          return "getRotationResolverPackageName";
        }
        case TRANSACTION_getWellbeingPackageName:
        {
          return "getWellbeingPackageName";
        }
        case TRANSACTION_getAppPredictionServicePackageName:
        {
          return "getAppPredictionServicePackageName";
        }
        case TRANSACTION_getSystemCaptionsServicePackageName:
        {
          return "getSystemCaptionsServicePackageName";
        }
        case TRANSACTION_getSetupWizardPackageName:
        {
          return "getSetupWizardPackageName";
        }
        case TRANSACTION_getIncidentReportApproverPackageName:
        {
          return "getIncidentReportApproverPackageName";
        }
        case TRANSACTION_getContentCaptureServicePackageName:
        {
          return "getContentCaptureServicePackageName";
        }
        case TRANSACTION_isPackageStateProtected:
        {
          return "isPackageStateProtected";
        }
        case TRANSACTION_sendDeviceCustomizationReadyBroadcast:
        {
          return "sendDeviceCustomizationReadyBroadcast";
        }
        case TRANSACTION_getInstalledModules:
        {
          return "getInstalledModules";
        }
        case TRANSACTION_getModuleInfo:
        {
          return "getModuleInfo";
        }
        case TRANSACTION_getRuntimePermissionsVersion:
        {
          return "getRuntimePermissionsVersion";
        }
        case TRANSACTION_setRuntimePermissionsVersion:
        {
          return "setRuntimePermissionsVersion";
        }
        case TRANSACTION_notifyPackagesReplacedReceived:
        {
          return "notifyPackagesReplacedReceived";
        }
        case TRANSACTION_requestPackageChecksums:
        {
          return "requestPackageChecksums";
        }
        case TRANSACTION_getLaunchIntentSenderForPackage:
        {
          return "getLaunchIntentSenderForPackage";
        }
        case TRANSACTION_getAppOpPermissionPackages:
        {
          return "getAppOpPermissionPackages";
        }
        case TRANSACTION_getPermissionGroupInfo:
        {
          return "getPermissionGroupInfo";
        }
        case TRANSACTION_addPermission:
        {
          return "addPermission";
        }
        case TRANSACTION_addPermissionAsync:
        {
          return "addPermissionAsync";
        }
        case TRANSACTION_removePermission:
        {
          return "removePermission";
        }
        case TRANSACTION_checkPermission:
        {
          return "checkPermission";
        }
        case TRANSACTION_grantRuntimePermission:
        {
          return "grantRuntimePermission";
        }
        case TRANSACTION_checkUidPermission:
        {
          return "checkUidPermission";
        }
        case TRANSACTION_setMimeGroup:
        {
          return "setMimeGroup";
        }
        case TRANSACTION_getSplashScreenTheme:
        {
          return "getSplashScreenTheme";
        }
        case TRANSACTION_setSplashScreenTheme:
        {
          return "setSplashScreenTheme";
        }
        case TRANSACTION_getMimeGroup:
        {
          return "getMimeGroup";
        }
        case TRANSACTION_isAutoRevokeWhitelisted:
        {
          return "isAutoRevokeWhitelisted";
        }
        case TRANSACTION_makeProviderVisible:
        {
          return "makeProviderVisible";
        }
        case TRANSACTION_makeUidVisible:
        {
          return "makeUidVisible";
        }
        case TRANSACTION_getHoldLockToken:
        {
          return "getHoldLockToken";
        }
        case TRANSACTION_holdLock:
        {
          return "holdLock";
        }
        case TRANSACTION_getProperty:
        {
          return "getProperty";
        }
        case TRANSACTION_queryProperty:
        {
          return "queryProperty";
        }
        case TRANSACTION_setKeepUninstalledPackages:
        {
          return "setKeepUninstalledPackages";
        }
        case TRANSACTION_canPackageQuery:
        {
          return "canPackageQuery";
        }
        default:
        {
          return null;
        }
      }
    }
    /** @hide */
    public java.lang.String getTransactionName(int transactionCode)
    {
      return this.getDefaultTransactionName(transactionCode);
    }
    @Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException
    {
      java.lang.String descriptor = DESCRIPTOR;
      if (code >= android.os.IBinder.FIRST_CALL_TRANSACTION && code <= android.os.IBinder.LAST_CALL_TRANSACTION) {
        data.enforceInterface(descriptor);
      }
      if (code == INTERFACE_TRANSACTION) {
        reply.writeString(descriptor);
        return true;
      }
      switch (code)
      {
        case TRANSACTION_checkPackageStartable:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.checkPackageStartable(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_isPackageAvailable:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.isPackageAvailable(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getPackageInfo:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.PackageInfo _result = this.getPackageInfo(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getPackageInfoVersioned:
        {
          android.content.pm.VersionedPackage _arg0;
          _arg0 = data.readTypedObject(android.content.pm.VersionedPackage.CREATOR);
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.PackageInfo _result = this.getPackageInfoVersioned(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getPackageUid:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.getPackageUid(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_getPackageGids:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          int[] _result = this.getPackageGids(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeIntArray(_result);
          break;
        }
        case TRANSACTION_currentToCanonicalPackageNames:
        {
          java.lang.String[] _arg0;
          _arg0 = data.createStringArray();
          data.enforceNoDataAvail();
          java.lang.String[] _result = this.currentToCanonicalPackageNames(_arg0);
          reply.writeNoException();
          reply.writeStringArray(_result);
          break;
        }
        case TRANSACTION_canonicalToCurrentPackageNames:
        {
          java.lang.String[] _arg0;
          _arg0 = data.createStringArray();
          data.enforceNoDataAvail();
          java.lang.String[] _result = this.canonicalToCurrentPackageNames(_arg0);
          reply.writeNoException();
          reply.writeStringArray(_result);
          break;
        }
        case TRANSACTION_getApplicationInfo:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ApplicationInfo _result = this.getApplicationInfo(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getTargetSdkVersion:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          int _result = this.getTargetSdkVersion(_arg0);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_getActivityInfo:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ActivityInfo _result = this.getActivityInfo(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_activitySupportsIntent:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          android.content.Intent _arg1;
          _arg1 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg2;
          _arg2 = data.readString();
          data.enforceNoDataAvail();
          boolean _result = this.activitySupportsIntent(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getReceiverInfo:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ActivityInfo _result = this.getReceiverInfo(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getServiceInfo:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ServiceInfo _result = this.getServiceInfo(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getProviderInfo:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ProviderInfo _result = this.getProviderInfo(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_isProtectedBroadcast:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          boolean _result = this.isProtectedBroadcast(_arg0);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_checkSignatures:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          data.enforceNoDataAvail();
          int _result = this.checkSignatures(_arg0, _arg1);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_checkUidSignatures:
        {
          int _arg0;
          _arg0 = data.readInt();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.checkUidSignatures(_arg0, _arg1);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_getAllPackages:
        {
          java.util.List<java.lang.String> _result = this.getAllPackages();
          reply.writeNoException();
          reply.writeStringList(_result);
          break;
        }
        case TRANSACTION_getPackagesForUid:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          java.lang.String[] _result = this.getPackagesForUid(_arg0);
          reply.writeNoException();
          reply.writeStringArray(_result);
          break;
        }
        case TRANSACTION_getNameForUid:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          java.lang.String _result = this.getNameForUid(_arg0);
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getNamesForUids:
        {
          int[] _arg0;
          _arg0 = data.createIntArray();
          data.enforceNoDataAvail();
          java.lang.String[] _result = this.getNamesForUids(_arg0);
          reply.writeNoException();
          reply.writeStringArray(_result);
          break;
        }
        case TRANSACTION_getUidForSharedUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          int _result = this.getUidForSharedUser(_arg0);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_getFlagsForUid:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.getFlagsForUid(_arg0);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_getPrivateFlagsForUid:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.getPrivateFlagsForUid(_arg0);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_isUidPrivileged:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.isUidPrivileged(_arg0);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_resolveIntent:
        {
          android.content.Intent _arg0;
          _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          long _arg2;
          _arg2 = data.readLong();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ResolveInfo _result = this.resolveIntent(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_findPersistentPreferredActivity:
        {
          android.content.Intent _arg0;
          _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ResolveInfo _result = this.findPersistentPreferredActivity(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_canForwardTo:
        {
          android.content.Intent _arg0;
          _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          int _arg2;
          _arg2 = data.readInt();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.canForwardTo(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_queryIntentActivities:
        {
          android.content.Intent _arg0;
          _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          long _arg2;
          _arg2 = data.readLong();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.queryIntentActivities(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_queryIntentActivityOptions:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          android.content.Intent[] _arg1;
          _arg1 = data.createTypedArray(android.content.Intent.CREATOR);
          java.lang.String[] _arg2;
          _arg2 = data.createStringArray();
          android.content.Intent _arg3;
          _arg3 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg4;
          _arg4 = data.readString();
          long _arg5;
          _arg5 = data.readLong();
          int _arg6;
          _arg6 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.queryIntentActivityOptions(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_queryIntentReceivers:
        {
          android.content.Intent _arg0;
          _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          long _arg2;
          _arg2 = data.readLong();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.queryIntentReceivers(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_resolveService:
        {
          android.content.Intent _arg0;
          _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          long _arg2;
          _arg2 = data.readLong();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ResolveInfo _result = this.resolveService(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_queryIntentServices:
        {
          android.content.Intent _arg0;
          _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          long _arg2;
          _arg2 = data.readLong();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.queryIntentServices(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_queryIntentContentProviders:
        {
          android.content.Intent _arg0;
          _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          long _arg2;
          _arg2 = data.readLong();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.queryIntentContentProviders(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getInstalledPackages:
        {
          long _arg0;
          _arg0 = data.readLong();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.getInstalledPackages(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getPackagesHoldingPermissions:
        {
          java.lang.String[] _arg0;
          _arg0 = data.createStringArray();
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.getPackagesHoldingPermissions(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getInstalledApplications:
        {
          long _arg0;
          _arg0 = data.readLong();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.getInstalledApplications(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getPersistentApplications:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.getPersistentApplications(_arg0);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_resolveContentProvider:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ProviderInfo _result = this.resolveContentProvider(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_querySyncProviders:
        {
          java.util.List<java.lang.String> _arg0;
          _arg0 = data.createStringArrayList();
          java.util.List<android.content.pm.ProviderInfo> _arg1;
          _arg1 = data.createTypedArrayList(android.content.pm.ProviderInfo.CREATOR);
          data.enforceNoDataAvail();
          this.querySyncProviders(_arg0, _arg1);
          reply.writeNoException();
          reply.writeStringList(_arg0);
          reply.writeTypedList(_arg1, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_queryContentProviders:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          long _arg2;
          _arg2 = data.readLong();
          java.lang.String _arg3;
          _arg3 = data.readString();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.queryContentProviders(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getInstrumentationInfo:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.InstrumentationInfo _result = this.getInstrumentationInfo(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_queryInstrumentation:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.queryInstrumentation(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_finishPackageInstall:
        {
          int _arg0;
          _arg0 = data.readInt();
          boolean _arg1;
          _arg1 = data.readBoolean();
          data.enforceNoDataAvail();
          this.finishPackageInstall(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_setInstallerPackageName:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          data.enforceNoDataAvail();
          this.setInstallerPackageName(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_setApplicationCategoryHint:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          java.lang.String _arg2;
          _arg2 = data.readString();
          data.enforceNoDataAvail();
          this.setApplicationCategoryHint(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_deletePackageAsUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          android.content.pm.IPackageDeleteObserver _arg2;
          _arg2 = android.content.pm.IPackageDeleteObserver.Stub.asInterface(data.readStrongBinder());
          int _arg3;
          _arg3 = data.readInt();
          int _arg4;
          _arg4 = data.readInt();
          data.enforceNoDataAvail();
          this.deletePackageAsUser(_arg0, _arg1, _arg2, _arg3, _arg4);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_deletePackageVersioned:
        {
          android.content.pm.VersionedPackage _arg0;
          _arg0 = data.readTypedObject(android.content.pm.VersionedPackage.CREATOR);
          android.content.pm.IPackageDeleteObserver2 _arg1;
          _arg1 = android.content.pm.IPackageDeleteObserver2.Stub.asInterface(data.readStrongBinder());
          int _arg2;
          _arg2 = data.readInt();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          this.deletePackageVersioned(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_deleteExistingPackageAsUser:
        {
          android.content.pm.VersionedPackage _arg0;
          _arg0 = data.readTypedObject(android.content.pm.VersionedPackage.CREATOR);
          android.content.pm.IPackageDeleteObserver2 _arg1;
          _arg1 = android.content.pm.IPackageDeleteObserver2.Stub.asInterface(data.readStrongBinder());
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          this.deleteExistingPackageAsUser(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getInstallerPackageName:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          java.lang.String _result = this.getInstallerPackageName(_arg0);
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getInstallSourceInfo:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          android.content.pm.InstallSourceInfo _result = this.getInstallSourceInfo(_arg0);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_resetApplicationPreferences:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          this.resetApplicationPreferences(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getLastChosenActivity:
        {
          android.content.Intent _arg0;
          _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ResolveInfo _result = this.getLastChosenActivity(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_setLastChosenActivity:
        {
          android.content.Intent _arg0;
          _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          int _arg2;
          _arg2 = data.readInt();
          android.content.IntentFilter _arg3;
          _arg3 = data.readTypedObject(android.content.IntentFilter.CREATOR);
          int _arg4;
          _arg4 = data.readInt();
          android.content.ComponentName _arg5;
          _arg5 = data.readTypedObject(android.content.ComponentName.CREATOR);
          data.enforceNoDataAvail();
          this.setLastChosenActivity(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_addPreferredActivity:
        {
          android.content.IntentFilter _arg0;
          _arg0 = data.readTypedObject(android.content.IntentFilter.CREATOR);
          int _arg1;
          _arg1 = data.readInt();
          android.content.ComponentName[] _arg2;
          _arg2 = data.createTypedArray(android.content.ComponentName.CREATOR);
          android.content.ComponentName _arg3;
          _arg3 = data.readTypedObject(android.content.ComponentName.CREATOR);
          int _arg4;
          _arg4 = data.readInt();
          boolean _arg5;
          _arg5 = data.readBoolean();
          data.enforceNoDataAvail();
          this.addPreferredActivity(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_replacePreferredActivity:
        {
          android.content.IntentFilter _arg0;
          _arg0 = data.readTypedObject(android.content.IntentFilter.CREATOR);
          int _arg1;
          _arg1 = data.readInt();
          android.content.ComponentName[] _arg2;
          _arg2 = data.createTypedArray(android.content.ComponentName.CREATOR);
          android.content.ComponentName _arg3;
          _arg3 = data.readTypedObject(android.content.ComponentName.CREATOR);
          int _arg4;
          _arg4 = data.readInt();
          data.enforceNoDataAvail();
          this.replacePreferredActivity(_arg0, _arg1, _arg2, _arg3, _arg4);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_clearPackagePreferredActivities:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          this.clearPackagePreferredActivities(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getPreferredActivities:
        {
          java.util.List<android.content.IntentFilter> _arg0;
          _arg0 = new java.util.ArrayList<android.content.IntentFilter>();
          java.util.List<android.content.ComponentName> _arg1;
          _arg1 = new java.util.ArrayList<android.content.ComponentName>();
          java.lang.String _arg2;
          _arg2 = data.readString();
          data.enforceNoDataAvail();
          int _result = this.getPreferredActivities(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeInt(_result);
          reply.writeTypedList(_arg0, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          reply.writeTypedList(_arg1, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_addPersistentPreferredActivity:
        {
          android.content.IntentFilter _arg0;
          _arg0 = data.readTypedObject(android.content.IntentFilter.CREATOR);
          android.content.ComponentName _arg1;
          _arg1 = data.readTypedObject(android.content.ComponentName.CREATOR);
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          this.addPersistentPreferredActivity(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_clearPackagePersistentPreferredActivities:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.clearPackagePersistentPreferredActivities(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_addCrossProfileIntentFilter:
        {
          android.content.IntentFilter _arg0;
          _arg0 = data.readTypedObject(android.content.IntentFilter.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          int _arg2;
          _arg2 = data.readInt();
          int _arg3;
          _arg3 = data.readInt();
          int _arg4;
          _arg4 = data.readInt();
          data.enforceNoDataAvail();
          this.addCrossProfileIntentFilter(_arg0, _arg1, _arg2, _arg3, _arg4);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_clearCrossProfileIntentFilters:
        {
          int _arg0;
          _arg0 = data.readInt();
          java.lang.String _arg1;
          _arg1 = data.readString();
          data.enforceNoDataAvail();
          this.clearCrossProfileIntentFilters(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_setDistractingPackageRestrictionsAsUser:
        {
          java.lang.String[] _arg0;
          _arg0 = data.createStringArray();
          int _arg1;
          _arg1 = data.readInt();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          java.lang.String[] _result = this.setDistractingPackageRestrictionsAsUser(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeStringArray(_result);
          break;
        }
        case TRANSACTION_setPackagesSuspendedAsUser:
        {
          java.lang.String[] _arg0;
          _arg0 = data.createStringArray();
          boolean _arg1;
          _arg1 = data.readBoolean();
          android.os.PersistableBundle _arg2;
          _arg2 = data.readTypedObject(android.os.PersistableBundle.CREATOR);
          android.os.PersistableBundle _arg3;
          _arg3 = data.readTypedObject(android.os.PersistableBundle.CREATOR);
          android.content.pm.SuspendDialogInfo _arg4;
          _arg4 = data.readTypedObject(android.content.pm.SuspendDialogInfo.CREATOR);
          java.lang.String _arg5;
          _arg5 = data.readString();
          int _arg6;
          _arg6 = data.readInt();
          data.enforceNoDataAvail();
          java.lang.String[] _result = this.setPackagesSuspendedAsUser(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
          reply.writeNoException();
          reply.writeStringArray(_result);
          break;
        }
        case TRANSACTION_getUnsuspendablePackagesForUser:
        {
          java.lang.String[] _arg0;
          _arg0 = data.createStringArray();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          java.lang.String[] _result = this.getUnsuspendablePackagesForUser(_arg0, _arg1);
          reply.writeNoException();
          reply.writeStringArray(_result);
          break;
        }
        case TRANSACTION_isPackageSuspendedForUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.isPackageSuspendedForUser(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getSuspendedPackageAppExtras:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.os.Bundle _result = this.getSuspendedPackageAppExtras(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getPreferredActivityBackup:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          byte[] _result = this.getPreferredActivityBackup(_arg0);
          reply.writeNoException();
          reply.writeByteArray(_result);
          break;
        }
        case TRANSACTION_restorePreferredActivities:
        {
          byte[] _arg0;
          _arg0 = data.createByteArray();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.restorePreferredActivities(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getDefaultAppsBackup:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          byte[] _result = this.getDefaultAppsBackup(_arg0);
          reply.writeNoException();
          reply.writeByteArray(_result);
          break;
        }
        case TRANSACTION_restoreDefaultApps:
        {
          byte[] _arg0;
          _arg0 = data.createByteArray();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.restoreDefaultApps(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getDomainVerificationBackup:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          byte[] _result = this.getDomainVerificationBackup(_arg0);
          reply.writeNoException();
          reply.writeByteArray(_result);
          break;
        }
        case TRANSACTION_restoreDomainVerification:
        {
          byte[] _arg0;
          _arg0 = data.createByteArray();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.restoreDomainVerification(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getHomeActivities:
        {
          java.util.List<android.content.pm.ResolveInfo> _arg0;
          _arg0 = new java.util.ArrayList<android.content.pm.ResolveInfo>();
          data.enforceNoDataAvail();
          android.content.ComponentName _result = this.getHomeActivities(_arg0);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          reply.writeTypedList(_arg0, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_setHomeActivity:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.setHomeActivity(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_overrideLabelAndIcon:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          java.lang.String _arg1;
          _arg1 = data.readString();
          int _arg2;
          _arg2 = data.readInt();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          this.overrideLabelAndIcon(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_restoreLabelAndIcon:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.restoreLabelAndIcon(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_setComponentEnabledSetting:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          int _arg1;
          _arg1 = data.readInt();
          int _arg2;
          _arg2 = data.readInt();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          this.setComponentEnabledSetting(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_setComponentEnabledSettings:
        {
          java.util.List<android.content.pm.PackageManager.ComponentEnabledSetting> _arg0;
          _arg0 = data.createTypedArrayList(android.content.pm.PackageManager.ComponentEnabledSetting.CREATOR);
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.setComponentEnabledSettings(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getComponentEnabledSetting:
        {
          android.content.ComponentName _arg0;
          _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.getComponentEnabledSetting(_arg0, _arg1);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_setApplicationEnabledSetting:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          int _arg2;
          _arg2 = data.readInt();
          int _arg3;
          _arg3 = data.readInt();
          java.lang.String _arg4;
          _arg4 = data.readString();
          data.enforceNoDataAvail();
          this.setApplicationEnabledSetting(_arg0, _arg1, _arg2, _arg3, _arg4);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getApplicationEnabledSetting:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.getApplicationEnabledSetting(_arg0, _arg1);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_logAppProcessStartIfNeeded:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          int _arg2;
          _arg2 = data.readInt();
          java.lang.String _arg3;
          _arg3 = data.readString();
          java.lang.String _arg4;
          _arg4 = data.readString();
          int _arg5;
          _arg5 = data.readInt();
          data.enforceNoDataAvail();
          this.logAppProcessStartIfNeeded(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_flushPackageRestrictionsAsUser:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          this.flushPackageRestrictionsAsUser(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_setPackageStoppedState:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          boolean _arg1;
          _arg1 = data.readBoolean();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          this.setPackageStoppedState(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_freeStorageAndNotify:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          android.content.pm.IPackageDataObserver _arg3;
          _arg3 = android.content.pm.IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
          data.enforceNoDataAvail();
          this.freeStorageAndNotify(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_freeStorage:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          android.content.IntentSender _arg3;
          _arg3 = data.readTypedObject(android.content.IntentSender.CREATOR);
          data.enforceNoDataAvail();
          this.freeStorage(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_deleteApplicationCacheFiles:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          android.content.pm.IPackageDataObserver _arg1;
          _arg1 = android.content.pm.IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
          data.enforceNoDataAvail();
          this.deleteApplicationCacheFiles(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_deleteApplicationCacheFilesAsUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          android.content.pm.IPackageDataObserver _arg2;
          _arg2 = android.content.pm.IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
          data.enforceNoDataAvail();
          this.deleteApplicationCacheFilesAsUser(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_clearApplicationUserData:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          android.content.pm.IPackageDataObserver _arg1;
          _arg1 = android.content.pm.IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          this.clearApplicationUserData(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_clearApplicationProfileData:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          this.clearApplicationProfileData(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getPackageSizeInfo:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          android.content.pm.IPackageStatsObserver _arg2;
          _arg2 = android.content.pm.IPackageStatsObserver.Stub.asInterface(data.readStrongBinder());
          data.enforceNoDataAvail();
          this.getPackageSizeInfo(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getSystemSharedLibraryNames:
        {
          java.lang.String[] _result = this.getSystemSharedLibraryNames();
          reply.writeNoException();
          reply.writeStringArray(_result);
          break;
        }
        case TRANSACTION_getSystemAvailableFeatures:
        {
          android.content.pm.ParceledListSlice _result = this.getSystemAvailableFeatures();
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_hasSystemFeature:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.hasSystemFeature(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_enterSafeMode:
        {
          this.enterSafeMode();
          reply.writeNoException();
          break;
        }
        case TRANSACTION_isSafeMode:
        {
          boolean _result = this.isSafeMode();
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_hasSystemUidErrors:
        {
          boolean _result = this.hasSystemUidErrors();
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_notifyPackageUse:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.notifyPackageUse(_arg0, _arg1);
          break;
        }
        case TRANSACTION_notifyDexLoad:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.util.Map<java.lang.String,java.lang.String> _arg1;
          {
            int N = data.readInt();
            _arg1 = N < 0 ? null : new java.util.HashMap<>();
            java.util.stream.IntStream.range(0, N).forEach(i -> {
              String k = data.readString();
              java.lang.String v;
              v = data.readString();
              _arg1.put(k, v);
            });
          }
          java.lang.String _arg2;
          _arg2 = data.readString();
          data.enforceNoDataAvail();
          this.notifyDexLoad(_arg0, _arg1, _arg2);
          break;
        }
        case TRANSACTION_registerDexModule:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          boolean _arg2;
          _arg2 = data.readBoolean();
          android.content.pm.IDexModuleRegisterCallback _arg3;
          _arg3 = android.content.pm.IDexModuleRegisterCallback.Stub.asInterface(data.readStrongBinder());
          data.enforceNoDataAvail();
          this.registerDexModule(_arg0, _arg1, _arg2, _arg3);
          break;
        }
        case TRANSACTION_performDexOptMode:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          boolean _arg1;
          _arg1 = data.readBoolean();
          java.lang.String _arg2;
          _arg2 = data.readString();
          boolean _arg3;
          _arg3 = data.readBoolean();
          boolean _arg4;
          _arg4 = data.readBoolean();
          java.lang.String _arg5;
          _arg5 = data.readString();
          data.enforceNoDataAvail();
          boolean _result = this.performDexOptMode(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_performDexOptSecondary:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          boolean _arg2;
          _arg2 = data.readBoolean();
          data.enforceNoDataAvail();
          boolean _result = this.performDexOptSecondary(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_dumpProfiles:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          boolean _arg1;
          _arg1 = data.readBoolean();
          data.enforceNoDataAvail();
          this.dumpProfiles(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_forceDexOpt:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          this.forceDexOpt(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_reconcileSecondaryDexFiles:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          this.reconcileSecondaryDexFiles(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getMoveStatus:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.getMoveStatus(_arg0);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_registerMoveCallback:
        {
          android.content.pm.IPackageMoveObserver _arg0;
          _arg0 = android.content.pm.IPackageMoveObserver.Stub.asInterface(data.readStrongBinder());
          data.enforceNoDataAvail();
          this.registerMoveCallback(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_unregisterMoveCallback:
        {
          android.content.pm.IPackageMoveObserver _arg0;
          _arg0 = android.content.pm.IPackageMoveObserver.Stub.asInterface(data.readStrongBinder());
          data.enforceNoDataAvail();
          this.unregisterMoveCallback(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_movePackage:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          data.enforceNoDataAvail();
          int _result = this.movePackage(_arg0, _arg1);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_movePrimaryStorage:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          int _result = this.movePrimaryStorage(_arg0);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_setInstallLocation:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.setInstallLocation(_arg0);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getInstallLocation:
        {
          int _result = this.getInstallLocation();
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_installExistingPackageAsUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          int _arg2;
          _arg2 = data.readInt();
          int _arg3;
          _arg3 = data.readInt();
          java.util.List<java.lang.String> _arg4;
          _arg4 = data.createStringArrayList();
          data.enforceNoDataAvail();
          int _result = this.installExistingPackageAsUser(_arg0, _arg1, _arg2, _arg3, _arg4);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_verifyPendingInstall:
        {
          int _arg0;
          _arg0 = data.readInt();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.verifyPendingInstall(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_extendVerificationTimeout:
        {
          int _arg0;
          _arg0 = data.readInt();
          int _arg1;
          _arg1 = data.readInt();
          long _arg2;
          _arg2 = data.readLong();
          data.enforceNoDataAvail();
          this.extendVerificationTimeout(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_verifyIntentFilter:
        {
          int _arg0;
          _arg0 = data.readInt();
          int _arg1;
          _arg1 = data.readInt();
          java.util.List<java.lang.String> _arg2;
          _arg2 = data.createStringArrayList();
          data.enforceNoDataAvail();
          this.verifyIntentFilter(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getIntentVerificationStatus:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.getIntentVerificationStatus(_arg0, _arg1);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_updateIntentVerificationStatus:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.updateIntentVerificationStatus(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getIntentFilterVerifications:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.getIntentFilterVerifications(_arg0);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getAllIntentFilters:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.getAllIntentFilters(_arg0);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getVerifierDeviceIdentity:
        {
          android.content.pm.VerifierDeviceIdentity _result = this.getVerifierDeviceIdentity();
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_isFirstBoot:
        {
          boolean _result = this.isFirstBoot();
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_isOnlyCoreApps:
        {
          boolean _result = this.isOnlyCoreApps();
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_isDeviceUpgrading:
        {
          boolean _result = this.isDeviceUpgrading();
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_isStorageLow:
        {
          boolean _result = this.isStorageLow();
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_setApplicationHiddenSettingAsUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          boolean _arg1;
          _arg1 = data.readBoolean();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.setApplicationHiddenSettingAsUser(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getApplicationHiddenSettingAsUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.getApplicationHiddenSettingAsUser(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_setSystemAppHiddenUntilInstalled:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          boolean _arg1;
          _arg1 = data.readBoolean();
          data.enforceNoDataAvail();
          this.setSystemAppHiddenUntilInstalled(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_setSystemAppInstallState:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          boolean _arg1;
          _arg1 = data.readBoolean();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.setSystemAppInstallState(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getPackageInstaller:
        {
          android.content.pm.IPackageInstaller _result = this.getPackageInstaller();
          reply.writeNoException();
          reply.writeStrongInterface(_result);
          break;
        }
        case TRANSACTION_setBlockUninstallForUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          boolean _arg1;
          _arg1 = data.readBoolean();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.setBlockUninstallForUser(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getBlockUninstallForUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.getBlockUninstallForUser(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getKeySetByAlias:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          data.enforceNoDataAvail();
          android.content.pm.KeySet _result = this.getKeySetByAlias(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getSigningKeySet:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          android.content.pm.KeySet _result = this.getSigningKeySet(_arg0);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_isPackageSignedByKeySet:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          android.content.pm.KeySet _arg1;
          _arg1 = data.readTypedObject(android.content.pm.KeySet.CREATOR);
          data.enforceNoDataAvail();
          boolean _result = this.isPackageSignedByKeySet(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_isPackageSignedByKeySetExactly:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          android.content.pm.KeySet _arg1;
          _arg1 = data.readTypedObject(android.content.pm.KeySet.CREATOR);
          data.enforceNoDataAvail();
          boolean _result = this.isPackageSignedByKeySetExactly(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getPermissionControllerPackageName:
        {
          java.lang.String _result = this.getPermissionControllerPackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getSdkSandboxPackageName:
        {
          java.lang.String _result = this.getSdkSandboxPackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getInstantApps:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.getInstantApps(_arg0);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getInstantAppCookie:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          byte[] _result = this.getInstantAppCookie(_arg0, _arg1);
          reply.writeNoException();
          reply.writeByteArray(_result);
          break;
        }
        case TRANSACTION_setInstantAppCookie:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          byte[] _arg1;
          _arg1 = data.createByteArray();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.setInstantAppCookie(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getInstantAppIcon:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.graphics.Bitmap _result = this.getInstantAppIcon(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_isInstantApp:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.isInstantApp(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_setRequiredForSystemUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          boolean _arg1;
          _arg1 = data.readBoolean();
          data.enforceNoDataAvail();
          boolean _result = this.setRequiredForSystemUser(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_setUpdateAvailable:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          boolean _arg1;
          _arg1 = data.readBoolean();
          data.enforceNoDataAvail();
          this.setUpdateAvailable(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getServicesSystemSharedLibraryPackageName:
        {
          java.lang.String _result = this.getServicesSystemSharedLibraryPackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getSharedSystemSharedLibraryPackageName:
        {
          java.lang.String _result = this.getSharedSystemSharedLibraryPackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getChangedPackages:
        {
          int _arg0;
          _arg0 = data.readInt();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ChangedPackages _result = this.getChangedPackages(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_isPackageDeviceAdminOnAnyUser:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          boolean _result = this.isPackageDeviceAdminOnAnyUser(_arg0);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getInstallReason:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.getInstallReason(_arg0, _arg1);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_getSharedLibraries:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.getSharedLibraries(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getDeclaredSharedLibraries:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          long _arg1;
          _arg1 = data.readLong();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.getDeclaredSharedLibraries(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_canRequestPackageInstalls:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.canRequestPackageInstalls(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_deletePreloadsFileCache:
        {
          this.deletePreloadsFileCache();
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getInstantAppResolverComponent:
        {
          android.content.ComponentName _result = this.getInstantAppResolverComponent();
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getInstantAppResolverSettingsComponent:
        {
          android.content.ComponentName _result = this.getInstantAppResolverSettingsComponent();
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getInstantAppInstallerComponent:
        {
          android.content.ComponentName _result = this.getInstantAppInstallerComponent();
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getInstantAppAndroidId:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          java.lang.String _result = this.getInstantAppAndroidId(_arg0, _arg1);
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getArtManager:
        {
          android.content.pm.dex.IArtManager _result = this.getArtManager();
          reply.writeNoException();
          reply.writeStrongInterface(_result);
          break;
        }
        case TRANSACTION_setHarmfulAppWarning:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.CharSequence _arg1;
          _arg1 = data.readTypedObject(android.text.TextUtils.CHAR_SEQUENCE_CREATOR);
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          this.setHarmfulAppWarning(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getHarmfulAppWarning:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          java.lang.CharSequence _result = this.getHarmfulAppWarning(_arg0, _arg1);
          reply.writeNoException();
          if (_result!=null) {
            reply.writeInt(1);
            android.text.TextUtils.writeToParcel(_result, reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          }
          else {
            reply.writeInt(0);
          }
          break;
        }
        case TRANSACTION_hasSigningCertificate:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          byte[] _arg1;
          _arg1 = data.createByteArray();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.hasSigningCertificate(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_hasUidSigningCertificate:
        {
          int _arg0;
          _arg0 = data.readInt();
          byte[] _arg1;
          _arg1 = data.createByteArray();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.hasUidSigningCertificate(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_getDefaultTextClassifierPackageName:
        {
          java.lang.String _result = this.getDefaultTextClassifierPackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getSystemTextClassifierPackageName:
        {
          java.lang.String _result = this.getSystemTextClassifierPackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getAttentionServicePackageName:
        {
          java.lang.String _result = this.getAttentionServicePackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getRotationResolverPackageName:
        {
          java.lang.String _result = this.getRotationResolverPackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getWellbeingPackageName:
        {
          java.lang.String _result = this.getWellbeingPackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getAppPredictionServicePackageName:
        {
          java.lang.String _result = this.getAppPredictionServicePackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getSystemCaptionsServicePackageName:
        {
          java.lang.String _result = this.getSystemCaptionsServicePackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getSetupWizardPackageName:
        {
          java.lang.String _result = this.getSetupWizardPackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getIncidentReportApproverPackageName:
        {
          java.lang.String _result = this.getIncidentReportApproverPackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_getContentCaptureServicePackageName:
        {
          java.lang.String _result = this.getContentCaptureServicePackageName();
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_isPackageStateProtected:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.isPackageStateProtected(_arg0, _arg1);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_sendDeviceCustomizationReadyBroadcast:
        {
          this.sendDeviceCustomizationReadyBroadcast();
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getInstalledModules:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          java.util.List<android.content.pm.ModuleInfo> _result = this.getInstalledModules(_arg0);
          reply.writeNoException();
          reply.writeTypedList(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getModuleInfo:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ModuleInfo _result = this.getModuleInfo(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getRuntimePermissionsVersion:
        {
          int _arg0;
          _arg0 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.getRuntimePermissionsVersion(_arg0);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_setRuntimePermissionsVersion:
        {
          int _arg0;
          _arg0 = data.readInt();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.setRuntimePermissionsVersion(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_notifyPackagesReplacedReceived:
        {
          java.lang.String[] _arg0;
          _arg0 = data.createStringArray();
          data.enforceNoDataAvail();
          this.notifyPackagesReplacedReceived(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_requestPackageChecksums:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          boolean _arg1;
          _arg1 = data.readBoolean();
          int _arg2;
          _arg2 = data.readInt();
          int _arg3;
          _arg3 = data.readInt();
          java.util.List _arg4;
          java.lang.ClassLoader cl = (java.lang.ClassLoader)this.getClass().getClassLoader();
          _arg4 = data.readArrayList(cl);
          android.content.pm.IOnChecksumsReadyListener _arg5;
          _arg5 = android.content.pm.IOnChecksumsReadyListener.Stub.asInterface(data.readStrongBinder());
          int _arg6;
          _arg6 = data.readInt();
          data.enforceNoDataAvail();
          this.requestPackageChecksums(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getLaunchIntentSenderForPackage:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          java.lang.String _arg2;
          _arg2 = data.readString();
          int _arg3;
          _arg3 = data.readInt();
          data.enforceNoDataAvail();
          android.content.IntentSender _result = this.getLaunchIntentSenderForPackage(_arg0, _arg1, _arg2, _arg3);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_getAppOpPermissionPackages:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          java.lang.String[] _result = this.getAppOpPermissionPackages(_arg0);
          reply.writeNoException();
          reply.writeStringArray(_result);
          break;
        }
        case TRANSACTION_getPermissionGroupInfo:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.PermissionGroupInfo _result = this.getPermissionGroupInfo(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_addPermission:
        {
          android.content.pm.PermissionInfo _arg0;
          _arg0 = data.readTypedObject(android.content.pm.PermissionInfo.CREATOR);
          data.enforceNoDataAvail();
          boolean _result = this.addPermission(_arg0);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_addPermissionAsync:
        {
          android.content.pm.PermissionInfo _arg0;
          _arg0 = data.readTypedObject(android.content.pm.PermissionInfo.CREATOR);
          data.enforceNoDataAvail();
          boolean _result = this.addPermissionAsync(_arg0);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_removePermission:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          this.removePermission(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_checkPermission:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.checkPermission(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_grantRuntimePermission:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          this.grantRuntimePermission(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_checkUidPermission:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          int _result = this.checkUidPermission(_arg0, _arg1);
          reply.writeNoException();
          reply.writeInt(_result);
          break;
        }
        case TRANSACTION_setMimeGroup:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          java.util.List<java.lang.String> _arg2;
          _arg2 = data.createStringArrayList();
          data.enforceNoDataAvail();
          this.setMimeGroup(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getSplashScreenTheme:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          java.lang.String _result = this.getSplashScreenTheme(_arg0, _arg1);
          reply.writeNoException();
          reply.writeString(_result);
          break;
        }
        case TRANSACTION_setSplashScreenTheme:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          this.setSplashScreenTheme(_arg0, _arg1, _arg2);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getMimeGroup:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          data.enforceNoDataAvail();
          java.util.List<java.lang.String> _result = this.getMimeGroup(_arg0, _arg1);
          reply.writeNoException();
          reply.writeStringList(_result);
          break;
        }
        case TRANSACTION_isAutoRevokeWhitelisted:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          data.enforceNoDataAvail();
          boolean _result = this.isAutoRevokeWhitelisted(_arg0);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        case TRANSACTION_makeProviderVisible:
        {
          int _arg0;
          _arg0 = data.readInt();
          java.lang.String _arg1;
          _arg1 = data.readString();
          data.enforceNoDataAvail();
          this.makeProviderVisible(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_makeUidVisible:
        {
          int _arg0;
          _arg0 = data.readInt();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.makeUidVisible(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getHoldLockToken:
        {
          android.os.IBinder _result = this.getHoldLockToken();
          reply.writeNoException();
          reply.writeStrongBinder(_result);
          break;
        }
        case TRANSACTION_holdLock:
        {
          android.os.IBinder _arg0;
          _arg0 = data.readStrongBinder();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          this.holdLock(_arg0, _arg1);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_getProperty:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          java.lang.String _arg2;
          _arg2 = data.readString();
          data.enforceNoDataAvail();
          android.content.pm.PackageManager.Property _result = this.getProperty(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_queryProperty:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          int _arg1;
          _arg1 = data.readInt();
          data.enforceNoDataAvail();
          android.content.pm.ParceledListSlice _result = this.queryProperty(_arg0, _arg1);
          reply.writeNoException();
          reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
          break;
        }
        case TRANSACTION_setKeepUninstalledPackages:
        {
          java.util.List<java.lang.String> _arg0;
          _arg0 = data.createStringArrayList();
          data.enforceNoDataAvail();
          this.setKeepUninstalledPackages(_arg0);
          reply.writeNoException();
          break;
        }
        case TRANSACTION_canPackageQuery:
        {
          java.lang.String _arg0;
          _arg0 = data.readString();
          java.lang.String _arg1;
          _arg1 = data.readString();
          int _arg2;
          _arg2 = data.readInt();
          data.enforceNoDataAvail();
          boolean _result = this.canPackageQuery(_arg0, _arg1, _arg2);
          reply.writeNoException();
          reply.writeBoolean(_result);
          break;
        }
        default:
        {
          return super.onTransact(code, data, reply, flags);
        }
      }
      return true;
    }
    private static class Proxy implements android.content.pm.IPackageManager
    {
      private android.os.IBinder mRemote;
      Proxy(android.os.IBinder remote)
      {
        mRemote = remote;
      }
      @Override public android.os.IBinder asBinder()
      {
        return mRemote;
      }
      public java.lang.String getInterfaceDescriptor()
      {
        return DESCRIPTOR;
      }
      @Override public void checkPackageStartable(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_checkPackageStartable, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public boolean isPackageAvailable(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isPackageAvailable, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.PackageInfo getPackageInfo(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.PackageInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPackageInfo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.PackageInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage versionedPackage, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.PackageInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(versionedPackage, 0);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPackageInfoVersioned, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.PackageInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int getPackageUid(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPackageUid, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int[] getPackageGids(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPackageGids, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createIntArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String[] currentToCanonicalPackageNames(java.lang.String[] names) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStringArray(names);
          boolean _status = mRemote.transact(Stub.TRANSACTION_currentToCanonicalPackageNames, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[] names) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStringArray(names);
          boolean _status = mRemote.transact(Stub.TRANSACTION_canonicalToCurrentPackageNames, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ApplicationInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getApplicationInfo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ApplicationInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /** @return the target SDK for the given package name, or -1 if it cannot be retrieved */
      @Override public int getTargetSdkVersion(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getTargetSdkVersion, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ActivityInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(className, 0);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getActivityInfo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ActivityInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean activitySupportsIntent(android.content.ComponentName className, android.content.Intent intent, java.lang.String resolvedType) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(className, 0);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          boolean _status = mRemote.transact(Stub.TRANSACTION_activitySupportsIntent, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ActivityInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(className, 0);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getReceiverInfo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ActivityInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ServiceInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(className, 0);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getServiceInfo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ServiceInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ProviderInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(className, 0);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getProviderInfo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ProviderInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isProtectedBroadcast(java.lang.String actionName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(actionName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isProtectedBroadcast, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int checkSignatures(java.lang.String pkg1, java.lang.String pkg2) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(pkg1);
          _data.writeString(pkg2);
          boolean _status = mRemote.transact(Stub.TRANSACTION_checkSignatures, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int checkUidSignatures(int uid1, int uid2) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(uid1);
          _data.writeInt(uid2);
          boolean _status = mRemote.transact(Stub.TRANSACTION_checkUidSignatures, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.util.List<java.lang.String> getAllPackages() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.util.List<java.lang.String> _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getAllPackages, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArrayList();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String[] getPackagesForUid(int uid) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(uid);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPackagesForUid, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getNameForUid(int uid) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(uid);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getNameForUid, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String[] getNamesForUids(int[] uids) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeIntArray(uids);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getNamesForUids, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int getUidForSharedUser(java.lang.String sharedUserName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(sharedUserName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getUidForSharedUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int getFlagsForUid(int uid) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(uid);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getFlagsForUid, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int getPrivateFlagsForUid(int uid) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(uid);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPrivateFlagsForUid, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isUidPrivileged(int uid) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(uid);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isUidPrivileged, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ResolveInfo resolveIntent(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ResolveInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_resolveIntent, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ResolveInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent intent, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ResolveInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intent, 0);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_findPersistentPreferredActivity, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ResolveInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean canForwardTo(android.content.Intent intent, java.lang.String resolvedType, int sourceUserId, int targetUserId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          _data.writeInt(sourceUserId);
          _data.writeInt(targetUserId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_canForwardTo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_queryIntentActivities, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName caller, android.content.Intent[] specifics, java.lang.String[] specificTypes, android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(caller, 0);
          _data.writeTypedArray(specifics, 0);
          _data.writeStringArray(specificTypes);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_queryIntentActivityOptions, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_queryIntentReceivers, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ResolveInfo resolveService(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ResolveInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_resolveService, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ResolveInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_queryIntentServices, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_queryIntentContentProviders, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /**
       * This implements getInstalledPackages via a "last returned row"
       * mechanism that is not exposed in the API. This is to get around the IPC
       * limit that kicks in when flags are included that bloat up the data
       * returned.
       */
      @Override public android.content.pm.ParceledListSlice getInstalledPackages(long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstalledPackages, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /**
       * This implements getPackagesHoldingPermissions via a "last returned row"
       * mechanism that is not exposed in the API. This is to get around the IPC
       * limit that kicks in when flags are included that bloat up the data
       * returned.
       */
      @Override public android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[] permissions, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStringArray(permissions);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPackagesHoldingPermissions, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /**
       * This implements getInstalledApplications via a "last returned row"
       * mechanism that is not exposed in the API. This is to get around the IPC
       * limit that kicks in when flags are included that bloat up the data
       * returned.
       */
      @Override public android.content.pm.ParceledListSlice getInstalledApplications(long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstalledApplications, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /**
       * Retrieve all applications that are marked as persistent.
       *
       * @return A List<ApplicationInfo> containing one entry for each persistent
       *         application.
       */
      @Override public android.content.pm.ParceledListSlice getPersistentApplications(int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPersistentApplications, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String name, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ProviderInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(name);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_resolveContentProvider, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ProviderInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /**
       * Retrieve sync information for all content providers.
       *
       * @param outNames Filled in with a list of the root names of the content
       *                 providers that can sync.
       * @param outInfo Filled in with a list of the ProviderInfo for each
       *                name in 'outNames'.
       */
      @Override public void querySyncProviders(java.util.List<java.lang.String> outNames, java.util.List<android.content.pm.ProviderInfo> outInfo) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStringList(outNames);
          _data.writeTypedList(outInfo, 0);
          boolean _status = mRemote.transact(Stub.TRANSACTION_querySyncProviders, _data, _reply, 0);
          _reply.readException();
          _reply.readStringList(outNames);
          _reply.readTypedList(outInfo, android.content.pm.ProviderInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public android.content.pm.ParceledListSlice queryContentProviders(java.lang.String processName, int uid, long flags, java.lang.String metaDataKey) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(processName);
          _data.writeInt(uid);
          _data.writeLong(flags);
          _data.writeString(metaDataKey);
          boolean _status = mRemote.transact(Stub.TRANSACTION_queryContentProviders, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName className, int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.InstrumentationInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(className, 0);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstrumentationInfo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.InstrumentationInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice queryInstrumentation(java.lang.String targetPackage, int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(targetPackage);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_queryInstrumentation, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void finishPackageInstall(int token, boolean didLaunch) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(token);
          _data.writeBoolean(didLaunch);
          boolean _status = mRemote.transact(Stub.TRANSACTION_finishPackageInstall, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void setInstallerPackageName(java.lang.String targetPackage, java.lang.String installerPackageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(targetPackage);
          _data.writeString(installerPackageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setInstallerPackageName, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void setApplicationCategoryHint(java.lang.String packageName, int categoryHint, java.lang.String callerPackageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(categoryHint);
          _data.writeString(callerPackageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setApplicationCategoryHint, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /** @deprecated rawr, don't call AIDL methods directly! */
      @Override public void deletePackageAsUser(java.lang.String packageName, int versionCode, android.content.pm.IPackageDeleteObserver observer, int userId, int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(versionCode);
          _data.writeStrongInterface(observer);
          _data.writeInt(userId);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_deletePackageAsUser, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Delete a package for a specific user.
       *
       * @param versionedPackage The package to delete.
       * @param observer a callback to use to notify when the package deletion in finished.
       * @param userId the id of the user for whom to delete the package
       * @param flags - possible values: {@link #DELETE_KEEP_DATA}
       */
      @Override public void deletePackageVersioned(android.content.pm.VersionedPackage versionedPackage, android.content.pm.IPackageDeleteObserver2 observer, int userId, int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(versionedPackage, 0);
          _data.writeStrongInterface(observer);
          _data.writeInt(userId);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_deletePackageVersioned, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Delete a package for a specific user.
       *
       * @param versionedPackage The package to delete.
       * @param observer a callback to use to notify when the package deletion in finished.
       * @param userId the id of the user for whom to delete the package
       */
      @Override public void deleteExistingPackageAsUser(android.content.pm.VersionedPackage versionedPackage, android.content.pm.IPackageDeleteObserver2 observer, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(versionedPackage, 0);
          _data.writeStrongInterface(observer);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_deleteExistingPackageAsUser, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public java.lang.String getInstallerPackageName(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstallerPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.InstallSourceInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstallSourceInfo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.InstallSourceInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void resetApplicationPreferences(int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_resetApplicationPreferences, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent intent, java.lang.String resolvedType, int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ResolveInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getLastChosenActivity, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ResolveInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void setLastChosenActivity(android.content.Intent intent, java.lang.String resolvedType, int flags, android.content.IntentFilter filter, int match, android.content.ComponentName activity) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intent, 0);
          _data.writeString(resolvedType);
          _data.writeInt(flags);
          _data.writeTypedObject(filter, 0);
          _data.writeInt(match);
          _data.writeTypedObject(activity, 0);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setLastChosenActivity, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void addPreferredActivity(android.content.IntentFilter filter, int match, android.content.ComponentName[] set, android.content.ComponentName activity, int userId, boolean removeExisting) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(filter, 0);
          _data.writeInt(match);
          _data.writeTypedArray(set, 0);
          _data.writeTypedObject(activity, 0);
          _data.writeInt(userId);
          _data.writeBoolean(removeExisting);
          boolean _status = mRemote.transact(Stub.TRANSACTION_addPreferredActivity, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void replacePreferredActivity(android.content.IntentFilter filter, int match, android.content.ComponentName[] set, android.content.ComponentName activity, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(filter, 0);
          _data.writeInt(match);
          _data.writeTypedArray(set, 0);
          _data.writeTypedObject(activity, 0);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_replacePreferredActivity, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void clearPackagePreferredActivities(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_clearPackagePreferredActivities, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public int getPreferredActivities(java.util.List<android.content.IntentFilter> outFilters, java.util.List<android.content.ComponentName> outActivities, java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPreferredActivities, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
          _reply.readTypedList(outFilters, android.content.IntentFilter.CREATOR);
          _reply.readTypedList(outActivities, android.content.ComponentName.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void addPersistentPreferredActivity(android.content.IntentFilter filter, android.content.ComponentName activity, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(filter, 0);
          _data.writeTypedObject(activity, 0);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_addPersistentPreferredActivity, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void clearPackagePersistentPreferredActivities(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_clearPackagePersistentPreferredActivities, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void addCrossProfileIntentFilter(android.content.IntentFilter intentFilter, java.lang.String ownerPackage, int sourceUserId, int targetUserId, int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(intentFilter, 0);
          _data.writeString(ownerPackage);
          _data.writeInt(sourceUserId);
          _data.writeInt(targetUserId);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_addCrossProfileIntentFilter, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void clearCrossProfileIntentFilters(int sourceUserId, java.lang.String ownerPackage) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(sourceUserId);
          _data.writeString(ownerPackage);
          boolean _status = mRemote.transact(Stub.TRANSACTION_clearCrossProfileIntentFilters, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[] packageNames, int restrictionFlags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStringArray(packageNames);
          _data.writeInt(restrictionFlags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setDistractingPackageRestrictionsAsUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[] packageNames, boolean suspended, android.os.PersistableBundle appExtras, android.os.PersistableBundle launcherExtras, android.content.pm.SuspendDialogInfo dialogInfo, java.lang.String callingPackage, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStringArray(packageNames);
          _data.writeBoolean(suspended);
          _data.writeTypedObject(appExtras, 0);
          _data.writeTypedObject(launcherExtras, 0);
          _data.writeTypedObject(dialogInfo, 0);
          _data.writeString(callingPackage);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setPackagesSuspendedAsUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[] packageNames, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStringArray(packageNames);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getUnsuspendablePackagesForUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isPackageSuspendedForUser(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isPackageSuspendedForUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.os.Bundle getSuspendedPackageAppExtras(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.os.Bundle _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSuspendedPackageAppExtras, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.os.Bundle.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /** Backup/restore support - only the system uid may use these. */
      @Override public byte[] getPreferredActivityBackup(int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        byte[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPreferredActivityBackup, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createByteArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void restorePreferredActivities(byte[] backup, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeByteArray(backup);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_restorePreferredActivities, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public byte[] getDefaultAppsBackup(int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        byte[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getDefaultAppsBackup, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createByteArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void restoreDefaultApps(byte[] backup, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeByteArray(backup);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_restoreDefaultApps, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public byte[] getDomainVerificationBackup(int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        byte[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getDomainVerificationBackup, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createByteArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void restoreDomainVerification(byte[] backup, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeByteArray(backup);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_restoreDomainVerification, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Report the set of 'Home' activity candidates, plus (if any) which of them
       * is the current "always use this one" setting.
       */
      @Override public android.content.ComponentName getHomeActivities(java.util.List<android.content.pm.ResolveInfo> outHomeCandidates) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.ComponentName _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getHomeActivities, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.ComponentName.CREATOR);
          _reply.readTypedList(outHomeCandidates, android.content.pm.ResolveInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void setHomeActivity(android.content.ComponentName className, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(className, 0);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setHomeActivity, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Overrides the label and icon of the component specified by the component name. The component
       * must belong to the calling app.
       *
       * These changes will be reset on the next boot and whenever the package is updated.
       *
       * Only the app defined as com.android.internal.R.config_overrideComponentUiPackage is allowed
       * to call this.
       *
       * @param componentName The component name to override the label/icon of.
       * @param nonLocalizedLabel The label to be displayed.
       * @param icon The icon to be displayed.
       * @param userId The user id.
       */
      @Override public void overrideLabelAndIcon(android.content.ComponentName componentName, java.lang.String nonLocalizedLabel, int icon, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(componentName, 0);
          _data.writeString(nonLocalizedLabel);
          _data.writeInt(icon);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_overrideLabelAndIcon, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Restores the label and icon of the activity specified by the component name if either has
       * been overridden. The component must belong to the calling app.
       *
       * Only the app defined as com.android.internal.R.config_overrideComponentUiPackage is allowed
       * to call this.
       *
       * @param componentName The component name.
       * @param userId The user id.
       */
      @Override public void restoreLabelAndIcon(android.content.ComponentName componentName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(componentName, 0);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_restoreLabelAndIcon, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /** As per {@link android.content.pm.PackageManager#setComponentEnabledSetting}. */
      @Override public void setComponentEnabledSetting(android.content.ComponentName componentName, int newState, int flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(componentName, 0);
          _data.writeInt(newState);
          _data.writeInt(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setComponentEnabledSetting, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /** As per {@link android.content.pm.PackageManager#setComponentEnabledSettings}. */
      @Override public void setComponentEnabledSettings(java.util.List<android.content.pm.PackageManager.ComponentEnabledSetting> settings, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedList(settings, 0);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setComponentEnabledSettings, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /** As per {@link android.content.pm.PackageManager#getComponentEnabledSetting}. */
      @Override public int getComponentEnabledSetting(android.content.ComponentName componentName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(componentName, 0);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getComponentEnabledSetting, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /** As per {@link android.content.pm.PackageManager#setApplicationEnabledSetting}. */
      @Override public void setApplicationEnabledSetting(java.lang.String packageName, int newState, int flags, int userId, java.lang.String callingPackage) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(newState);
          _data.writeInt(flags);
          _data.writeInt(userId);
          _data.writeString(callingPackage);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setApplicationEnabledSetting, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /** As per {@link android.content.pm.PackageManager#getApplicationEnabledSetting}. */
      @Override public int getApplicationEnabledSetting(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getApplicationEnabledSetting, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /** Logs process start information (including APK hash) to the security log. */
      @Override public void logAppProcessStartIfNeeded(java.lang.String packageName, java.lang.String processName, int uid, java.lang.String seinfo, java.lang.String apkFile, int pid) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeString(processName);
          _data.writeInt(uid);
          _data.writeString(seinfo);
          _data.writeString(apkFile);
          _data.writeInt(pid);
          boolean _status = mRemote.transact(Stub.TRANSACTION_logAppProcessStartIfNeeded, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /** As per {@link android.content.pm.PackageManager#flushPackageRestrictionsAsUser}. */
      @Override public void flushPackageRestrictionsAsUser(int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_flushPackageRestrictionsAsUser, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Set whether the given package should be considered stopped, making
       * it not visible to implicit intents that filter out stopped packages.
       */
      @Override public void setPackageStoppedState(java.lang.String packageName, boolean stopped, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeBoolean(stopped);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setPackageStoppedState, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Free storage by deleting LRU sorted list of cache files across
       * all applications. If the currently available free storage
       * on the device is greater than or equal to the requested
       * free storage, no cache files are cleared. If the currently
       * available storage on the device is less than the requested
       * free storage, some or all of the cache files across
       * all applications are deleted (based on last accessed time)
       * to increase the free storage space on the device to
       * the requested value. There is no guarantee that clearing all
       * the cache files from all applications will clear up
       * enough storage to achieve the desired value.
       * @param freeStorageSize The number of bytes of storage to be
       * freed by the system. Say if freeStorageSize is XX,
       * and the current free storage is YY,
       * if XX is less than YY, just return. if not free XX-YY number
       * of bytes if possible.
       * @param observer call back used to notify when
       * the operation is completed
       */
      @Override public void freeStorageAndNotify(java.lang.String volumeUuid, long freeStorageSize, int storageFlags, android.content.pm.IPackageDataObserver observer) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(volumeUuid);
          _data.writeLong(freeStorageSize);
          _data.writeInt(storageFlags);
          _data.writeStrongInterface(observer);
          boolean _status = mRemote.transact(Stub.TRANSACTION_freeStorageAndNotify, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Free storage by deleting LRU sorted list of cache files across
       * all applications. If the currently available free storage
       * on the device is greater than or equal to the requested
       * free storage, no cache files are cleared. If the currently
       * available storage on the device is less than the requested
       * free storage, some or all of the cache files across
       * all applications are deleted (based on last accessed time)
       * to increase the free storage space on the device to
       * the requested value. There is no guarantee that clearing all
       * the cache files from all applications will clear up
       * enough storage to achieve the desired value.
       * @param freeStorageSize The number of bytes of storage to be
       * freed by the system. Say if freeStorageSize is XX,
       * and the current free storage is YY,
       * if XX is less than YY, just return. if not free XX-YY number
       * of bytes if possible.
       * @param pi IntentSender call back used to
       * notify when the operation is completed.May be null
       * to indicate that no call back is desired.
       */
      @Override public void freeStorage(java.lang.String volumeUuid, long freeStorageSize, int storageFlags, android.content.IntentSender pi) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(volumeUuid);
          _data.writeLong(freeStorageSize);
          _data.writeInt(storageFlags);
          _data.writeTypedObject(pi, 0);
          boolean _status = mRemote.transact(Stub.TRANSACTION_freeStorage, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Delete all the cache files in an applications cache directory
       * @param packageName The package name of the application whose cache
       * files need to be deleted
       * @param observer a callback used to notify when the deletion is finished.
       */
      @Override public void deleteApplicationCacheFiles(java.lang.String packageName, android.content.pm.IPackageDataObserver observer) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeStrongInterface(observer);
          boolean _status = mRemote.transact(Stub.TRANSACTION_deleteApplicationCacheFiles, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Delete all the cache files in an applications cache directory
       * @param packageName The package name of the application whose cache
       * files need to be deleted
       * @param userId the user to delete application cache for
       * @param observer a callback used to notify when the deletion is finished.
       */
      @Override public void deleteApplicationCacheFilesAsUser(java.lang.String packageName, int userId, android.content.pm.IPackageDataObserver observer) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          _data.writeStrongInterface(observer);
          boolean _status = mRemote.transact(Stub.TRANSACTION_deleteApplicationCacheFilesAsUser, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Clear the user data directory of an application.
       * @param packageName The package name of the application whose cache
       * files need to be deleted
       * @param observer a callback used to notify when the operation is completed.
       */
      @Override public void clearApplicationUserData(java.lang.String packageName, android.content.pm.IPackageDataObserver observer, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeStrongInterface(observer);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_clearApplicationUserData, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Clear the profile data of an application.
       * @param packageName The package name of the application whose profile data
       * need to be deleted
       */
      @Override public void clearApplicationProfileData(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_clearApplicationProfileData, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Get package statistics including the code, data and cache size for
       * an already installed package
       * @param packageName The package name of the application
       * @param userHandle Which user the size should be retrieved for
       * @param observer a callback to use to notify when the asynchronous
       * retrieval of information is complete.
       */
      @Override public void getPackageSizeInfo(java.lang.String packageName, int userHandle, android.content.pm.IPackageStatsObserver observer) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userHandle);
          _data.writeStrongInterface(observer);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPackageSizeInfo, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Get a list of shared libraries that are available on the
       * system.
       */
      @Override public java.lang.String[] getSystemSharedLibraryNames() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSystemSharedLibraryNames, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /**
       * Get a list of features that are available on the
       * system.
       */
      @Override public android.content.pm.ParceledListSlice getSystemAvailableFeatures() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSystemAvailableFeatures, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean hasSystemFeature(java.lang.String name, int version) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(name);
          _data.writeInt(version);
          boolean _status = mRemote.transact(Stub.TRANSACTION_hasSystemFeature, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void enterSafeMode() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_enterSafeMode, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public boolean isSafeMode() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isSafeMode, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean hasSystemUidErrors() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_hasSystemUidErrors, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /**
       * Notify the package manager that a package is going to be used and why.
       *
       * See PackageManager.NOTIFY_PACKAGE_USE_* for reasons.
       */
      @Override public void notifyPackageUse(java.lang.String packageName, int reason) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(reason);
          boolean _status = mRemote.transact(Stub.TRANSACTION_notifyPackageUse, _data, null, android.os.IBinder.FLAG_ONEWAY);
        }
        finally {
          _data.recycle();
        }
      }
      /**
       * Notify the package manager that a list of dex files have been loaded.
       *
       * @param loadingPackageName the name of the package who performs the load
       * @param classLoaderContextMap a map from file paths to dex files that have been loaded to
       *     the class loader context that was used to load them.
       * @param loaderIsa the ISA of the loader process
       */
      @Override public void notifyDexLoad(java.lang.String loadingPackageName, java.util.Map<java.lang.String,java.lang.String> classLoaderContextMap, java.lang.String loaderIsa) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(loadingPackageName);
          if (classLoaderContextMap == null) {
            _data.writeInt(-1);
          } else {
            _data.writeInt(classLoaderContextMap.size());
            classLoaderContextMap.forEach((k, v) -> {
              _data.writeString(k);
              _data.writeString(v);
            });
          }
          _data.writeString(loaderIsa);
          boolean _status = mRemote.transact(Stub.TRANSACTION_notifyDexLoad, _data, null, android.os.IBinder.FLAG_ONEWAY);
        }
        finally {
          _data.recycle();
        }
      }
      /**
       * Register an application dex module with the package manager.
       * The package manager will keep track of the given module for future optimizations.
       *
       * Dex module optimizations will disable the classpath checking at runtime. The client bares
       * the responsibility to ensure that the static assumptions on classes in the optimized code
       * hold at runtime (e.g. there's no duplicate classes in the classpath).
       *
       * Note that the package manager already keeps track of dex modules loaded with
       * {@link dalvik.system.DexClassLoader} and {@link dalvik.system.PathClassLoader}.
       * This can be called for an eager registration.
       *
       * The call might take a while and the results will be posted on the main thread, using
       * the given callback.
       *
       * If the module is intended to be shared with other apps, make sure that the file
       * permissions allow for it.
       * If at registration time the permissions allow for others to read it, the module would
       * be marked as a shared module which might undergo a different optimization strategy.
       * (usually shared modules will generated larger optimizations artifacts,
       * taking more disk space).
       *
       * @param packageName the package name to which the dex module belongs
       * @param dexModulePath the absolute path of the dex module.
       * @param isSharedModule whether or not the module is intended to be used by other apps.
       * @param callback if not null,
       *   {@link android.content.pm.IDexModuleRegisterCallback.IDexModuleRegisterCallback#onDexModuleRegistered}
       *   will be called once the registration finishes.
       */
      @Override public void registerDexModule(java.lang.String packageName, java.lang.String dexModulePath, boolean isSharedModule, android.content.pm.IDexModuleRegisterCallback callback) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeString(dexModulePath);
          _data.writeBoolean(isSharedModule);
          _data.writeStrongInterface(callback);
          boolean _status = mRemote.transact(Stub.TRANSACTION_registerDexModule, _data, null, android.os.IBinder.FLAG_ONEWAY);
        }
        finally {
          _data.recycle();
        }
      }
      /**
       * Ask the package manager to perform a dex-opt with the given compiler filter.
       *
       * Note: exposed only for the shell command to allow moving packages explicitly to a
       *       definite state.
       */
      @Override public boolean performDexOptMode(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete, java.lang.String splitName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeBoolean(checkProfiles);
          _data.writeString(targetCompilerFilter);
          _data.writeBoolean(force);
          _data.writeBoolean(bootComplete);
          _data.writeString(splitName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_performDexOptMode, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /**
       * Ask the package manager to perform a dex-opt with the given compiler filter on the
       * secondary dex files belonging to the given package.
       *
       * Note: exposed only for the shell command to allow moving packages explicitly to a
       *       definite state.
       */
      @Override public boolean performDexOptSecondary(java.lang.String packageName, java.lang.String targetCompilerFilter, boolean force) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeString(targetCompilerFilter);
          _data.writeBoolean(force);
          boolean _status = mRemote.transact(Stub.TRANSACTION_performDexOptSecondary, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /**
       * Ask the package manager to dump profiles associated with a package.
       *
       * @param packageName The name of the package to dump.
       * @param dumpClassesAndMethods If false, pass {@code --dump-only} to profman to dump the
       *   profile in a human readable form intended for debugging. If true, pass
       *   {@code --dump-classes-and-methods} to profman to dump a sorted list of classes and methods
       *   in a human readable form that is valid input for {@code profman --create-profile-from}.
       */
      @Override public void dumpProfiles(java.lang.String packageName, boolean dumpClassesAndMethods) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeBoolean(dumpClassesAndMethods);
          boolean _status = mRemote.transact(Stub.TRANSACTION_dumpProfiles, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void forceDexOpt(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_forceDexOpt, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /**
       * Reconcile the information we have about the secondary dex files belonging to
       * {@code packagName} and the actual dex files. For all dex files that were
       * deleted, update the internal records and delete the generated oat files.
       */
      @Override public void reconcileSecondaryDexFiles(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_reconcileSecondaryDexFiles, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public int getMoveStatus(int moveId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(moveId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getMoveStatus, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void registerMoveCallback(android.content.pm.IPackageMoveObserver callback) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStrongInterface(callback);
          boolean _status = mRemote.transact(Stub.TRANSACTION_registerMoveCallback, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void unregisterMoveCallback(android.content.pm.IPackageMoveObserver callback) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStrongInterface(callback);
          boolean _status = mRemote.transact(Stub.TRANSACTION_unregisterMoveCallback, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public int movePackage(java.lang.String packageName, java.lang.String volumeUuid) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeString(volumeUuid);
          boolean _status = mRemote.transact(Stub.TRANSACTION_movePackage, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int movePrimaryStorage(java.lang.String volumeUuid) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(volumeUuid);
          boolean _status = mRemote.transact(Stub.TRANSACTION_movePrimaryStorage, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean setInstallLocation(int loc) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(loc);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setInstallLocation, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int getInstallLocation() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstallLocation, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int installExistingPackageAsUser(java.lang.String packageName, int userId, int installFlags, int installReason, java.util.List<java.lang.String> whiteListedPermissions) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          _data.writeInt(installFlags);
          _data.writeInt(installReason);
          _data.writeStringList(whiteListedPermissions);
          boolean _status = mRemote.transact(Stub.TRANSACTION_installExistingPackageAsUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void verifyPendingInstall(int id, int verificationCode) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(id);
          _data.writeInt(verificationCode);
          boolean _status = mRemote.transact(Stub.TRANSACTION_verifyPendingInstall, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(id);
          _data.writeInt(verificationCodeAtTimeout);
          _data.writeLong(millisecondsToDelay);
          boolean _status = mRemote.transact(Stub.TRANSACTION_extendVerificationTimeout, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /** @deprecated */
      @Override public void verifyIntentFilter(int id, int verificationCode, java.util.List<java.lang.String> failedDomains) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(id);
          _data.writeInt(verificationCode);
          _data.writeStringList(failedDomains);
          boolean _status = mRemote.transact(Stub.TRANSACTION_verifyIntentFilter, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      /** @deprecated */
      @Override public int getIntentVerificationStatus(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getIntentVerificationStatus, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /** @deprecated */
      @Override public boolean updateIntentVerificationStatus(java.lang.String packageName, int status, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(status);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_updateIntentVerificationStatus, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /** @deprecated */
      @Override public android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getIntentFilterVerifications, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getAllIntentFilters, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.VerifierDeviceIdentity _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getVerifierDeviceIdentity, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.VerifierDeviceIdentity.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isFirstBoot() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isFirstBoot, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isOnlyCoreApps() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isOnlyCoreApps, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isDeviceUpgrading() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isDeviceUpgrading, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /** Reflects current DeviceStorageMonitorService state */
      @Override public boolean isStorageLow() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isStorageLow, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean setApplicationHiddenSettingAsUser(java.lang.String packageName, boolean hidden, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeBoolean(hidden);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setApplicationHiddenSettingAsUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean getApplicationHiddenSettingAsUser(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getApplicationHiddenSettingAsUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void setSystemAppHiddenUntilInstalled(java.lang.String packageName, boolean hidden) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeBoolean(hidden);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setSystemAppHiddenUntilInstalled, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public boolean setSystemAppInstallState(java.lang.String packageName, boolean installed, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeBoolean(installed);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setSystemAppInstallState, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.IPackageInstaller getPackageInstaller() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.IPackageInstaller _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPackageInstaller, _data, _reply, 0);
          _reply.readException();
          _result = android.content.pm.IPackageInstaller.Stub.asInterface(_reply.readStrongBinder());
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean setBlockUninstallForUser(java.lang.String packageName, boolean blockUninstall, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeBoolean(blockUninstall);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setBlockUninstallForUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean getBlockUninstallForUser(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getBlockUninstallForUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.KeySet getKeySetByAlias(java.lang.String packageName, java.lang.String alias) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.KeySet _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeString(alias);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getKeySetByAlias, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.KeySet.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.KeySet getSigningKeySet(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.KeySet _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSigningKeySet, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.KeySet.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isPackageSignedByKeySet(java.lang.String packageName, android.content.pm.KeySet ks) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeTypedObject(ks, 0);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isPackageSignedByKeySet, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isPackageSignedByKeySetExactly(java.lang.String packageName, android.content.pm.KeySet ks) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeTypedObject(ks, 0);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isPackageSignedByKeySetExactly, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getPermissionControllerPackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPermissionControllerPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getSdkSandboxPackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSdkSandboxPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice getInstantApps(int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstantApps, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public byte[] getInstantAppCookie(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        byte[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstantAppCookie, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createByteArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean setInstantAppCookie(java.lang.String packageName, byte[] cookie, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeByteArray(cookie);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setInstantAppCookie, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.graphics.Bitmap getInstantAppIcon(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.graphics.Bitmap _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstantAppIcon, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.graphics.Bitmap.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isInstantApp(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isInstantApp, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean setRequiredForSystemUser(java.lang.String packageName, boolean systemUserApp) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeBoolean(systemUserApp);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setRequiredForSystemUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      /**
       * Sets whether or not an update is available. Ostensibly for instant apps
       * to force exteranl resolution.
       */
      @Override public void setUpdateAvailable(java.lang.String packageName, boolean updateAvaialble) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeBoolean(updateAvaialble);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setUpdateAvailable, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public java.lang.String getServicesSystemSharedLibraryPackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getServicesSystemSharedLibraryPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getSharedSystemSharedLibraryPackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSharedSystemSharedLibraryPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ChangedPackages getChangedPackages(int sequenceNumber, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ChangedPackages _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(sequenceNumber);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getChangedPackages, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ChangedPackages.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isPackageDeviceAdminOnAnyUser(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isPackageDeviceAdminOnAnyUser, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int getInstallReason(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstallReason, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSharedLibraries, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeLong(flags);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getDeclaredSharedLibraries, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean canRequestPackageInstalls(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_canRequestPackageInstalls, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void deletePreloadsFileCache() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_deletePreloadsFileCache, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public android.content.ComponentName getInstantAppResolverComponent() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.ComponentName _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstantAppResolverComponent, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.ComponentName.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.ComponentName getInstantAppResolverSettingsComponent() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.ComponentName _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstantAppResolverSettingsComponent, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.ComponentName.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.ComponentName getInstantAppInstallerComponent() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.ComponentName _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstantAppInstallerComponent, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.ComponentName.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getInstantAppAndroidId(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstantAppAndroidId, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.dex.IArtManager getArtManager() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.dex.IArtManager _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getArtManager, _data, _reply, 0);
          _reply.readException();
          _result = android.content.pm.dex.IArtManager.Stub.asInterface(_reply.readStrongBinder());
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void setHarmfulAppWarning(java.lang.String packageName, java.lang.CharSequence warning, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          if (warning!=null) {
            _data.writeInt(1);
            android.text.TextUtils.writeToParcel(warning, _data, 0);
          }
          else {
            _data.writeInt(0);
          }
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setHarmfulAppWarning, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public java.lang.CharSequence getHarmfulAppWarning(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.CharSequence _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getHarmfulAppWarning, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.text.TextUtils.CHAR_SEQUENCE_CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean hasSigningCertificate(java.lang.String packageName, byte[] signingCertificate, int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeByteArray(signingCertificate);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_hasSigningCertificate, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean hasUidSigningCertificate(int uid, byte[] signingCertificate, int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(uid);
          _data.writeByteArray(signingCertificate);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_hasUidSigningCertificate, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getDefaultTextClassifierPackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getDefaultTextClassifierPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getSystemTextClassifierPackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSystemTextClassifierPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getAttentionServicePackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getAttentionServicePackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getRotationResolverPackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getRotationResolverPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getWellbeingPackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getWellbeingPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getAppPredictionServicePackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getAppPredictionServicePackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getSystemCaptionsServicePackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSystemCaptionsServicePackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getSetupWizardPackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSetupWizardPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getIncidentReportApproverPackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getIncidentReportApproverPackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public java.lang.String getContentCaptureServicePackageName() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getContentCaptureServicePackageName, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isPackageStateProtected(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isPackageStateProtected, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void sendDeviceCustomizationReadyBroadcast() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_sendDeviceCustomizationReadyBroadcast, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public java.util.List<android.content.pm.ModuleInfo> getInstalledModules(int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.util.List<android.content.pm.ModuleInfo> _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getInstalledModules, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createTypedArrayList(android.content.pm.ModuleInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ModuleInfo getModuleInfo(java.lang.String packageName, int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ModuleInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getModuleInfo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ModuleInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public int getRuntimePermissionsVersion(int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getRuntimePermissionsVersion, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void setRuntimePermissionsVersion(int version, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(version);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setRuntimePermissionsVersion, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void notifyPackagesReplacedReceived(java.lang.String[] packages) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStringArray(packages);
          boolean _status = mRemote.transact(Stub.TRANSACTION_notifyPackagesReplacedReceived, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void requestPackageChecksums(java.lang.String packageName, boolean includeSplits, int optional, int required, java.util.List trustedInstallers, android.content.pm.IOnChecksumsReadyListener onChecksumsReadyListener, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeBoolean(includeSplits);
          _data.writeInt(optional);
          _data.writeInt(required);
          _data.writeList(trustedInstallers);
          _data.writeStrongInterface(onChecksumsReadyListener);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_requestPackageChecksums, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String packageName, java.lang.String callingPackage, java.lang.String featureId, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.IntentSender _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeString(callingPackage);
          _data.writeString(featureId);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getLaunchIntentSenderForPackage, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.IntentSender.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      //------------------------------------------------------------------------
      //
      // The following binder interfaces have been moved to IPermissionManager
      //
      //------------------------------------------------------------------------
      //------------------------------------------------------------------------
      // We need to keep these in IPackageManager for app compatibility
      //------------------------------------------------------------------------
      @Override public java.lang.String[] getAppOpPermissionPackages(java.lang.String permissionName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String[] _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(permissionName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getAppOpPermissionPackages, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArray();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String name, int flags) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.PermissionGroupInfo _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(name);
          _data.writeInt(flags);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getPermissionGroupInfo, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.PermissionGroupInfo.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean addPermission(android.content.pm.PermissionInfo info) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(info, 0);
          boolean _status = mRemote.transact(Stub.TRANSACTION_addPermission, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean addPermissionAsync(android.content.pm.PermissionInfo info) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeTypedObject(info, 0);
          boolean _status = mRemote.transact(Stub.TRANSACTION_addPermissionAsync, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void removePermission(java.lang.String name) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(name);
          boolean _status = mRemote.transact(Stub.TRANSACTION_removePermission, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public int checkPermission(java.lang.String permName, java.lang.String pkgName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(permName);
          _data.writeString(pkgName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_checkPermission, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void grantRuntimePermission(java.lang.String packageName, java.lang.String permissionName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeString(permissionName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_grantRuntimePermission, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      //------------------------------------------------------------------------
      // We need to keep these in IPackageManager for convenience in splitting
      // out the permission manager. This should be cleaned up, but, will require
      // a large change that modifies many repos.
      //------------------------------------------------------------------------
      @Override public int checkUidPermission(java.lang.String permName, int uid) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        int _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(permName);
          _data.writeInt(uid);
          boolean _status = mRemote.transact(Stub.TRANSACTION_checkUidPermission, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readInt();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void setMimeGroup(java.lang.String packageName, java.lang.String group, java.util.List<java.lang.String> mimeTypes) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeString(group);
          _data.writeStringList(mimeTypes);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setMimeGroup, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public java.lang.String getSplashScreenTheme(java.lang.String packageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.lang.String _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getSplashScreenTheme, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readString();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void setSplashScreenTheme(java.lang.String packageName, java.lang.String themeName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeString(themeName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setSplashScreenTheme, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public java.util.List<java.lang.String> getMimeGroup(java.lang.String packageName, java.lang.String group) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        java.util.List<java.lang.String> _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          _data.writeString(group);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getMimeGroup, _data, _reply, 0);
          _reply.readException();
          _result = _reply.createStringArrayList();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public boolean isAutoRevokeWhitelisted(java.lang.String packageName) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(packageName);
          boolean _status = mRemote.transact(Stub.TRANSACTION_isAutoRevokeWhitelisted, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void makeProviderVisible(int recipientAppId, java.lang.String visibleAuthority) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(recipientAppId);
          _data.writeString(visibleAuthority);
          boolean _status = mRemote.transact(Stub.TRANSACTION_makeProviderVisible, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public void makeUidVisible(int recipientAppId, int visibleUid) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeInt(recipientAppId);
          _data.writeInt(visibleUid);
          boolean _status = mRemote.transact(Stub.TRANSACTION_makeUidVisible, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public android.os.IBinder getHoldLockToken() throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.os.IBinder _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getHoldLockToken, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readStrongBinder();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void holdLock(android.os.IBinder token, int durationMs) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStrongBinder(token);
          _data.writeInt(durationMs);
          boolean _status = mRemote.transact(Stub.TRANSACTION_holdLock, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public android.content.pm.PackageManager.Property getProperty(java.lang.String propertyName, java.lang.String packageName, java.lang.String className) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.PackageManager.Property _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(propertyName);
          _data.writeString(packageName);
          _data.writeString(className);
          boolean _status = mRemote.transact(Stub.TRANSACTION_getProperty, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.PackageManager.Property.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public android.content.pm.ParceledListSlice queryProperty(java.lang.String propertyName, int componentType) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        android.content.pm.ParceledListSlice _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(propertyName);
          _data.writeInt(componentType);
          boolean _status = mRemote.transact(Stub.TRANSACTION_queryProperty, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
      @Override public void setKeepUninstalledPackages(java.util.List<java.lang.String> packageList) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeStringList(packageList);
          boolean _status = mRemote.transact(Stub.TRANSACTION_setKeepUninstalledPackages, _data, _reply, 0);
          _reply.readException();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
      }
      @Override public boolean canPackageQuery(java.lang.String sourcePackageName, java.lang.String targetPackageName, int userId) throws android.os.RemoteException
      {
        android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
        android.os.Parcel _reply = android.os.Parcel.obtain();
        boolean _result;
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(sourcePackageName);
          _data.writeString(targetPackageName);
          _data.writeInt(userId);
          boolean _status = mRemote.transact(Stub.TRANSACTION_canPackageQuery, _data, _reply, 0);
          _reply.readException();
          _result = _reply.readBoolean();
        }
        finally {
          _reply.recycle();
          _data.recycle();
        }
        return _result;
      }
    }
    public static final java.lang.String DESCRIPTOR = "android.content.pm.IPackageManager";
    static final int TRANSACTION_checkPackageStartable = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);
    static final int TRANSACTION_isPackageAvailable = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);
    static final int TRANSACTION_getPackageInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);
    static final int TRANSACTION_getPackageInfoVersioned = (android.os.IBinder.FIRST_CALL_TRANSACTION + 3);
    static final int TRANSACTION_getPackageUid = (android.os.IBinder.FIRST_CALL_TRANSACTION + 4);
    static final int TRANSACTION_getPackageGids = (android.os.IBinder.FIRST_CALL_TRANSACTION + 5);
    static final int TRANSACTION_currentToCanonicalPackageNames = (android.os.IBinder.FIRST_CALL_TRANSACTION + 6);
    static final int TRANSACTION_canonicalToCurrentPackageNames = (android.os.IBinder.FIRST_CALL_TRANSACTION + 7);
    static final int TRANSACTION_getApplicationInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 8);
    static final int TRANSACTION_getTargetSdkVersion = (android.os.IBinder.FIRST_CALL_TRANSACTION + 9);
    static final int TRANSACTION_getActivityInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 10);
    static final int TRANSACTION_activitySupportsIntent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 11);
    static final int TRANSACTION_getReceiverInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 12);
    static final int TRANSACTION_getServiceInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 13);
    static final int TRANSACTION_getProviderInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 14);
    static final int TRANSACTION_isProtectedBroadcast = (android.os.IBinder.FIRST_CALL_TRANSACTION + 15);
    static final int TRANSACTION_checkSignatures = (android.os.IBinder.FIRST_CALL_TRANSACTION + 16);
    static final int TRANSACTION_checkUidSignatures = (android.os.IBinder.FIRST_CALL_TRANSACTION + 17);
    static final int TRANSACTION_getAllPackages = (android.os.IBinder.FIRST_CALL_TRANSACTION + 18);
    static final int TRANSACTION_getPackagesForUid = (android.os.IBinder.FIRST_CALL_TRANSACTION + 19);
    static final int TRANSACTION_getNameForUid = (android.os.IBinder.FIRST_CALL_TRANSACTION + 20);
    static final int TRANSACTION_getNamesForUids = (android.os.IBinder.FIRST_CALL_TRANSACTION + 21);
    static final int TRANSACTION_getUidForSharedUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 22);
    static final int TRANSACTION_getFlagsForUid = (android.os.IBinder.FIRST_CALL_TRANSACTION + 23);
    static final int TRANSACTION_getPrivateFlagsForUid = (android.os.IBinder.FIRST_CALL_TRANSACTION + 24);
    static final int TRANSACTION_isUidPrivileged = (android.os.IBinder.FIRST_CALL_TRANSACTION + 25);
    static final int TRANSACTION_resolveIntent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 26);
    static final int TRANSACTION_findPersistentPreferredActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 27);
    static final int TRANSACTION_canForwardTo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 28);
    static final int TRANSACTION_queryIntentActivities = (android.os.IBinder.FIRST_CALL_TRANSACTION + 29);
    static final int TRANSACTION_queryIntentActivityOptions = (android.os.IBinder.FIRST_CALL_TRANSACTION + 30);
    static final int TRANSACTION_queryIntentReceivers = (android.os.IBinder.FIRST_CALL_TRANSACTION + 31);
    static final int TRANSACTION_resolveService = (android.os.IBinder.FIRST_CALL_TRANSACTION + 32);
    static final int TRANSACTION_queryIntentServices = (android.os.IBinder.FIRST_CALL_TRANSACTION + 33);
    static final int TRANSACTION_queryIntentContentProviders = (android.os.IBinder.FIRST_CALL_TRANSACTION + 34);
    static final int TRANSACTION_getInstalledPackages = (android.os.IBinder.FIRST_CALL_TRANSACTION + 35);
    static final int TRANSACTION_getPackagesHoldingPermissions = (android.os.IBinder.FIRST_CALL_TRANSACTION + 36);
    static final int TRANSACTION_getInstalledApplications = (android.os.IBinder.FIRST_CALL_TRANSACTION + 37);
    static final int TRANSACTION_getPersistentApplications = (android.os.IBinder.FIRST_CALL_TRANSACTION + 38);
    static final int TRANSACTION_resolveContentProvider = (android.os.IBinder.FIRST_CALL_TRANSACTION + 39);
    static final int TRANSACTION_querySyncProviders = (android.os.IBinder.FIRST_CALL_TRANSACTION + 40);
    static final int TRANSACTION_queryContentProviders = (android.os.IBinder.FIRST_CALL_TRANSACTION + 41);
    static final int TRANSACTION_getInstrumentationInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 42);
    static final int TRANSACTION_queryInstrumentation = (android.os.IBinder.FIRST_CALL_TRANSACTION + 43);
    static final int TRANSACTION_finishPackageInstall = (android.os.IBinder.FIRST_CALL_TRANSACTION + 44);
    static final int TRANSACTION_setInstallerPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 45);
    static final int TRANSACTION_setApplicationCategoryHint = (android.os.IBinder.FIRST_CALL_TRANSACTION + 46);
    static final int TRANSACTION_deletePackageAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 47);
    static final int TRANSACTION_deletePackageVersioned = (android.os.IBinder.FIRST_CALL_TRANSACTION + 48);
    static final int TRANSACTION_deleteExistingPackageAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 49);
    static final int TRANSACTION_getInstallerPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 50);
    static final int TRANSACTION_getInstallSourceInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 51);
    static final int TRANSACTION_resetApplicationPreferences = (android.os.IBinder.FIRST_CALL_TRANSACTION + 52);
    static final int TRANSACTION_getLastChosenActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 53);
    static final int TRANSACTION_setLastChosenActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 54);
    static final int TRANSACTION_addPreferredActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 55);
    static final int TRANSACTION_replacePreferredActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 56);
    static final int TRANSACTION_clearPackagePreferredActivities = (android.os.IBinder.FIRST_CALL_TRANSACTION + 57);
    static final int TRANSACTION_getPreferredActivities = (android.os.IBinder.FIRST_CALL_TRANSACTION + 58);
    static final int TRANSACTION_addPersistentPreferredActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 59);
    static final int TRANSACTION_clearPackagePersistentPreferredActivities = (android.os.IBinder.FIRST_CALL_TRANSACTION + 60);
    static final int TRANSACTION_addCrossProfileIntentFilter = (android.os.IBinder.FIRST_CALL_TRANSACTION + 61);
    static final int TRANSACTION_clearCrossProfileIntentFilters = (android.os.IBinder.FIRST_CALL_TRANSACTION + 62);
    static final int TRANSACTION_setDistractingPackageRestrictionsAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 63);
    static final int TRANSACTION_setPackagesSuspendedAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 64);
    static final int TRANSACTION_getUnsuspendablePackagesForUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 65);
    static final int TRANSACTION_isPackageSuspendedForUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 66);
    static final int TRANSACTION_getSuspendedPackageAppExtras = (android.os.IBinder.FIRST_CALL_TRANSACTION + 67);
    static final int TRANSACTION_getPreferredActivityBackup = (android.os.IBinder.FIRST_CALL_TRANSACTION + 68);
    static final int TRANSACTION_restorePreferredActivities = (android.os.IBinder.FIRST_CALL_TRANSACTION + 69);
    static final int TRANSACTION_getDefaultAppsBackup = (android.os.IBinder.FIRST_CALL_TRANSACTION + 70);
    static final int TRANSACTION_restoreDefaultApps = (android.os.IBinder.FIRST_CALL_TRANSACTION + 71);
    static final int TRANSACTION_getDomainVerificationBackup = (android.os.IBinder.FIRST_CALL_TRANSACTION + 72);
    static final int TRANSACTION_restoreDomainVerification = (android.os.IBinder.FIRST_CALL_TRANSACTION + 73);
    static final int TRANSACTION_getHomeActivities = (android.os.IBinder.FIRST_CALL_TRANSACTION + 74);
    static final int TRANSACTION_setHomeActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 75);
    static final int TRANSACTION_overrideLabelAndIcon = (android.os.IBinder.FIRST_CALL_TRANSACTION + 76);
    static final int TRANSACTION_restoreLabelAndIcon = (android.os.IBinder.FIRST_CALL_TRANSACTION + 77);
    static final int TRANSACTION_setComponentEnabledSetting = (android.os.IBinder.FIRST_CALL_TRANSACTION + 78);
    static final int TRANSACTION_setComponentEnabledSettings = (android.os.IBinder.FIRST_CALL_TRANSACTION + 79);
    static final int TRANSACTION_getComponentEnabledSetting = (android.os.IBinder.FIRST_CALL_TRANSACTION + 80);
    static final int TRANSACTION_setApplicationEnabledSetting = (android.os.IBinder.FIRST_CALL_TRANSACTION + 81);
    static final int TRANSACTION_getApplicationEnabledSetting = (android.os.IBinder.FIRST_CALL_TRANSACTION + 82);
    static final int TRANSACTION_logAppProcessStartIfNeeded = (android.os.IBinder.FIRST_CALL_TRANSACTION + 83);
    static final int TRANSACTION_flushPackageRestrictionsAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 84);
    static final int TRANSACTION_setPackageStoppedState = (android.os.IBinder.FIRST_CALL_TRANSACTION + 85);
    static final int TRANSACTION_freeStorageAndNotify = (android.os.IBinder.FIRST_CALL_TRANSACTION + 86);
    static final int TRANSACTION_freeStorage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 87);
    static final int TRANSACTION_deleteApplicationCacheFiles = (android.os.IBinder.FIRST_CALL_TRANSACTION + 88);
    static final int TRANSACTION_deleteApplicationCacheFilesAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 89);
    static final int TRANSACTION_clearApplicationUserData = (android.os.IBinder.FIRST_CALL_TRANSACTION + 90);
    static final int TRANSACTION_clearApplicationProfileData = (android.os.IBinder.FIRST_CALL_TRANSACTION + 91);
    static final int TRANSACTION_getPackageSizeInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 92);
    static final int TRANSACTION_getSystemSharedLibraryNames = (android.os.IBinder.FIRST_CALL_TRANSACTION + 93);
    static final int TRANSACTION_getSystemAvailableFeatures = (android.os.IBinder.FIRST_CALL_TRANSACTION + 94);
    static final int TRANSACTION_hasSystemFeature = (android.os.IBinder.FIRST_CALL_TRANSACTION + 95);
    static final int TRANSACTION_enterSafeMode = (android.os.IBinder.FIRST_CALL_TRANSACTION + 96);
    static final int TRANSACTION_isSafeMode = (android.os.IBinder.FIRST_CALL_TRANSACTION + 97);
    static final int TRANSACTION_hasSystemUidErrors = (android.os.IBinder.FIRST_CALL_TRANSACTION + 98);
    static final int TRANSACTION_notifyPackageUse = (android.os.IBinder.FIRST_CALL_TRANSACTION + 99);
    static final int TRANSACTION_notifyDexLoad = (android.os.IBinder.FIRST_CALL_TRANSACTION + 100);
    static final int TRANSACTION_registerDexModule = (android.os.IBinder.FIRST_CALL_TRANSACTION + 101);
    static final int TRANSACTION_performDexOptMode = (android.os.IBinder.FIRST_CALL_TRANSACTION + 102);
    static final int TRANSACTION_performDexOptSecondary = (android.os.IBinder.FIRST_CALL_TRANSACTION + 103);
    static final int TRANSACTION_dumpProfiles = (android.os.IBinder.FIRST_CALL_TRANSACTION + 104);
    static final int TRANSACTION_forceDexOpt = (android.os.IBinder.FIRST_CALL_TRANSACTION + 105);
    static final int TRANSACTION_reconcileSecondaryDexFiles = (android.os.IBinder.FIRST_CALL_TRANSACTION + 106);
    static final int TRANSACTION_getMoveStatus = (android.os.IBinder.FIRST_CALL_TRANSACTION + 107);
    static final int TRANSACTION_registerMoveCallback = (android.os.IBinder.FIRST_CALL_TRANSACTION + 108);
    static final int TRANSACTION_unregisterMoveCallback = (android.os.IBinder.FIRST_CALL_TRANSACTION + 109);
    static final int TRANSACTION_movePackage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 110);
    static final int TRANSACTION_movePrimaryStorage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 111);
    static final int TRANSACTION_setInstallLocation = (android.os.IBinder.FIRST_CALL_TRANSACTION + 112);
    static final int TRANSACTION_getInstallLocation = (android.os.IBinder.FIRST_CALL_TRANSACTION + 113);
    static final int TRANSACTION_installExistingPackageAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 114);
    static final int TRANSACTION_verifyPendingInstall = (android.os.IBinder.FIRST_CALL_TRANSACTION + 115);
    static final int TRANSACTION_extendVerificationTimeout = (android.os.IBinder.FIRST_CALL_TRANSACTION + 116);
    static final int TRANSACTION_verifyIntentFilter = (android.os.IBinder.FIRST_CALL_TRANSACTION + 117);
    static final int TRANSACTION_getIntentVerificationStatus = (android.os.IBinder.FIRST_CALL_TRANSACTION + 118);
    static final int TRANSACTION_updateIntentVerificationStatus = (android.os.IBinder.FIRST_CALL_TRANSACTION + 119);
    static final int TRANSACTION_getIntentFilterVerifications = (android.os.IBinder.FIRST_CALL_TRANSACTION + 120);
    static final int TRANSACTION_getAllIntentFilters = (android.os.IBinder.FIRST_CALL_TRANSACTION + 121);
    static final int TRANSACTION_getVerifierDeviceIdentity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 122);
    static final int TRANSACTION_isFirstBoot = (android.os.IBinder.FIRST_CALL_TRANSACTION + 123);
    static final int TRANSACTION_isOnlyCoreApps = (android.os.IBinder.FIRST_CALL_TRANSACTION + 124);
    static final int TRANSACTION_isDeviceUpgrading = (android.os.IBinder.FIRST_CALL_TRANSACTION + 125);
    static final int TRANSACTION_isStorageLow = (android.os.IBinder.FIRST_CALL_TRANSACTION + 126);
    static final int TRANSACTION_setApplicationHiddenSettingAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 127);
    static final int TRANSACTION_getApplicationHiddenSettingAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 128);
    static final int TRANSACTION_setSystemAppHiddenUntilInstalled = (android.os.IBinder.FIRST_CALL_TRANSACTION + 129);
    static final int TRANSACTION_setSystemAppInstallState = (android.os.IBinder.FIRST_CALL_TRANSACTION + 130);
    static final int TRANSACTION_getPackageInstaller = (android.os.IBinder.FIRST_CALL_TRANSACTION + 131);
    static final int TRANSACTION_setBlockUninstallForUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 132);
    static final int TRANSACTION_getBlockUninstallForUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 133);
    static final int TRANSACTION_getKeySetByAlias = (android.os.IBinder.FIRST_CALL_TRANSACTION + 134);
    static final int TRANSACTION_getSigningKeySet = (android.os.IBinder.FIRST_CALL_TRANSACTION + 135);
    static final int TRANSACTION_isPackageSignedByKeySet = (android.os.IBinder.FIRST_CALL_TRANSACTION + 136);
    static final int TRANSACTION_isPackageSignedByKeySetExactly = (android.os.IBinder.FIRST_CALL_TRANSACTION + 137);
    static final int TRANSACTION_getPermissionControllerPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 138);
    static final int TRANSACTION_getSdkSandboxPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 139);
    static final int TRANSACTION_getInstantApps = (android.os.IBinder.FIRST_CALL_TRANSACTION + 140);
    static final int TRANSACTION_getInstantAppCookie = (android.os.IBinder.FIRST_CALL_TRANSACTION + 141);
    static final int TRANSACTION_setInstantAppCookie = (android.os.IBinder.FIRST_CALL_TRANSACTION + 142);
    static final int TRANSACTION_getInstantAppIcon = (android.os.IBinder.FIRST_CALL_TRANSACTION + 143);
    static final int TRANSACTION_isInstantApp = (android.os.IBinder.FIRST_CALL_TRANSACTION + 144);
    static final int TRANSACTION_setRequiredForSystemUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 145);
    static final int TRANSACTION_setUpdateAvailable = (android.os.IBinder.FIRST_CALL_TRANSACTION + 146);
    static final int TRANSACTION_getServicesSystemSharedLibraryPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 147);
    static final int TRANSACTION_getSharedSystemSharedLibraryPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 148);
    static final int TRANSACTION_getChangedPackages = (android.os.IBinder.FIRST_CALL_TRANSACTION + 149);
    static final int TRANSACTION_isPackageDeviceAdminOnAnyUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 150);
    static final int TRANSACTION_getInstallReason = (android.os.IBinder.FIRST_CALL_TRANSACTION + 151);
    static final int TRANSACTION_getSharedLibraries = (android.os.IBinder.FIRST_CALL_TRANSACTION + 152);
    static final int TRANSACTION_getDeclaredSharedLibraries = (android.os.IBinder.FIRST_CALL_TRANSACTION + 153);
    static final int TRANSACTION_canRequestPackageInstalls = (android.os.IBinder.FIRST_CALL_TRANSACTION + 154);
    static final int TRANSACTION_deletePreloadsFileCache = (android.os.IBinder.FIRST_CALL_TRANSACTION + 155);
    static final int TRANSACTION_getInstantAppResolverComponent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 156);
    static final int TRANSACTION_getInstantAppResolverSettingsComponent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 157);
    static final int TRANSACTION_getInstantAppInstallerComponent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 158);
    static final int TRANSACTION_getInstantAppAndroidId = (android.os.IBinder.FIRST_CALL_TRANSACTION + 159);
    static final int TRANSACTION_getArtManager = (android.os.IBinder.FIRST_CALL_TRANSACTION + 160);
    static final int TRANSACTION_setHarmfulAppWarning = (android.os.IBinder.FIRST_CALL_TRANSACTION + 161);
    static final int TRANSACTION_getHarmfulAppWarning = (android.os.IBinder.FIRST_CALL_TRANSACTION + 162);
    static final int TRANSACTION_hasSigningCertificate = (android.os.IBinder.FIRST_CALL_TRANSACTION + 163);
    static final int TRANSACTION_hasUidSigningCertificate = (android.os.IBinder.FIRST_CALL_TRANSACTION + 164);
    static final int TRANSACTION_getDefaultTextClassifierPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 165);
    static final int TRANSACTION_getSystemTextClassifierPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 166);
    static final int TRANSACTION_getAttentionServicePackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 167);
    static final int TRANSACTION_getRotationResolverPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 168);
    static final int TRANSACTION_getWellbeingPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 169);
    static final int TRANSACTION_getAppPredictionServicePackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 170);
    static final int TRANSACTION_getSystemCaptionsServicePackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 171);
    static final int TRANSACTION_getSetupWizardPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 172);
    static final int TRANSACTION_getIncidentReportApproverPackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 173);
    static final int TRANSACTION_getContentCaptureServicePackageName = (android.os.IBinder.FIRST_CALL_TRANSACTION + 174);
    static final int TRANSACTION_isPackageStateProtected = (android.os.IBinder.FIRST_CALL_TRANSACTION + 175);
    static final int TRANSACTION_sendDeviceCustomizationReadyBroadcast = (android.os.IBinder.FIRST_CALL_TRANSACTION + 176);
    static final int TRANSACTION_getInstalledModules = (android.os.IBinder.FIRST_CALL_TRANSACTION + 177);
    static final int TRANSACTION_getModuleInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 178);
    static final int TRANSACTION_getRuntimePermissionsVersion = (android.os.IBinder.FIRST_CALL_TRANSACTION + 179);
    static final int TRANSACTION_setRuntimePermissionsVersion = (android.os.IBinder.FIRST_CALL_TRANSACTION + 180);
    static final int TRANSACTION_notifyPackagesReplacedReceived = (android.os.IBinder.FIRST_CALL_TRANSACTION + 181);
    static final int TRANSACTION_requestPackageChecksums = (android.os.IBinder.FIRST_CALL_TRANSACTION + 182);
    static final int TRANSACTION_getLaunchIntentSenderForPackage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 183);
    static final int TRANSACTION_getAppOpPermissionPackages = (android.os.IBinder.FIRST_CALL_TRANSACTION + 184);
    static final int TRANSACTION_getPermissionGroupInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 185);
    static final int TRANSACTION_addPermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 186);
    static final int TRANSACTION_addPermissionAsync = (android.os.IBinder.FIRST_CALL_TRANSACTION + 187);
    static final int TRANSACTION_removePermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 188);
    static final int TRANSACTION_checkPermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 189);
    static final int TRANSACTION_grantRuntimePermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 190);
    static final int TRANSACTION_checkUidPermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 191);
    static final int TRANSACTION_setMimeGroup = (android.os.IBinder.FIRST_CALL_TRANSACTION + 192);
    static final int TRANSACTION_getSplashScreenTheme = (android.os.IBinder.FIRST_CALL_TRANSACTION + 193);
    static final int TRANSACTION_setSplashScreenTheme = (android.os.IBinder.FIRST_CALL_TRANSACTION + 194);
    static final int TRANSACTION_getMimeGroup = (android.os.IBinder.FIRST_CALL_TRANSACTION + 195);
    static final int TRANSACTION_isAutoRevokeWhitelisted = (android.os.IBinder.FIRST_CALL_TRANSACTION + 196);
    static final int TRANSACTION_makeProviderVisible = (android.os.IBinder.FIRST_CALL_TRANSACTION + 197);
    static final int TRANSACTION_makeUidVisible = (android.os.IBinder.FIRST_CALL_TRANSACTION + 198);
    static final int TRANSACTION_getHoldLockToken = (android.os.IBinder.FIRST_CALL_TRANSACTION + 199);
    static final int TRANSACTION_holdLock = (android.os.IBinder.FIRST_CALL_TRANSACTION + 200);
    static final int TRANSACTION_getProperty = (android.os.IBinder.FIRST_CALL_TRANSACTION + 201);
    static final int TRANSACTION_queryProperty = (android.os.IBinder.FIRST_CALL_TRANSACTION + 202);
    static final int TRANSACTION_setKeepUninstalledPackages = (android.os.IBinder.FIRST_CALL_TRANSACTION + 203);
    static final int TRANSACTION_canPackageQuery = (android.os.IBinder.FIRST_CALL_TRANSACTION + 204);
    /** @hide */
    public int getMaxTransactionId()
    {
      return 204;
    }
  }
  public void checkPackageStartable(java.lang.String packageName, int userId) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(trackingBug = 171933273L, overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:70:1:70:50")
  public boolean isPackageAvailable(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public android.content.pm.PackageInfo getPackageInfo(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException;
  public android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage versionedPackage, long flags, int userId) throws android.os.RemoteException;
  public int getPackageUid(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException;
  public int[] getPackageGids(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:78:1:78:25")
  public java.lang.String[] currentToCanonicalPackageNames(java.lang.String[] names) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:80:1:80:25")
  public java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[] names) throws android.os.RemoteException;
  public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException;
  /** @return the target SDK for the given package name, or -1 if it cannot be retrieved */
  public int getTargetSdkVersion(java.lang.String packageName) throws android.os.RemoteException;
  public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException;
  public boolean activitySupportsIntent(android.content.ComponentName className, android.content.Intent intent, java.lang.String resolvedType) throws android.os.RemoteException;
  public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException;
  public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException;
  public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName className, long flags, int userId) throws android.os.RemoteException;
  public boolean isProtectedBroadcast(java.lang.String actionName) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:103:1:103:25")
  public int checkSignatures(java.lang.String pkg1, java.lang.String pkg2) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:106:1:106:25")
  public int checkUidSignatures(int uid1, int uid2) throws android.os.RemoteException;
  public java.util.List<java.lang.String> getAllPackages() throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:111:1:111:25")
  public java.lang.String[] getPackagesForUid(int uid) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:114:1:114:25")
  public java.lang.String getNameForUid(int uid) throws android.os.RemoteException;
  public java.lang.String[] getNamesForUids(int[] uids) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:118:1:118:25")
  public int getUidForSharedUser(java.lang.String sharedUserName) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:121:1:121:25")
  public int getFlagsForUid(int uid) throws android.os.RemoteException;
  public int getPrivateFlagsForUid(int uid) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:126:1:126:25")
  public boolean isUidPrivileged(int uid) throws android.os.RemoteException;
  public android.content.pm.ResolveInfo resolveIntent(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException;
  public android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent intent, int userId) throws android.os.RemoteException;
  public boolean canForwardTo(android.content.Intent intent, java.lang.String resolvedType, int sourceUserId, int targetUserId) throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName caller, android.content.Intent[] specifics, java.lang.String[] specificTypes, android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException;
  public android.content.pm.ResolveInfo resolveService(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent intent, java.lang.String resolvedType, long flags, int userId) throws android.os.RemoteException;
  /**
   * This implements getInstalledPackages via a "last returned row"
   * mechanism that is not exposed in the API. This is to get around the IPC
   * limit that kicks in when flags are included that bloat up the data
   * returned.
   */
  public android.content.pm.ParceledListSlice getInstalledPackages(long flags, int userId) throws android.os.RemoteException;
  /**
   * This implements getPackagesHoldingPermissions via a "last returned row"
   * mechanism that is not exposed in the API. This is to get around the IPC
   * limit that kicks in when flags are included that bloat up the data
   * returned.
   */
  public android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[] permissions, long flags, int userId) throws android.os.RemoteException;
  /**
   * This implements getInstalledApplications via a "last returned row"
   * mechanism that is not exposed in the API. This is to get around the IPC
   * limit that kicks in when flags are included that bloat up the data
   * returned.
   */
  public android.content.pm.ParceledListSlice getInstalledApplications(long flags, int userId) throws android.os.RemoteException;
  /**
   * Retrieve all applications that are marked as persistent.
   *
   * @return A List<ApplicationInfo> containing one entry for each persistent
   *         application.
   */
  public android.content.pm.ParceledListSlice getPersistentApplications(int flags) throws android.os.RemoteException;
  public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String name, long flags, int userId) throws android.os.RemoteException;
  /**
   * Retrieve sync information for all content providers.
   *
   * @param outNames Filled in with a list of the root names of the content
   *                 providers that can sync.
   * @param outInfo Filled in with a list of the ProviderInfo for each
   *                name in 'outNames'.
   */
  @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk = 30, trackingBug = 170729553L, overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:198:1:198:69")
  public void querySyncProviders(java.util.List<java.lang.String> outNames, java.util.List<android.content.pm.ProviderInfo> outInfo) throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice queryContentProviders(java.lang.String processName, int uid, long flags, java.lang.String metaDataKey) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:205:1:205:25")
  public android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName className, int flags) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk = 30, trackingBug = 170729553L, overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:209:1:209:69")
  public android.content.pm.ParceledListSlice queryInstrumentation(java.lang.String targetPackage, int flags) throws android.os.RemoteException;
  public void finishPackageInstall(int token, boolean didLaunch) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:215:1:215:25")
  public void setInstallerPackageName(java.lang.String targetPackage, java.lang.String installerPackageName) throws android.os.RemoteException;
  public void setApplicationCategoryHint(java.lang.String packageName, int categoryHint, java.lang.String callerPackageName) throws android.os.RemoteException;
  /** @deprecated rawr, don't call AIDL methods directly! */
  @Deprecated
  public void deletePackageAsUser(java.lang.String packageName, int versionCode, android.content.pm.IPackageDeleteObserver observer, int userId, int flags) throws android.os.RemoteException;
  /**
   * Delete a package for a specific user.
   *
   * @param versionedPackage The package to delete.
   * @param observer a callback to use to notify when the package deletion in finished.
   * @param userId the id of the user for whom to delete the package
   * @param flags - possible values: {@link #DELETE_KEEP_DATA}
   */
  public void deletePackageVersioned(android.content.pm.VersionedPackage versionedPackage, android.content.pm.IPackageDeleteObserver2 observer, int userId, int flags) throws android.os.RemoteException;
  /**
   * Delete a package for a specific user.
   *
   * @param versionedPackage The package to delete.
   * @param observer a callback to use to notify when the package deletion in finished.
   * @param userId the id of the user for whom to delete the package
   */
  public void deleteExistingPackageAsUser(android.content.pm.VersionedPackage versionedPackage, android.content.pm.IPackageDeleteObserver2 observer, int userId) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:245:1:245:25")
  public java.lang.String getInstallerPackageName(java.lang.String packageName) throws android.os.RemoteException;
  public android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String packageName) throws android.os.RemoteException;
  public void resetApplicationPreferences(int userId) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:252:1:252:25")
  public android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent intent, java.lang.String resolvedType, int flags) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:256:1:256:25")
  public void setLastChosenActivity(android.content.Intent intent, java.lang.String resolvedType, int flags, android.content.IntentFilter filter, int match, android.content.ComponentName activity) throws android.os.RemoteException;
  public void addPreferredActivity(android.content.IntentFilter filter, int match, android.content.ComponentName[] set, android.content.ComponentName activity, int userId, boolean removeExisting) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:263:1:263:25")
  public void replacePreferredActivity(android.content.IntentFilter filter, int match, android.content.ComponentName[] set, android.content.ComponentName activity, int userId) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:267:1:267:25")
  public void clearPackagePreferredActivities(java.lang.String packageName) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:270:1:270:25")
  public int getPreferredActivities(java.util.List<android.content.IntentFilter> outFilters, java.util.List<android.content.ComponentName> outActivities, java.lang.String packageName) throws android.os.RemoteException;
  public void addPersistentPreferredActivity(android.content.IntentFilter filter, android.content.ComponentName activity, int userId) throws android.os.RemoteException;
  public void clearPackagePersistentPreferredActivities(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public void addCrossProfileIntentFilter(android.content.IntentFilter intentFilter, java.lang.String ownerPackage, int sourceUserId, int targetUserId, int flags) throws android.os.RemoteException;
  public void clearCrossProfileIntentFilters(int sourceUserId, java.lang.String ownerPackage) throws android.os.RemoteException;
  public java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[] packageNames, int restrictionFlags, int userId) throws android.os.RemoteException;
  public java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[] packageNames, boolean suspended, android.os.PersistableBundle appExtras, android.os.PersistableBundle launcherExtras, android.content.pm.SuspendDialogInfo dialogInfo, java.lang.String callingPackage, int userId) throws android.os.RemoteException;
  public java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[] packageNames, int userId) throws android.os.RemoteException;
  public boolean isPackageSuspendedForUser(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public android.os.Bundle getSuspendedPackageAppExtras(java.lang.String packageName, int userId) throws android.os.RemoteException;
  /** Backup/restore support - only the system uid may use these. */
  public byte[] getPreferredActivityBackup(int userId) throws android.os.RemoteException;
  public void restorePreferredActivities(byte[] backup, int userId) throws android.os.RemoteException;
  public byte[] getDefaultAppsBackup(int userId) throws android.os.RemoteException;
  public void restoreDefaultApps(byte[] backup, int userId) throws android.os.RemoteException;
  public byte[] getDomainVerificationBackup(int userId) throws android.os.RemoteException;
  public void restoreDomainVerification(byte[] backup, int userId) throws android.os.RemoteException;
  /**
   * Report the set of 'Home' activity candidates, plus (if any) which of them
   * is the current "always use this one" setting.
   */
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:310:1:310:26")
  public android.content.ComponentName getHomeActivities(java.util.List<android.content.pm.ResolveInfo> outHomeCandidates) throws android.os.RemoteException;
  public void setHomeActivity(android.content.ComponentName className, int userId) throws android.os.RemoteException;
  /**
   * Overrides the label and icon of the component specified by the component name. The component
   * must belong to the calling app.
   *
   * These changes will be reset on the next boot and whenever the package is updated.
   *
   * Only the app defined as com.android.internal.R.config_overrideComponentUiPackage is allowed
   * to call this.
   *
   * @param componentName The component name to override the label/icon of.
   * @param nonLocalizedLabel The label to be displayed.
   * @param icon The icon to be displayed.
   * @param userId The user id.
   */
  public void overrideLabelAndIcon(android.content.ComponentName componentName, java.lang.String nonLocalizedLabel, int icon, int userId) throws android.os.RemoteException;
  /**
   * Restores the label and icon of the activity specified by the component name if either has
   * been overridden. The component must belong to the calling app.
   *
   * Only the app defined as com.android.internal.R.config_overrideComponentUiPackage is allowed
   * to call this.
   *
   * @param componentName The component name.
   * @param userId The user id.
   */
  public void restoreLabelAndIcon(android.content.ComponentName componentName, int userId) throws android.os.RemoteException;
  /** As per {@link android.content.pm.PackageManager#setComponentEnabledSetting}. */
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:347:1:347:25")
  public void setComponentEnabledSetting(android.content.ComponentName componentName, int newState, int flags, int userId) throws android.os.RemoteException;
  /** As per {@link android.content.pm.PackageManager#setComponentEnabledSettings}. */
  public void setComponentEnabledSettings(java.util.List<android.content.pm.PackageManager.ComponentEnabledSetting> settings, int userId) throws android.os.RemoteException;
  /** As per {@link android.content.pm.PackageManager#getComponentEnabledSetting}. */
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:359:1:359:25")
  public int getComponentEnabledSetting(android.content.ComponentName componentName, int userId) throws android.os.RemoteException;
  /** As per {@link android.content.pm.PackageManager#setApplicationEnabledSetting}. */
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:365:1:365:25")
  public void setApplicationEnabledSetting(java.lang.String packageName, int newState, int flags, int userId, java.lang.String callingPackage) throws android.os.RemoteException;
  /** As per {@link android.content.pm.PackageManager#getApplicationEnabledSetting}. */
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:372:1:372:25")
  public int getApplicationEnabledSetting(java.lang.String packageName, int userId) throws android.os.RemoteException;
  /** Logs process start information (including APK hash) to the security log. */
  public void logAppProcessStartIfNeeded(java.lang.String packageName, java.lang.String processName, int uid, java.lang.String seinfo, java.lang.String apkFile, int pid) throws android.os.RemoteException;
  /** As per {@link android.content.pm.PackageManager#flushPackageRestrictionsAsUser}. */
  public void flushPackageRestrictionsAsUser(int userId) throws android.os.RemoteException;
  /**
   * Set whether the given package should be considered stopped, making
   * it not visible to implicit intents that filter out stopped packages.
   */
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:389:1:389:25")
  public void setPackageStoppedState(java.lang.String packageName, boolean stopped, int userId) throws android.os.RemoteException;
  /**
   * Free storage by deleting LRU sorted list of cache files across
   * all applications. If the currently available free storage
   * on the device is greater than or equal to the requested
   * free storage, no cache files are cleared. If the currently
   * available storage on the device is less than the requested
   * free storage, some or all of the cache files across
   * all applications are deleted (based on last accessed time)
   * to increase the free storage space on the device to
   * the requested value. There is no guarantee that clearing all
   * the cache files from all applications will clear up
   * enough storage to achieve the desired value.
   * @param freeStorageSize The number of bytes of storage to be
   * freed by the system. Say if freeStorageSize is XX,
   * and the current free storage is YY,
   * if XX is less than YY, just return. if not free XX-YY number
   * of bytes if possible.
   * @param observer call back used to notify when
   * the operation is completed
   */
  public void freeStorageAndNotify(java.lang.String volumeUuid, long freeStorageSize, int storageFlags, android.content.pm.IPackageDataObserver observer) throws android.os.RemoteException;
  /**
   * Free storage by deleting LRU sorted list of cache files across
   * all applications. If the currently available free storage
   * on the device is greater than or equal to the requested
   * free storage, no cache files are cleared. If the currently
   * available storage on the device is less than the requested
   * free storage, some or all of the cache files across
   * all applications are deleted (based on last accessed time)
   * to increase the free storage space on the device to
   * the requested value. There is no guarantee that clearing all
   * the cache files from all applications will clear up
   * enough storage to achieve the desired value.
   * @param freeStorageSize The number of bytes of storage to be
   * freed by the system. Say if freeStorageSize is XX,
   * and the current free storage is YY,
   * if XX is less than YY, just return. if not free XX-YY number
   * of bytes if possible.
   * @param pi IntentSender call back used to
   * notify when the operation is completed.May be null
   * to indicate that no call back is desired.
   */
  public void freeStorage(java.lang.String volumeUuid, long freeStorageSize, int storageFlags, android.content.IntentSender pi) throws android.os.RemoteException;
  /**
   * Delete all the cache files in an applications cache directory
   * @param packageName The package name of the application whose cache
   * files need to be deleted
   * @param observer a callback used to notify when the deletion is finished.
   */
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:445:1:445:25")
  public void deleteApplicationCacheFiles(java.lang.String packageName, android.content.pm.IPackageDataObserver observer) throws android.os.RemoteException;
  /**
   * Delete all the cache files in an applications cache directory
   * @param packageName The package name of the application whose cache
   * files need to be deleted
   * @param userId the user to delete application cache for
   * @param observer a callback used to notify when the deletion is finished.
   */
  public void deleteApplicationCacheFilesAsUser(java.lang.String packageName, int userId, android.content.pm.IPackageDataObserver observer) throws android.os.RemoteException;
  /**
   * Clear the user data directory of an application.
   * @param packageName The package name of the application whose cache
   * files need to be deleted
   * @param observer a callback used to notify when the operation is completed.
   */
  public void clearApplicationUserData(java.lang.String packageName, android.content.pm.IPackageDataObserver observer, int userId) throws android.os.RemoteException;
  /**
   * Clear the profile data of an application.
   * @param packageName The package name of the application whose profile data
   * need to be deleted
   */
  public void clearApplicationProfileData(java.lang.String packageName) throws android.os.RemoteException;
  /**
   * Get package statistics including the code, data and cache size for
   * an already installed package
   * @param packageName The package name of the application
   * @param userHandle Which user the size should be retrieved for
   * @param observer a callback to use to notify when the asynchronous
   * retrieval of information is complete.
   */
  public void getPackageSizeInfo(java.lang.String packageName, int userHandle, android.content.pm.IPackageStatsObserver observer) throws android.os.RemoteException;
  /**
   * Get a list of shared libraries that are available on the
   * system.
   */
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:486:1:486:25")
  public java.lang.String[] getSystemSharedLibraryNames() throws android.os.RemoteException;
  /**
   * Get a list of features that are available on the
   * system.
   */
  public android.content.pm.ParceledListSlice getSystemAvailableFeatures() throws android.os.RemoteException;
  public boolean hasSystemFeature(java.lang.String name, int version) throws android.os.RemoteException;
  public void enterSafeMode() throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:498:1:498:25")
  public boolean isSafeMode() throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:500:1:500:25")
  public boolean hasSystemUidErrors() throws android.os.RemoteException;
  /**
   * Notify the package manager that a package is going to be used and why.
   *
   * See PackageManager.NOTIFY_PACKAGE_USE_* for reasons.
   */
  public void notifyPackageUse(java.lang.String packageName, int reason) throws android.os.RemoteException;
  /**
   * Notify the package manager that a list of dex files have been loaded.
   *
   * @param loadingPackageName the name of the package who performs the load
   * @param classLoaderContextMap a map from file paths to dex files that have been loaded to
   *     the class loader context that was used to load them.
   * @param loaderIsa the ISA of the loader process
   */
  public void notifyDexLoad(java.lang.String loadingPackageName, java.util.Map<java.lang.String,java.lang.String> classLoaderContextMap, java.lang.String loaderIsa) throws android.os.RemoteException;
  /**
   * Register an application dex module with the package manager.
   * The package manager will keep track of the given module for future optimizations.
   *
   * Dex module optimizations will disable the classpath checking at runtime. The client bares
   * the responsibility to ensure that the static assumptions on classes in the optimized code
   * hold at runtime (e.g. there's no duplicate classes in the classpath).
   *
   * Note that the package manager already keeps track of dex modules loaded with
   * {@link dalvik.system.DexClassLoader} and {@link dalvik.system.PathClassLoader}.
   * This can be called for an eager registration.
   *
   * The call might take a while and the results will be posted on the main thread, using
   * the given callback.
   *
   * If the module is intended to be shared with other apps, make sure that the file
   * permissions allow for it.
   * If at registration time the permissions allow for others to read it, the module would
   * be marked as a shared module which might undergo a different optimization strategy.
   * (usually shared modules will generated larger optimizations artifacts,
   * taking more disk space).
   *
   * @param packageName the package name to which the dex module belongs
   * @param dexModulePath the absolute path of the dex module.
   * @param isSharedModule whether or not the module is intended to be used by other apps.
   * @param callback if not null,
   *   {@link android.content.pm.IDexModuleRegisterCallback.IDexModuleRegisterCallback#onDexModuleRegistered}
   *   will be called once the registration finishes.
   */
  public void registerDexModule(java.lang.String packageName, java.lang.String dexModulePath, boolean isSharedModule, android.content.pm.IDexModuleRegisterCallback callback) throws android.os.RemoteException;
  /**
   * Ask the package manager to perform a dex-opt with the given compiler filter.
   *
   * Note: exposed only for the shell command to allow moving packages explicitly to a
   *       definite state.
   */
  public boolean performDexOptMode(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete, java.lang.String splitName) throws android.os.RemoteException;
  /**
   * Ask the package manager to perform a dex-opt with the given compiler filter on the
   * secondary dex files belonging to the given package.
   *
   * Note: exposed only for the shell command to allow moving packages explicitly to a
   *       definite state.
   */
  public boolean performDexOptSecondary(java.lang.String packageName, java.lang.String targetCompilerFilter, boolean force) throws android.os.RemoteException;
  /**
   * Ask the package manager to dump profiles associated with a package.
   *
   * @param packageName The name of the package to dump.
   * @param dumpClassesAndMethods If false, pass {@code --dump-only} to profman to dump the
   *   profile in a human readable form intended for debugging. If true, pass
   *   {@code --dump-classes-and-methods} to profman to dump a sorted list of classes and methods
   *   in a human readable form that is valid input for {@code profman --create-profile-from}.
   */
  public void dumpProfiles(java.lang.String packageName, boolean dumpClassesAndMethods) throws android.os.RemoteException;
  public void forceDexOpt(java.lang.String packageName) throws android.os.RemoteException;
  /**
   * Reconcile the information we have about the secondary dex files belonging to
   * {@code packagName} and the actual dex files. For all dex files that were
   * deleted, update the internal records and delete the generated oat files.
   */
  public void reconcileSecondaryDexFiles(java.lang.String packageName) throws android.os.RemoteException;
  public int getMoveStatus(int moveId) throws android.os.RemoteException;
  public void registerMoveCallback(android.content.pm.IPackageMoveObserver callback) throws android.os.RemoteException;
  public void unregisterMoveCallback(android.content.pm.IPackageMoveObserver callback) throws android.os.RemoteException;
  public int movePackage(java.lang.String packageName, java.lang.String volumeUuid) throws android.os.RemoteException;
  public int movePrimaryStorage(java.lang.String volumeUuid) throws android.os.RemoteException;
  public boolean setInstallLocation(int loc) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:601:1:601:25")
  public int getInstallLocation() throws android.os.RemoteException;
  public int installExistingPackageAsUser(java.lang.String packageName, int userId, int installFlags, int installReason, java.util.List<java.lang.String> whiteListedPermissions) throws android.os.RemoteException;
  public void verifyPendingInstall(int id, int verificationCode) throws android.os.RemoteException;
  public void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay) throws android.os.RemoteException;
  /** @deprecated */
  @Deprecated
  public void verifyIntentFilter(int id, int verificationCode, java.util.List<java.lang.String> failedDomains) throws android.os.RemoteException;
  /** @deprecated */
  @Deprecated
  public int getIntentVerificationStatus(java.lang.String packageName, int userId) throws android.os.RemoteException;
  /** @deprecated */
  @Deprecated
  public boolean updateIntentVerificationStatus(java.lang.String packageName, int status, int userId) throws android.os.RemoteException;
  /** @deprecated */
  @Deprecated
  public android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String packageName) throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String packageName) throws android.os.RemoteException;
  public android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity() throws android.os.RemoteException;
  public boolean isFirstBoot() throws android.os.RemoteException;
  public boolean isOnlyCoreApps() throws android.os.RemoteException;
  public boolean isDeviceUpgrading() throws android.os.RemoteException;
  /** Reflects current DeviceStorageMonitorService state */
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:627:1:627:25")
  public boolean isStorageLow() throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:630:1:630:25")
  public boolean setApplicationHiddenSettingAsUser(java.lang.String packageName, boolean hidden, int userId) throws android.os.RemoteException;
  public boolean getApplicationHiddenSettingAsUser(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public void setSystemAppHiddenUntilInstalled(java.lang.String packageName, boolean hidden) throws android.os.RemoteException;
  public boolean setSystemAppInstallState(java.lang.String packageName, boolean installed, int userId) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk = 30, trackingBug = 170729553L, overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:637:1:637:69")
  public android.content.pm.IPackageInstaller getPackageInstaller() throws android.os.RemoteException;
  public boolean setBlockUninstallForUser(java.lang.String packageName, boolean blockUninstall, int userId) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:641:1:641:25")
  public boolean getBlockUninstallForUser(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public android.content.pm.KeySet getKeySetByAlias(java.lang.String packageName, java.lang.String alias) throws android.os.RemoteException;
  public android.content.pm.KeySet getSigningKeySet(java.lang.String packageName) throws android.os.RemoteException;
  public boolean isPackageSignedByKeySet(java.lang.String packageName, android.content.pm.KeySet ks) throws android.os.RemoteException;
  public boolean isPackageSignedByKeySetExactly(java.lang.String packageName, android.content.pm.KeySet ks) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk = 30, trackingBug = 170729553L, overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:649:1:649:69")
  public java.lang.String getPermissionControllerPackageName() throws android.os.RemoteException;
  public java.lang.String getSdkSandboxPackageName() throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice getInstantApps(int userId) throws android.os.RemoteException;
  public byte[] getInstantAppCookie(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public boolean setInstantAppCookie(java.lang.String packageName, byte[] cookie, int userId) throws android.os.RemoteException;
  public android.graphics.Bitmap getInstantAppIcon(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public boolean isInstantApp(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public boolean setRequiredForSystemUser(java.lang.String packageName, boolean systemUserApp) throws android.os.RemoteException;
  /**
   * Sets whether or not an update is available. Ostensibly for instant apps
   * to force exteranl resolution.
   */
  public void setUpdateAvailable(java.lang.String packageName, boolean updateAvaialble) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk = 30, trackingBug = 170729553L, overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:667:1:667:69")
  public java.lang.String getServicesSystemSharedLibraryPackageName() throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk = 30, trackingBug = 170729553L, overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:669:1:669:69")
  public java.lang.String getSharedSystemSharedLibraryPackageName() throws android.os.RemoteException;
  public android.content.pm.ChangedPackages getChangedPackages(int sequenceNumber, int userId) throws android.os.RemoteException;
  public boolean isPackageDeviceAdminOnAnyUser(java.lang.String packageName) throws android.os.RemoteException;
  public int getInstallReason(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String packageName, long flags, int userId) throws android.os.RemoteException;
  public boolean canRequestPackageInstalls(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public void deletePreloadsFileCache() throws android.os.RemoteException;
  public android.content.ComponentName getInstantAppResolverComponent() throws android.os.RemoteException;
  public android.content.ComponentName getInstantAppResolverSettingsComponent() throws android.os.RemoteException;
  public android.content.ComponentName getInstantAppInstallerComponent() throws android.os.RemoteException;
  public java.lang.String getInstantAppAndroidId(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public android.content.pm.dex.IArtManager getArtManager() throws android.os.RemoteException;
  public void setHarmfulAppWarning(java.lang.String packageName, java.lang.CharSequence warning, int userId) throws android.os.RemoteException;
  public java.lang.CharSequence getHarmfulAppWarning(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public boolean hasSigningCertificate(java.lang.String packageName, byte[] signingCertificate, int flags) throws android.os.RemoteException;
  public boolean hasUidSigningCertificate(int uid, byte[] signingCertificate, int flags) throws android.os.RemoteException;
  public java.lang.String getDefaultTextClassifierPackageName() throws android.os.RemoteException;
  public java.lang.String getSystemTextClassifierPackageName() throws android.os.RemoteException;
  public java.lang.String getAttentionServicePackageName() throws android.os.RemoteException;
  public java.lang.String getRotationResolverPackageName() throws android.os.RemoteException;
  public java.lang.String getWellbeingPackageName() throws android.os.RemoteException;
  public java.lang.String getAppPredictionServicePackageName() throws android.os.RemoteException;
  public java.lang.String getSystemCaptionsServicePackageName() throws android.os.RemoteException;
  public java.lang.String getSetupWizardPackageName() throws android.os.RemoteException;
  public java.lang.String getIncidentReportApproverPackageName() throws android.os.RemoteException;
  public java.lang.String getContentCaptureServicePackageName() throws android.os.RemoteException;
  public boolean isPackageStateProtected(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public void sendDeviceCustomizationReadyBroadcast() throws android.os.RemoteException;
  public java.util.List<android.content.pm.ModuleInfo> getInstalledModules(int flags) throws android.os.RemoteException;
  public android.content.pm.ModuleInfo getModuleInfo(java.lang.String packageName, int flags) throws android.os.RemoteException;
  public int getRuntimePermissionsVersion(int userId) throws android.os.RemoteException;
  public void setRuntimePermissionsVersion(int version, int userId) throws android.os.RemoteException;
  public void notifyPackagesReplacedReceived(java.lang.String[] packages) throws android.os.RemoteException;
  public void requestPackageChecksums(java.lang.String packageName, boolean includeSplits, int optional, int required, java.util.List trustedInstallers, android.content.pm.IOnChecksumsReadyListener onChecksumsReadyListener, int userId) throws android.os.RemoteException;
  public android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String packageName, java.lang.String callingPackage, java.lang.String featureId, int userId) throws android.os.RemoteException;
  //------------------------------------------------------------------------
  //
  // The following binder interfaces have been moved to IPermissionManager
  //
  //------------------------------------------------------------------------
  //------------------------------------------------------------------------
  // We need to keep these in IPackageManager for app compatibility
  //------------------------------------------------------------------------
  @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk = 30, trackingBug = 170729553L, overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:752:1:752:69")
  public java.lang.String[] getAppOpPermissionPackages(java.lang.String permissionName) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:755:1:755:25")
  public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String name, int flags) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:758:1:758:25")
  public boolean addPermission(android.content.pm.PermissionInfo info) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:761:1:761:25")
  public boolean addPermissionAsync(android.content.pm.PermissionInfo info) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:764:1:764:25")
  public void removePermission(java.lang.String name) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk = 30, trackingBug = 170729553L, overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:767:1:767:69")
  public int checkPermission(java.lang.String permName, java.lang.String pkgName, int userId) throws android.os.RemoteException;
  @android.compat.annotation.UnsupportedAppUsage(maxTargetSdk = 30, trackingBug = 170729553L, overrideSourcePosition="frameworks/base/core/java/android/content/pm/IPackageManager.aidl:770:1:770:69")
  public void grantRuntimePermission(java.lang.String packageName, java.lang.String permissionName, int userId) throws android.os.RemoteException;
  //------------------------------------------------------------------------
  // We need to keep these in IPackageManager for convenience in splitting
  // out the permission manager. This should be cleaned up, but, will require
  // a large change that modifies many repos.
  //------------------------------------------------------------------------
  public int checkUidPermission(java.lang.String permName, int uid) throws android.os.RemoteException;
  public void setMimeGroup(java.lang.String packageName, java.lang.String group, java.util.List<java.lang.String> mimeTypes) throws android.os.RemoteException;
  public java.lang.String getSplashScreenTheme(java.lang.String packageName, int userId) throws android.os.RemoteException;
  public void setSplashScreenTheme(java.lang.String packageName, java.lang.String themeName, int userId) throws android.os.RemoteException;
  public java.util.List<java.lang.String> getMimeGroup(java.lang.String packageName, java.lang.String group) throws android.os.RemoteException;
  public boolean isAutoRevokeWhitelisted(java.lang.String packageName) throws android.os.RemoteException;
  public void makeProviderVisible(int recipientAppId, java.lang.String visibleAuthority) throws android.os.RemoteException;
  @android.annotation.RequiresPermission(android.Manifest.permission.MAKE_UID_VISIBLE)
  public void makeUidVisible(int recipientAppId, int visibleUid) throws android.os.RemoteException;
  public android.os.IBinder getHoldLockToken() throws android.os.RemoteException;
  public void holdLock(android.os.IBinder token, int durationMs) throws android.os.RemoteException;
  public android.content.pm.PackageManager.Property getProperty(java.lang.String propertyName, java.lang.String packageName, java.lang.String className) throws android.os.RemoteException;
  public android.content.pm.ParceledListSlice queryProperty(java.lang.String propertyName, int componentType) throws android.os.RemoteException;
  public void setKeepUninstalledPackages(java.util.List<java.lang.String> packageList) throws android.os.RemoteException;
  public boolean canPackageQuery(java.lang.String sourcePackageName, java.lang.String targetPackageName, int userId) throws android.os.RemoteException;
}