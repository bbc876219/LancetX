/*
 * This file is auto-generated.  DO NOT MODIFY.
 * Using: out/host/linux-x86/bin/aidl -dout/soong/.intermediates/frameworks/base/framework-minus-apex/android_common/gen/aidl/frameworks/base/core/java/android/app/IActivityManager.aidl.d -Iframeworks/base/core/java -Iframeworks/base/drm/java -Iframeworks/base/graphics/java -Iframeworks/base/identity/java -Iframeworks/base/keystore/java -Iframeworks/base/location/java -Iframeworks/base/media/java -Iframeworks/base/media/mca/effect/java -Iframeworks/base/media/mca/filterfw/java -Iframeworks/base/media/mca/filterpacks/java -Iframeworks/base/mms/java -Iframeworks/base/opengl/java -Iframeworks/base/rs/java -Iframeworks/base/sax/java -Iframeworks/base/telecomm/java -Iframeworks/base/telephony/java -Iframeworks/base/media/aidl -Iframeworks/base/core/java -Iframeworks/base/drm/java -Iframeworks/base/graphics/java -Iframeworks/base/identity/java -Iframeworks/base/keystore/java -Iframeworks/base/location/java -Iframeworks/base/media/java -Iframeworks/base/media/mca/effect/java -Iframeworks/base/media/mca/filterfw/java -Iframeworks/base/media/mca/filterpacks/java -Iframeworks/base/mms/java -Iframeworks/base/opengl/java -Iframeworks/base/rs/java -Iframeworks/base/sax/java -Iframeworks/base/telecomm/java -Iframeworks/base/telephony/java -Iframeworks/av/aidl -Iframeworks/native/libs/permission/aidl -Ipackages/modules/Bluetooth/framework/aidl-export -Ipackages/modules/Connectivity/framework/aidl-export -Ipackages/modules/Media/apex/aidl/stable -Ihardware/interfaces/graphics/common/aidl -Iframeworks/base -Iframeworks/base/apex/blobstore/framework/java -Iframeworks/base/apex/jobscheduler/framework/java -Isystem/connectivity/wificond/aidl -Iframeworks/base/packages/services/PacProcessor/src -Iframeworks/base/packages/services/Proxy/src -Iframeworks/base/native/android/aidl -Isystem/security/identity/binder -Iframeworks/native/cmds/dumpstate/binder -Iframeworks/native/aidl/binder -Iframeworks/native/aidl/gui -Isystem/core/gatekeeperd/binder -Isystem/gsid/aidl -Iframeworks/native/libs/gui -Iframeworks/base/cmds/idmap2/idmap2d/aidl/services -Iframeworks/base/cmds/idmap2/idmap2d/aidl/core -Iframeworks/native/libs/incidentcompanion/binder -Iframeworks/native/libs/input -Iframeworks/native/cmds/installd/binder -Iframeworks/av/media/libaudioclient/aidl -Iframeworks/native/libs/binder/aidl -Iframeworks/av/camera/aidl -Isystem/update_engine/binder_bindings -Isystem/logging/logd/binder -Iframeworks/av/services/mediaresourcemanager/aidl -Isystem/core/storaged/binder -Isystem/vold/binder -Iframeworks/native/aidl -t --transaction_names --min_sdk_version=current frameworks/base/core/java/android/app/IActivityManager.aidl out/soong/.intermediates/frameworks/base/framework-minus-apex/android_common/gen/aidl/aidl0.tmp/frameworks/base/core/java/android/app/IActivityManager.java
 */
package android.app;
/**
 * System private API for talking with the activity manager service.  This
 * provides calls from the application back to the activity manager.
 *
 * {@hide}
 */
public interface IActivityManager extends android.os.IInterface
{

    /** Local-side IPC implementation stub class. */
    public static abstract class IActivityManagerStub extends android.os.Binder implements android.app.IActivityManager
    {
        /** Construct the stub at attach it to the interface. */
        public IActivityManagerStub()
        {
            this.attachInterface(this, DESCRIPTOR);
        }
        /**
         * Cast an IBinder object into an android.app.IActivityManager interface,
         * generating a proxy if needed.
         */
        public static android.app.IActivityManager asInterface(android.os.IBinder obj)
        {
            if ((obj==null)) {
                return null;
            }
            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
            if (((iin!=null)&&(iin instanceof android.app.IActivityManager))) {
                return ((android.app.IActivityManager)iin);
            }
            return new android.app.IActivityManager.Stub.Proxy(obj);
        }
        @Override public android.os.IBinder asBinder()
        {
            return this;
        }
        /** @hide */
        public static java.lang.String getDefaultTransactionName(int transactionCode)
        {
            switch (transactionCode)
            {
                case TRANSACTION_openContentUri:
                {
                    return "openContentUri";
                }
                case TRANSACTION_registerUidObserver:
                {
                    return "registerUidObserver";
                }
                case TRANSACTION_unregisterUidObserver:
                {
                    return "unregisterUidObserver";
                }
                case TRANSACTION_isUidActive:
                {
                    return "isUidActive";
                }
                case TRANSACTION_getUidProcessState:
                {
                    return "getUidProcessState";
                }
                case TRANSACTION_checkPermission:
                {
                    return "checkPermission";
                }
                case TRANSACTION_handleApplicationCrash:
                {
                    return "handleApplicationCrash";
                }
                case TRANSACTION_startActivity:
                {
                    return "startActivity";
                }
                case TRANSACTION_startActivityWithFeature:
                {
                    return "startActivityWithFeature";
                }
                case TRANSACTION_unhandledBack:
                {
                    return "unhandledBack";
                }
                case TRANSACTION_finishActivity:
                {
                    return "finishActivity";
                }
                case TRANSACTION_registerReceiver:
                {
                    return "registerReceiver";
                }
                case TRANSACTION_registerReceiverWithFeature:
                {
                    return "registerReceiverWithFeature";
                }
                case TRANSACTION_unregisterReceiver:
                {
                    return "unregisterReceiver";
                }
                case TRANSACTION_broadcastIntent:
                {
                    return "broadcastIntent";
                }
                case TRANSACTION_broadcastIntentWithFeature:
                {
                    return "broadcastIntentWithFeature";
                }
                case TRANSACTION_unbroadcastIntent:
                {
                    return "unbroadcastIntent";
                }
                case TRANSACTION_finishReceiver:
                {
                    return "finishReceiver";
                }
                case TRANSACTION_attachApplication:
                {
                    return "attachApplication";
                }
                case TRANSACTION_getTasks:
                {
                    return "getTasks";
                }
                case TRANSACTION_moveTaskToFront:
                {
                    return "moveTaskToFront";
                }
                case TRANSACTION_getTaskForActivity:
                {
                    return "getTaskForActivity";
                }
                case TRANSACTION_getContentProvider:
                {
                    return "getContentProvider";
                }
                case TRANSACTION_publishContentProviders:
                {
                    return "publishContentProviders";
                }
                case TRANSACTION_refContentProvider:
                {
                    return "refContentProvider";
                }
                case TRANSACTION_getRunningServiceControlPanel:
                {
                    return "getRunningServiceControlPanel";
                }
                case TRANSACTION_startService:
                {
                    return "startService";
                }
                case TRANSACTION_stopService:
                {
                    return "stopService";
                }
                case TRANSACTION_bindService:
                {
                    return "bindService";
                }
                case TRANSACTION_bindServiceInstance:
                {
                    return "bindServiceInstance";
                }
                case TRANSACTION_updateServiceGroup:
                {
                    return "updateServiceGroup";
                }
                case TRANSACTION_unbindService:
                {
                    return "unbindService";
                }
                case TRANSACTION_publishService:
                {
                    return "publishService";
                }
                case TRANSACTION_setDebugApp:
                {
                    return "setDebugApp";
                }
                case TRANSACTION_setAgentApp:
                {
                    return "setAgentApp";
                }
                case TRANSACTION_setAlwaysFinish:
                {
                    return "setAlwaysFinish";
                }
                case TRANSACTION_startInstrumentation:
                {
                    return "startInstrumentation";
                }
                case TRANSACTION_addInstrumentationResults:
                {
                    return "addInstrumentationResults";
                }
                case TRANSACTION_finishInstrumentation:
                {
                    return "finishInstrumentation";
                }
                case TRANSACTION_getConfiguration:
                {
                    return "getConfiguration";
                }
                case TRANSACTION_updateConfiguration:
                {
                    return "updateConfiguration";
                }
                case TRANSACTION_updateMccMncConfiguration:
                {
                    return "updateMccMncConfiguration";
                }
                case TRANSACTION_stopServiceToken:
                {
                    return "stopServiceToken";
                }
                case TRANSACTION_setProcessLimit:
                {
                    return "setProcessLimit";
                }
                case TRANSACTION_getProcessLimit:
                {
                    return "getProcessLimit";
                }
                case TRANSACTION_checkUriPermission:
                {
                    return "checkUriPermission";
                }
                case TRANSACTION_checkUriPermissions:
                {
                    return "checkUriPermissions";
                }
                case TRANSACTION_grantUriPermission:
                {
                    return "grantUriPermission";
                }
                case TRANSACTION_revokeUriPermission:
                {
                    return "revokeUriPermission";
                }
                case TRANSACTION_setActivityController:
                {
                    return "setActivityController";
                }
                case TRANSACTION_showWaitingForDebugger:
                {
                    return "showWaitingForDebugger";
                }
                case TRANSACTION_signalPersistentProcesses:
                {
                    return "signalPersistentProcesses";
                }
                case TRANSACTION_getRecentTasks:
                {
                    return "getRecentTasks";
                }
                case TRANSACTION_serviceDoneExecuting:
                {
                    return "serviceDoneExecuting";
                }
                case TRANSACTION_getIntentSender:
                {
                    return "getIntentSender";
                }
                case TRANSACTION_getIntentSenderWithFeature:
                {
                    return "getIntentSenderWithFeature";
                }
                case TRANSACTION_cancelIntentSender:
                {
                    return "cancelIntentSender";
                }
                case TRANSACTION_getInfoForIntentSender:
                {
                    return "getInfoForIntentSender";
                }
                case TRANSACTION_registerIntentSenderCancelListenerEx:
                {
                    return "registerIntentSenderCancelListenerEx";
                }
                case TRANSACTION_unregisterIntentSenderCancelListener:
                {
                    return "unregisterIntentSenderCancelListener";
                }
                case TRANSACTION_enterSafeMode:
                {
                    return "enterSafeMode";
                }
                case TRANSACTION_noteWakeupAlarm:
                {
                    return "noteWakeupAlarm";
                }
                case TRANSACTION_removeContentProvider:
                {
                    return "removeContentProvider";
                }
                case TRANSACTION_setRequestedOrientation:
                {
                    return "setRequestedOrientation";
                }
                case TRANSACTION_unbindFinished:
                {
                    return "unbindFinished";
                }
                case TRANSACTION_setProcessImportant:
                {
                    return "setProcessImportant";
                }
                case TRANSACTION_setServiceForeground:
                {
                    return "setServiceForeground";
                }
                case TRANSACTION_getForegroundServiceType:
                {
                    return "getForegroundServiceType";
                }
                case TRANSACTION_moveActivityTaskToBack:
                {
                    return "moveActivityTaskToBack";
                }
                case TRANSACTION_getMemoryInfo:
                {
                    return "getMemoryInfo";
                }
                case TRANSACTION_getProcessesInErrorState:
                {
                    return "getProcessesInErrorState";
                }
                case TRANSACTION_clearApplicationUserData:
                {
                    return "clearApplicationUserData";
                }
                case TRANSACTION_stopAppForUser:
                {
                    return "stopAppForUser";
                }
                case TRANSACTION_registerForegroundServiceObserver:
                {
                    return "registerForegroundServiceObserver";
                }
                case TRANSACTION_forceStopPackage:
                {
                    return "forceStopPackage";
                }
                case TRANSACTION_killPids:
                {
                    return "killPids";
                }
                case TRANSACTION_getServices:
                {
                    return "getServices";
                }
                case TRANSACTION_getRunningAppProcesses:
                {
                    return "getRunningAppProcesses";
                }
                case TRANSACTION_peekService:
                {
                    return "peekService";
                }
                case TRANSACTION_profileControl:
                {
                    return "profileControl";
                }
                case TRANSACTION_shutdown:
                {
                    return "shutdown";
                }
                case TRANSACTION_stopAppSwitches:
                {
                    return "stopAppSwitches";
                }
                case TRANSACTION_resumeAppSwitches:
                {
                    return "resumeAppSwitches";
                }
                case TRANSACTION_bindBackupAgent:
                {
                    return "bindBackupAgent";
                }
                case TRANSACTION_backupAgentCreated:
                {
                    return "backupAgentCreated";
                }
                case TRANSACTION_unbindBackupAgent:
                {
                    return "unbindBackupAgent";
                }
                case TRANSACTION_handleIncomingUser:
                {
                    return "handleIncomingUser";
                }
                case TRANSACTION_addPackageDependency:
                {
                    return "addPackageDependency";
                }
                case TRANSACTION_killApplication:
                {
                    return "killApplication";
                }
                case TRANSACTION_closeSystemDialogs:
                {
                    return "closeSystemDialogs";
                }
                case TRANSACTION_getProcessMemoryInfo:
                {
                    return "getProcessMemoryInfo";
                }
                case TRANSACTION_killApplicationProcess:
                {
                    return "killApplicationProcess";
                }
                case TRANSACTION_handleApplicationWtf:
                {
                    return "handleApplicationWtf";
                }
                case TRANSACTION_killBackgroundProcesses:
                {
                    return "killBackgroundProcesses";
                }
                case TRANSACTION_isUserAMonkey:
                {
                    return "isUserAMonkey";
                }
                case TRANSACTION_getRunningExternalApplications:
                {
                    return "getRunningExternalApplications";
                }
                case TRANSACTION_finishHeavyWeightApp:
                {
                    return "finishHeavyWeightApp";
                }
                case TRANSACTION_handleApplicationStrictModeViolation:
                {
                    return "handleApplicationStrictModeViolation";
                }
                case TRANSACTION_isTopActivityImmersive:
                {
                    return "isTopActivityImmersive";
                }
                case TRANSACTION_crashApplicationWithType:
                {
                    return "crashApplicationWithType";
                }
                case TRANSACTION_crashApplicationWithTypeWithExtras:
                {
                    return "crashApplicationWithTypeWithExtras";
                }
                case TRANSACTION_getProviderMimeType:
                {
                    return "getProviderMimeType";
                }
                case TRANSACTION_getProviderMimeTypeAsync:
                {
                    return "getProviderMimeTypeAsync";
                }
                case TRANSACTION_dumpHeap:
                {
                    return "dumpHeap";
                }
                case TRANSACTION_isUserRunning:
                {
                    return "isUserRunning";
                }
                case TRANSACTION_setPackageScreenCompatMode:
                {
                    return "setPackageScreenCompatMode";
                }
                case TRANSACTION_switchUser:
                {
                    return "switchUser";
                }
                case TRANSACTION_getSwitchingFromUserMessage:
                {
                    return "getSwitchingFromUserMessage";
                }
                case TRANSACTION_getSwitchingToUserMessage:
                {
                    return "getSwitchingToUserMessage";
                }
                case TRANSACTION_setStopUserOnSwitch:
                {
                    return "setStopUserOnSwitch";
                }
                case TRANSACTION_removeTask:
                {
                    return "removeTask";
                }
                case TRANSACTION_registerProcessObserver:
                {
                    return "registerProcessObserver";
                }
                case TRANSACTION_unregisterProcessObserver:
                {
                    return "unregisterProcessObserver";
                }
                case TRANSACTION_isIntentSenderTargetedToPackage:
                {
                    return "isIntentSenderTargetedToPackage";
                }
                case TRANSACTION_updatePersistentConfiguration:
                {
                    return "updatePersistentConfiguration";
                }
                case TRANSACTION_updatePersistentConfigurationWithAttribution:
                {
                    return "updatePersistentConfigurationWithAttribution";
                }
                case TRANSACTION_getProcessPss:
                {
                    return "getProcessPss";
                }
                case TRANSACTION_showBootMessage:
                {
                    return "showBootMessage";
                }
                case TRANSACTION_killAllBackgroundProcesses:
                {
                    return "killAllBackgroundProcesses";
                }
                case TRANSACTION_getContentProviderExternal:
                {
                    return "getContentProviderExternal";
                }
                case TRANSACTION_removeContentProviderExternal:
                {
                    return "removeContentProviderExternal";
                }
                case TRANSACTION_removeContentProviderExternalAsUser:
                {
                    return "removeContentProviderExternalAsUser";
                }
                case TRANSACTION_getMyMemoryState:
                {
                    return "getMyMemoryState";
                }
                case TRANSACTION_killProcessesBelowForeground:
                {
                    return "killProcessesBelowForeground";
                }
                case TRANSACTION_getCurrentUser:
                {
                    return "getCurrentUser";
                }
                case TRANSACTION_getCurrentUserId:
                {
                    return "getCurrentUserId";
                }
                case TRANSACTION_getLaunchedFromUid:
                {
                    return "getLaunchedFromUid";
                }
                case TRANSACTION_unstableProviderDied:
                {
                    return "unstableProviderDied";
                }
                case TRANSACTION_isIntentSenderAnActivity:
                {
                    return "isIntentSenderAnActivity";
                }
                case TRANSACTION_startActivityAsUser:
                {
                    return "startActivityAsUser";
                }
                case TRANSACTION_startActivityAsUserWithFeature:
                {
                    return "startActivityAsUserWithFeature";
                }
                case TRANSACTION_stopUser:
                {
                    return "stopUser";
                }
                case TRANSACTION_stopUserWithDelayedLocking:
                {
                    return "stopUserWithDelayedLocking";
                }
                case TRANSACTION_registerUserSwitchObserver:
                {
                    return "registerUserSwitchObserver";
                }
                case TRANSACTION_unregisterUserSwitchObserver:
                {
                    return "unregisterUserSwitchObserver";
                }
                case TRANSACTION_getRunningUserIds:
                {
                    return "getRunningUserIds";
                }
                case TRANSACTION_requestSystemServerHeapDump:
                {
                    return "requestSystemServerHeapDump";
                }
                case TRANSACTION_requestBugReport:
                {
                    return "requestBugReport";
                }
                case TRANSACTION_requestBugReportWithDescription:
                {
                    return "requestBugReportWithDescription";
                }
                case TRANSACTION_requestTelephonyBugReport:
                {
                    return "requestTelephonyBugReport";
                }
                case TRANSACTION_requestWifiBugReport:
                {
                    return "requestWifiBugReport";
                }
                case TRANSACTION_requestInteractiveBugReportWithDescription:
                {
                    return "requestInteractiveBugReportWithDescription";
                }
                case TRANSACTION_requestInteractiveBugReport:
                {
                    return "requestInteractiveBugReport";
                }
                case TRANSACTION_requestFullBugReport:
                {
                    return "requestFullBugReport";
                }
                case TRANSACTION_requestRemoteBugReport:
                {
                    return "requestRemoteBugReport";
                }
                case TRANSACTION_launchBugReportHandlerApp:
                {
                    return "launchBugReportHandlerApp";
                }
                case TRANSACTION_getBugreportWhitelistedPackages:
                {
                    return "getBugreportWhitelistedPackages";
                }
                case TRANSACTION_getIntentForIntentSender:
                {
                    return "getIntentForIntentSender";
                }
                case TRANSACTION_getLaunchedFromPackage:
                {
                    return "getLaunchedFromPackage";
                }
                case TRANSACTION_killUid:
                {
                    return "killUid";
                }
                case TRANSACTION_setUserIsMonkey:
                {
                    return "setUserIsMonkey";
                }
                case TRANSACTION_hang:
                {
                    return "hang";
                }
                case TRANSACTION_getAllRootTaskInfos:
                {
                    return "getAllRootTaskInfos";
                }
                case TRANSACTION_moveTaskToRootTask:
                {
                    return "moveTaskToRootTask";
                }
                case TRANSACTION_setFocusedRootTask:
                {
                    return "setFocusedRootTask";
                }
                case TRANSACTION_getFocusedRootTaskInfo:
                {
                    return "getFocusedRootTaskInfo";
                }
                case TRANSACTION_restart:
                {
                    return "restart";
                }
                case TRANSACTION_performIdleMaintenance:
                {
                    return "performIdleMaintenance";
                }
                case TRANSACTION_appNotRespondingViaProvider:
                {
                    return "appNotRespondingViaProvider";
                }
                case TRANSACTION_getTaskBounds:
                {
                    return "getTaskBounds";
                }
                case TRANSACTION_setProcessMemoryTrimLevel:
                {
                    return "setProcessMemoryTrimLevel";
                }
                case TRANSACTION_getTagForIntentSender:
                {
                    return "getTagForIntentSender";
                }
                case TRANSACTION_startUserInBackground:
                {
                    return "startUserInBackground";
                }
                case TRANSACTION_isInLockTaskMode:
                {
                    return "isInLockTaskMode";
                }
                case TRANSACTION_startActivityFromRecents:
                {
                    return "startActivityFromRecents";
                }
                case TRANSACTION_startSystemLockTaskMode:
                {
                    return "startSystemLockTaskMode";
                }
                case TRANSACTION_isTopOfTask:
                {
                    return "isTopOfTask";
                }
                case TRANSACTION_bootAnimationComplete:
                {
                    return "bootAnimationComplete";
                }
                case TRANSACTION_registerTaskStackListener:
                {
                    return "registerTaskStackListener";
                }
                case TRANSACTION_unregisterTaskStackListener:
                {
                    return "unregisterTaskStackListener";
                }
                case TRANSACTION_notifyCleartextNetwork:
                {
                    return "notifyCleartextNetwork";
                }
                case TRANSACTION_setTaskResizeable:
                {
                    return "setTaskResizeable";
                }
                case TRANSACTION_resizeTask:
                {
                    return "resizeTask";
                }
                case TRANSACTION_getLockTaskModeState:
                {
                    return "getLockTaskModeState";
                }
                case TRANSACTION_setDumpHeapDebugLimit:
                {
                    return "setDumpHeapDebugLimit";
                }
                case TRANSACTION_dumpHeapFinished:
                {
                    return "dumpHeapFinished";
                }
                case TRANSACTION_updateLockTaskPackages:
                {
                    return "updateLockTaskPackages";
                }
                case TRANSACTION_noteAlarmStart:
                {
                    return "noteAlarmStart";
                }
                case TRANSACTION_noteAlarmFinish:
                {
                    return "noteAlarmFinish";
                }
                case TRANSACTION_getPackageProcessState:
                {
                    return "getPackageProcessState";
                }
                case TRANSACTION_startBinderTracking:
                {
                    return "startBinderTracking";
                }
                case TRANSACTION_stopBinderTrackingAndDump:
                {
                    return "stopBinderTrackingAndDump";
                }
                case TRANSACTION_suppressResizeConfigChanges:
                {
                    return "suppressResizeConfigChanges";
                }
                case TRANSACTION_unlockUser:
                {
                    return "unlockUser";
                }
                case TRANSACTION_killPackageDependents:
                {
                    return "killPackageDependents";
                }
                case TRANSACTION_makePackageIdle:
                {
                    return "makePackageIdle";
                }
                case TRANSACTION_getMemoryTrimLevel:
                {
                    return "getMemoryTrimLevel";
                }
                case TRANSACTION_isVrModePackageEnabled:
                {
                    return "isVrModePackageEnabled";
                }
                case TRANSACTION_notifyLockedProfile:
                {
                    return "notifyLockedProfile";
                }
                case TRANSACTION_startConfirmDeviceCredentialIntent:
                {
                    return "startConfirmDeviceCredentialIntent";
                }
                case TRANSACTION_sendIdleJobTrigger:
                {
                    return "sendIdleJobTrigger";
                }
                case TRANSACTION_sendIntentSender:
                {
                    return "sendIntentSender";
                }
                case TRANSACTION_isBackgroundRestricted:
                {
                    return "isBackgroundRestricted";
                }
                case TRANSACTION_setRenderThread:
                {
                    return "setRenderThread";
                }
                case TRANSACTION_setHasTopUi:
                {
                    return "setHasTopUi";
                }
                case TRANSACTION_restartUserInBackground:
                {
                    return "restartUserInBackground";
                }
                case TRANSACTION_cancelTaskWindowTransition:
                {
                    return "cancelTaskWindowTransition";
                }
                case TRANSACTION_scheduleApplicationInfoChanged:
                {
                    return "scheduleApplicationInfoChanged";
                }
                case TRANSACTION_setPersistentVrThread:
                {
                    return "setPersistentVrThread";
                }
                case TRANSACTION_waitForNetworkStateUpdate:
                {
                    return "waitForNetworkStateUpdate";
                }
                case TRANSACTION_backgroundAllowlistUid:
                {
                    return "backgroundAllowlistUid";
                }
                case TRANSACTION_startUserInBackgroundWithListener:
                {
                    return "startUserInBackgroundWithListener";
                }
                case TRANSACTION_startDelegateShellPermissionIdentity:
                {
                    return "startDelegateShellPermissionIdentity";
                }
                case TRANSACTION_stopDelegateShellPermissionIdentity:
                {
                    return "stopDelegateShellPermissionIdentity";
                }
                case TRANSACTION_getDelegatedShellPermissions:
                {
                    return "getDelegatedShellPermissions";
                }
                case TRANSACTION_getLifeMonitor:
                {
                    return "getLifeMonitor";
                }
                case TRANSACTION_startUserInForegroundWithListener:
                {
                    return "startUserInForegroundWithListener";
                }
                case TRANSACTION_appNotResponding:
                {
                    return "appNotResponding";
                }
                case TRANSACTION_getHistoricalProcessExitReasons:
                {
                    return "getHistoricalProcessExitReasons";
                }
                case TRANSACTION_killProcessesWhenImperceptible:
                {
                    return "killProcessesWhenImperceptible";
                }
                case TRANSACTION_setActivityLocusContext:
                {
                    return "setActivityLocusContext";
                }
                case TRANSACTION_setProcessStateSummary:
                {
                    return "setProcessStateSummary";
                }
                case TRANSACTION_isAppFreezerSupported:
                {
                    return "isAppFreezerSupported";
                }
                case TRANSACTION_isAppFreezerEnabled:
                {
                    return "isAppFreezerEnabled";
                }
                case TRANSACTION_killUidForPermissionChange:
                {
                    return "killUidForPermissionChange";
                }
                case TRANSACTION_resetAppErrors:
                {
                    return "resetAppErrors";
                }
                case TRANSACTION_enableAppFreezer:
                {
                    return "enableAppFreezer";
                }
                case TRANSACTION_enableFgsNotificationRateLimit:
                {
                    return "enableFgsNotificationRateLimit";
                }
                case TRANSACTION_holdLock:
                {
                    return "holdLock";
                }
                case TRANSACTION_startProfile:
                {
                    return "startProfile";
                }
                case TRANSACTION_stopProfile:
                {
                    return "stopProfile";
                }
                case TRANSACTION_queryIntentComponentsForIntentSender:
                {
                    return "queryIntentComponentsForIntentSender";
                }
                case TRANSACTION_getUidProcessCapabilities:
                {
                    return "getUidProcessCapabilities";
                }
                case TRANSACTION_waitForBroadcastIdle:
                {
                    return "waitForBroadcastIdle";
                }
                case TRANSACTION_getBackgroundRestrictionExemptionReason:
                {
                    return "getBackgroundRestrictionExemptionReason";
                }
                default:
                {
                    return null;
                }
            }
        }

        @Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException
        {
            java.lang.String descriptor = DESCRIPTOR;
            if (code >= android.os.IBinder.FIRST_CALL_TRANSACTION && code <= android.os.IBinder.LAST_CALL_TRANSACTION) {
                data.enforceInterface(descriptor);
            }
            if (code == INTERFACE_TRANSACTION) {
                reply.writeString(descriptor);
                return true;
            }
            switch (code)
            {
                case TRANSACTION_openContentUri:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    data.enforceNoDataAvail();
                    android.os.ParcelFileDescriptor _result = this.openContentUri(_arg0);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_registerUidObserver:
                {
                    android.app.IUidObserver _arg0;
                    _arg0 = android.app.IUidObserver.Stub.asInterface(data.readStrongBinder());
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    data.enforceNoDataAvail();
                    this.registerUidObserver(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_unregisterUidObserver:
                {
                    android.app.IUidObserver _arg0;
                    _arg0 = android.app.IUidObserver.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    this.unregisterUidObserver(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_isUidActive:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    boolean _result = this.isUidActive(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_getUidProcessState:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    int _result = this.getUidProcessState(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_checkPermission:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    int _result = this.checkPermission(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_handleApplicationCrash:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    android.app.ApplicationErrorReport.ParcelableCrashInfo _arg1;
                    _arg1 = data.readTypedObject(android.app.ApplicationErrorReport.ParcelableCrashInfo.CREATOR);
                    data.enforceNoDataAvail();
                    this.handleApplicationCrash(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_startActivity:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    android.content.Intent _arg2;
                    _arg2 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    android.os.IBinder _arg4;
                    _arg4 = data.readStrongBinder();
                    java.lang.String _arg5;
                    _arg5 = data.readString();
                    int _arg6;
                    _arg6 = data.readInt();
                    int _arg7;
                    _arg7 = data.readInt();
                    android.app.ProfilerInfo _arg8;
                    _arg8 = data.readTypedObject(android.app.ProfilerInfo.CREATOR);
                    android.os.Bundle _arg9;
                    _arg9 = data.readTypedObject(android.os.Bundle.CREATOR);
                    data.enforceNoDataAvail();
                    int _result = this.startActivity(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_startActivityWithFeature:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    android.content.Intent _arg3;
                    _arg3 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg4;
                    _arg4 = data.readString();
                    android.os.IBinder _arg5;
                    _arg5 = data.readStrongBinder();
                    java.lang.String _arg6;
                    _arg6 = data.readString();
                    int _arg7;
                    _arg7 = data.readInt();
                    int _arg8;
                    _arg8 = data.readInt();
                    android.app.ProfilerInfo _arg9;
                    _arg9 = data.readTypedObject(android.app.ProfilerInfo.CREATOR);
                    android.os.Bundle _arg10;
                    _arg10 = data.readTypedObject(android.os.Bundle.CREATOR);
                    data.enforceNoDataAvail();
                    int _result = this.startActivityWithFeature(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_unhandledBack:
                {
                    this.unhandledBack();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_finishActivity:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    int _arg1;
                    _arg1 = data.readInt();
                    android.content.Intent _arg2;
                    _arg2 = data.readTypedObject(android.content.Intent.CREATOR);
                    int _arg3;
                    _arg3 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.finishActivity(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_registerReceiver:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    android.content.IIntentReceiver _arg2;
                    _arg2 = android.content.IIntentReceiver.Stub.asInterface(data.readStrongBinder());
                    android.content.IntentFilter _arg3;
                    _arg3 = data.readTypedObject(android.content.IntentFilter.CREATOR);
                    java.lang.String _arg4;
                    _arg4 = data.readString();
                    int _arg5;
                    _arg5 = data.readInt();
                    int _arg6;
                    _arg6 = data.readInt();
                    data.enforceNoDataAvail();
                    android.content.Intent _result = this.registerReceiver(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_registerReceiverWithFeature:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    android.content.IIntentReceiver _arg4;
                    _arg4 = android.content.IIntentReceiver.Stub.asInterface(data.readStrongBinder());
                    android.content.IntentFilter _arg5;
                    _arg5 = data.readTypedObject(android.content.IntentFilter.CREATOR);
                    java.lang.String _arg6;
                    _arg6 = data.readString();
                    int _arg7;
                    _arg7 = data.readInt();
                    int _arg8;
                    _arg8 = data.readInt();
                    data.enforceNoDataAvail();
                    android.content.Intent _result = this.registerReceiverWithFeature(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_unregisterReceiver:
                {
                    android.content.IIntentReceiver _arg0;
                    _arg0 = android.content.IIntentReceiver.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    this.unregisterReceiver(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_broadcastIntent:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    android.content.Intent _arg1;
                    _arg1 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    android.content.IIntentReceiver _arg3;
                    _arg3 = android.content.IIntentReceiver.Stub.asInterface(data.readStrongBinder());
                    int _arg4;
                    _arg4 = data.readInt();
                    java.lang.String _arg5;
                    _arg5 = data.readString();
                    android.os.Bundle _arg6;
                    _arg6 = data.readTypedObject(android.os.Bundle.CREATOR);
                    java.lang.String[] _arg7;
                    _arg7 = data.createStringArray();
                    int _arg8;
                    _arg8 = data.readInt();
                    android.os.Bundle _arg9;
                    _arg9 = data.readTypedObject(android.os.Bundle.CREATOR);
                    boolean _arg10;
                    _arg10 = data.readBoolean();
                    boolean _arg11;
                    _arg11 = data.readBoolean();
                    int _arg12;
                    _arg12 = data.readInt();
                    data.enforceNoDataAvail();
                    int _result = this.broadcastIntent(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11, _arg12);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_broadcastIntentWithFeature:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    android.content.Intent _arg2;
                    _arg2 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    android.content.IIntentReceiver _arg4;
                    _arg4 = android.content.IIntentReceiver.Stub.asInterface(data.readStrongBinder());
                    int _arg5;
                    _arg5 = data.readInt();
                    java.lang.String _arg6;
                    _arg6 = data.readString();
                    android.os.Bundle _arg7;
                    _arg7 = data.readTypedObject(android.os.Bundle.CREATOR);
                    java.lang.String[] _arg8;
                    _arg8 = data.createStringArray();
                    java.lang.String[] _arg9;
                    _arg9 = data.createStringArray();
                    java.lang.String[] _arg10;
                    _arg10 = data.createStringArray();
                    int _arg11;
                    _arg11 = data.readInt();
                    android.os.Bundle _arg12;
                    _arg12 = data.readTypedObject(android.os.Bundle.CREATOR);
                    boolean _arg13;
                    _arg13 = data.readBoolean();
                    boolean _arg14;
                    _arg14 = data.readBoolean();
                    int _arg15;
                    _arg15 = data.readInt();
                    data.enforceNoDataAvail();
                    int _result = this.broadcastIntentWithFeature(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11, _arg12, _arg13, _arg14, _arg15);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_unbroadcastIntent:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    android.content.Intent _arg1;
                    _arg1 = data.readTypedObject(android.content.Intent.CREATOR);
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    this.unbroadcastIntent(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_finishReceiver:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    int _arg1;
                    _arg1 = data.readInt();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    android.os.Bundle _arg3;
                    _arg3 = data.readTypedObject(android.os.Bundle.CREATOR);
                    boolean _arg4;
                    _arg4 = data.readBoolean();
                    int _arg5;
                    _arg5 = data.readInt();
                    data.enforceNoDataAvail();
                    this.finishReceiver(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);
                    break;
                }
                case TRANSACTION_attachApplication:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    long _arg1;
                    _arg1 = data.readLong();
                    data.enforceNoDataAvail();
                    this.attachApplication(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getTasks:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    java.util.List<android.app.ActivityManager.RunningTaskInfo> _result = this.getTasks(_arg0);
                    reply.writeNoException();
                    reply.writeTypedList(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_moveTaskToFront:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    int _arg2;
                    _arg2 = data.readInt();
                    int _arg3;
                    _arg3 = data.readInt();
                    android.os.Bundle _arg4;
                    _arg4 = data.readTypedObject(android.os.Bundle.CREATOR);
                    data.enforceNoDataAvail();
                    this.moveTaskToFront(_arg0, _arg1, _arg2, _arg3, _arg4);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getTaskForActivity:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    data.enforceNoDataAvail();
                    int _result = this.getTaskForActivity(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_getContentProvider:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    int _arg3;
                    _arg3 = data.readInt();
                    boolean _arg4;
                    _arg4 = data.readBoolean();
                    data.enforceNoDataAvail();
                    android.app.ContentProviderHolder _result = this.getContentProvider(_arg0, _arg1, _arg2, _arg3, _arg4);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_publishContentProviders:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.util.List<android.app.ContentProviderHolder> _arg1;
                    _arg1 = data.createTypedArrayList(android.app.ContentProviderHolder.CREATOR);
                    data.enforceNoDataAvail();
                    this.publishContentProviders(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_refContentProvider:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.refContentProvider(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_getRunningServiceControlPanel:
                {
                    android.content.ComponentName _arg0;
                    _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
                    data.enforceNoDataAvail();
                    android.app.PendingIntent _result = this.getRunningServiceControlPanel(_arg0);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_startService:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    android.content.Intent _arg1;
                    _arg1 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    boolean _arg3;
                    _arg3 = data.readBoolean();
                    java.lang.String _arg4;
                    _arg4 = data.readString();
                    java.lang.String _arg5;
                    _arg5 = data.readString();
                    int _arg6;
                    _arg6 = data.readInt();
                    data.enforceNoDataAvail();
                    android.content.ComponentName _result = this.startService(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_stopService:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    android.content.Intent _arg1;
                    _arg1 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    int _arg3;
                    _arg3 = data.readInt();
                    data.enforceNoDataAvail();
                    int _result = this.stopService(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_bindService:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    android.os.IBinder _arg1;
                    _arg1 = data.readStrongBinder();
                    android.content.Intent _arg2;
                    _arg2 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    android.app.IServiceConnection _arg4;
                    _arg4 = android.app.IServiceConnection.Stub.asInterface(data.readStrongBinder());
                    int _arg5;
                    _arg5 = data.readInt();
                    java.lang.String _arg6;
                    _arg6 = data.readString();
                    int _arg7;
                    _arg7 = data.readInt();
                    data.enforceNoDataAvail();
                    int _result = this.bindService(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_bindServiceInstance:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    android.os.IBinder _arg1;
                    _arg1 = data.readStrongBinder();
                    android.content.Intent _arg2;
                    _arg2 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    android.app.IServiceConnection _arg4;
                    _arg4 = android.app.IServiceConnection.Stub.asInterface(data.readStrongBinder());
                    int _arg5;
                    _arg5 = data.readInt();
                    java.lang.String _arg6;
                    _arg6 = data.readString();
                    java.lang.String _arg7;
                    _arg7 = data.readString();
                    int _arg8;
                    _arg8 = data.readInt();
                    data.enforceNoDataAvail();
                    int _result = this.bindServiceInstance(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_updateServiceGroup:
                {
                    android.app.IServiceConnection _arg0;
                    _arg0 = android.app.IServiceConnection.Stub.asInterface(data.readStrongBinder());
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    this.updateServiceGroup(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_unbindService:
                {
                    android.app.IServiceConnection _arg0;
                    _arg0 = android.app.IServiceConnection.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    boolean _result = this.unbindService(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_publishService:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    android.content.Intent _arg1;
                    _arg1 = data.readTypedObject(android.content.Intent.CREATOR);
                    android.os.IBinder _arg2;
                    _arg2 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    this.publishService(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setDebugApp:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    boolean _arg2;
                    _arg2 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.setDebugApp(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setAgentApp:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    this.setAgentApp(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setAlwaysFinish:
                {
                    boolean _arg0;
                    _arg0 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.setAlwaysFinish(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_startInstrumentation:
                {
                    android.content.ComponentName _arg0;
                    _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    int _arg2;
                    _arg2 = data.readInt();
                    android.os.Bundle _arg3;
                    _arg3 = data.readTypedObject(android.os.Bundle.CREATOR);
                    android.app.IInstrumentationWatcher _arg4;
                    _arg4 = android.app.IInstrumentationWatcher.Stub.asInterface(data.readStrongBinder());
                    android.app.IUiAutomationConnection _arg5;
                    _arg5 = android.app.IUiAutomationConnection.Stub.asInterface(data.readStrongBinder());
                    int _arg6;
                    _arg6 = data.readInt();
                    java.lang.String _arg7;
                    _arg7 = data.readString();
                    data.enforceNoDataAvail();
                    boolean _result = this.startInstrumentation(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_addInstrumentationResults:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    android.os.Bundle _arg1;
                    _arg1 = data.readTypedObject(android.os.Bundle.CREATOR);
                    data.enforceNoDataAvail();
                    this.addInstrumentationResults(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_finishInstrumentation:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    int _arg1;
                    _arg1 = data.readInt();
                    android.os.Bundle _arg2;
                    _arg2 = data.readTypedObject(android.os.Bundle.CREATOR);
                    data.enforceNoDataAvail();
                    this.finishInstrumentation(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getConfiguration:
                {
                    android.content.res.Configuration _result = this.getConfiguration();
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_updateConfiguration:
                {
                    android.content.res.Configuration _arg0;
                    _arg0 = data.readTypedObject(android.content.res.Configuration.CREATOR);
                    data.enforceNoDataAvail();
                    boolean _result = this.updateConfiguration(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_updateMccMncConfiguration:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    boolean _result = this.updateMccMncConfiguration(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_stopServiceToken:
                {
                    android.content.ComponentName _arg0;
                    _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
                    android.os.IBinder _arg1;
                    _arg1 = data.readStrongBinder();
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.stopServiceToken(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_setProcessLimit:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.setProcessLimit(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getProcessLimit:
                {
                    int _result = this.getProcessLimit();
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_checkUriPermission:
                {
                    android.net.Uri _arg0;
                    _arg0 = data.readTypedObject(android.net.Uri.CREATOR);
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    int _arg3;
                    _arg3 = data.readInt();
                    int _arg4;
                    _arg4 = data.readInt();
                    android.os.IBinder _arg5;
                    _arg5 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    int _result = this.checkUriPermission(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_checkUriPermissions:
                {
                    java.util.List<android.net.Uri> _arg0;
                    _arg0 = data.createTypedArrayList(android.net.Uri.CREATOR);
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    int _arg3;
                    _arg3 = data.readInt();
                    int _arg4;
                    _arg4 = data.readInt();
                    android.os.IBinder _arg5;
                    _arg5 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    int[] _result = this.checkUriPermissions(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);
                    reply.writeNoException();
                    reply.writeIntArray(_result);
                    break;
                }
                case TRANSACTION_grantUriPermission:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    android.net.Uri _arg2;
                    _arg2 = data.readTypedObject(android.net.Uri.CREATOR);
                    int _arg3;
                    _arg3 = data.readInt();
                    int _arg4;
                    _arg4 = data.readInt();
                    data.enforceNoDataAvail();
                    this.grantUriPermission(_arg0, _arg1, _arg2, _arg3, _arg4);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_revokeUriPermission:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    android.net.Uri _arg2;
                    _arg2 = data.readTypedObject(android.net.Uri.CREATOR);
                    int _arg3;
                    _arg3 = data.readInt();
                    int _arg4;
                    _arg4 = data.readInt();
                    data.enforceNoDataAvail();
                    this.revokeUriPermission(_arg0, _arg1, _arg2, _arg3, _arg4);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setActivityController:
                {
                    android.app.IActivityController _arg0;
                    _arg0 = android.app.IActivityController.Stub.asInterface(data.readStrongBinder());
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.setActivityController(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_showWaitingForDebugger:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.showWaitingForDebugger(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_signalPersistentProcesses:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.signalPersistentProcesses(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getRecentTasks:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    android.content.pm.ParceledListSlice _result = this.getRecentTasks(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_serviceDoneExecuting:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    int _arg3;
                    _arg3 = data.readInt();
                    data.enforceNoDataAvail();
                    this.serviceDoneExecuting(_arg0, _arg1, _arg2, _arg3);
                    break;
                }
                case TRANSACTION_getIntentSender:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    android.os.IBinder _arg2;
                    _arg2 = data.readStrongBinder();
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    int _arg4;
                    _arg4 = data.readInt();
                    android.content.Intent[] _arg5;
                    _arg5 = data.createTypedArray(android.content.Intent.CREATOR);
                    java.lang.String[] _arg6;
                    _arg6 = data.createStringArray();
                    int _arg7;
                    _arg7 = data.readInt();
                    android.os.Bundle _arg8;
                    _arg8 = data.readTypedObject(android.os.Bundle.CREATOR);
                    int _arg9;
                    _arg9 = data.readInt();
                    data.enforceNoDataAvail();
                    android.content.IIntentSender _result = this.getIntentSender(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9);
                    reply.writeNoException();
                    reply.writeStrongInterface(_result);
                    break;
                }
                case TRANSACTION_getIntentSenderWithFeature:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    android.os.IBinder _arg3;
                    _arg3 = data.readStrongBinder();
                    java.lang.String _arg4;
                    _arg4 = data.readString();
                    int _arg5;
                    _arg5 = data.readInt();
                    android.content.Intent[] _arg6;
                    _arg6 = data.createTypedArray(android.content.Intent.CREATOR);
                    java.lang.String[] _arg7;
                    _arg7 = data.createStringArray();
                    int _arg8;
                    _arg8 = data.readInt();
                    android.os.Bundle _arg9;
                    _arg9 = data.readTypedObject(android.os.Bundle.CREATOR);
                    int _arg10;
                    _arg10 = data.readInt();
                    data.enforceNoDataAvail();
                    android.content.IIntentSender _result = this.getIntentSenderWithFeature(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10);
                    reply.writeNoException();
                    reply.writeStrongInterface(_result);
                    break;
                }
                case TRANSACTION_cancelIntentSender:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    this.cancelIntentSender(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getInfoForIntentSender:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    android.app.ActivityManager.PendingIntentInfo _result = this.getInfoForIntentSender(_arg0);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_registerIntentSenderCancelListenerEx:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    com.android.internal.os.IResultReceiver _arg1;
                    _arg1 = com.android.internal.os.IResultReceiver.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    boolean _result = this.registerIntentSenderCancelListenerEx(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_unregisterIntentSenderCancelListener:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    com.android.internal.os.IResultReceiver _arg1;
                    _arg1 = com.android.internal.os.IResultReceiver.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    this.unregisterIntentSenderCancelListener(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_enterSafeMode:
                {
                    this.enterSafeMode();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_noteWakeupAlarm:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    android.os.WorkSource _arg1;
                    _arg1 = data.readTypedObject(android.os.WorkSource.CREATOR);
                    int _arg2;
                    _arg2 = data.readInt();
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    java.lang.String _arg4;
                    _arg4 = data.readString();
                    data.enforceNoDataAvail();
                    this.noteWakeupAlarm(_arg0, _arg1, _arg2, _arg3, _arg4);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_removeContentProvider:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.removeContentProvider(_arg0, _arg1);
                    break;
                }
                case TRANSACTION_setRequestedOrientation:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.setRequestedOrientation(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_unbindFinished:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    android.content.Intent _arg1;
                    _arg1 = data.readTypedObject(android.content.Intent.CREATOR);
                    boolean _arg2;
                    _arg2 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.unbindFinished(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setProcessImportant:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    int _arg1;
                    _arg1 = data.readInt();
                    boolean _arg2;
                    _arg2 = data.readBoolean();
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    data.enforceNoDataAvail();
                    this.setProcessImportant(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setServiceForeground:
                {
                    android.content.ComponentName _arg0;
                    _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
                    android.os.IBinder _arg1;
                    _arg1 = data.readStrongBinder();
                    int _arg2;
                    _arg2 = data.readInt();
                    android.app.Notification _arg3;
                    _arg3 = data.readTypedObject(android.app.Notification.CREATOR);
                    int _arg4;
                    _arg4 = data.readInt();
                    int _arg5;
                    _arg5 = data.readInt();
                    data.enforceNoDataAvail();
                    this.setServiceForeground(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getForegroundServiceType:
                {
                    android.content.ComponentName _arg0;
                    _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
                    android.os.IBinder _arg1;
                    _arg1 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    int _result = this.getForegroundServiceType(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_moveActivityTaskToBack:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    data.enforceNoDataAvail();
                    boolean _result = this.moveActivityTaskToBack(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_getMemoryInfo:
                {
                    android.app.ActivityManager.MemoryInfo _arg0;
                    _arg0 = new android.app.ActivityManager.MemoryInfo();
                    data.enforceNoDataAvail();
                    this.getMemoryInfo(_arg0);
                    reply.writeNoException();
                    reply.writeTypedObject(_arg0, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_getProcessesInErrorState:
                {
                    java.util.List<android.app.ActivityManager.ProcessErrorStateInfo> _result = this.getProcessesInErrorState();
                    reply.writeNoException();
                    reply.writeTypedList(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_clearApplicationUserData:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    android.content.pm.IPackageDataObserver _arg2;
                    _arg2 = android.content.pm.IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
                    int _arg3;
                    _arg3 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.clearApplicationUserData(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_stopAppForUser:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.stopAppForUser(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_registerForegroundServiceObserver:
                {
                    android.app.IForegroundServiceObserver _arg0;
                    _arg0 = android.app.IForegroundServiceObserver.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    boolean _result = this.registerForegroundServiceObserver(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_forceStopPackage:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.forceStopPackage(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_killPids:
                {
                    int[] _arg0;
                    _arg0 = data.createIntArray();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    boolean _arg2;
                    _arg2 = data.readBoolean();
                    data.enforceNoDataAvail();
                    boolean _result = this.killPids(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_getServices:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    java.util.List<android.app.ActivityManager.RunningServiceInfo> _result = this.getServices(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeTypedList(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_getRunningAppProcesses:
                {
                    java.util.List<android.app.ActivityManager.RunningAppProcessInfo> _result = this.getRunningAppProcesses();
                    reply.writeNoException();
                    reply.writeTypedList(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_peekService:
                {
                    android.content.Intent _arg0;
                    _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    data.enforceNoDataAvail();
                    android.os.IBinder _result = this.peekService(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    reply.writeStrongBinder(_result);
                    break;
                }
                case TRANSACTION_profileControl:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    boolean _arg2;
                    _arg2 = data.readBoolean();
                    android.app.ProfilerInfo _arg3;
                    _arg3 = data.readTypedObject(android.app.ProfilerInfo.CREATOR);
                    int _arg4;
                    _arg4 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.profileControl(_arg0, _arg1, _arg2, _arg3, _arg4);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_shutdown:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.shutdown(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_stopAppSwitches:
                {
                    this.stopAppSwitches();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_resumeAppSwitches:
                {
                    this.resumeAppSwitches();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_bindBackupAgent:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    int _arg3;
                    _arg3 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.bindBackupAgent(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_backupAgentCreated:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    android.os.IBinder _arg1;
                    _arg1 = data.readStrongBinder();
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    this.backupAgentCreated(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_unbindBackupAgent:
                {
                    android.content.pm.ApplicationInfo _arg0;
                    _arg0 = data.readTypedObject(android.content.pm.ApplicationInfo.CREATOR);
                    data.enforceNoDataAvail();
                    this.unbindBackupAgent(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_handleIncomingUser:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    boolean _arg3;
                    _arg3 = data.readBoolean();
                    boolean _arg4;
                    _arg4 = data.readBoolean();
                    java.lang.String _arg5;
                    _arg5 = data.readString();
                    java.lang.String _arg6;
                    _arg6 = data.readString();
                    data.enforceNoDataAvail();
                    int _result = this.handleIncomingUser(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_addPackageDependency:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    data.enforceNoDataAvail();
                    this.addPackageDependency(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_killApplication:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    data.enforceNoDataAvail();
                    this.killApplication(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_closeSystemDialogs:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    data.enforceNoDataAvail();
                    this.closeSystemDialogs(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getProcessMemoryInfo:
                {
                    int[] _arg0;
                    _arg0 = data.createIntArray();
                    data.enforceNoDataAvail();
                    android.os.Debug.MemoryInfo[] _result = this.getProcessMemoryInfo(_arg0);
                    reply.writeNoException();
                    reply.writeTypedArray(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_killApplicationProcess:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.killApplicationProcess(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_handleApplicationWtf:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    boolean _arg2;
                    _arg2 = data.readBoolean();
                    android.app.ApplicationErrorReport.ParcelableCrashInfo _arg3;
                    _arg3 = data.readTypedObject(android.app.ApplicationErrorReport.ParcelableCrashInfo.CREATOR);
                    int _arg4;
                    _arg4 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.handleApplicationWtf(_arg0, _arg1, _arg2, _arg3, _arg4);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_killBackgroundProcesses:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.killBackgroundProcesses(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_isUserAMonkey:
                {
                    boolean _result = this.isUserAMonkey();
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_getRunningExternalApplications:
                {
                    java.util.List<android.content.pm.ApplicationInfo> _result = this.getRunningExternalApplications();
                    reply.writeNoException();
                    reply.writeTypedList(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_finishHeavyWeightApp:
                {
                    this.finishHeavyWeightApp();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_handleApplicationStrictModeViolation:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    int _arg1;
                    _arg1 = data.readInt();
                    android.os.StrictMode.ViolationInfo _arg2;
                    _arg2 = data.readTypedObject(android.os.StrictMode.ViolationInfo.CREATOR);
                    data.enforceNoDataAvail();
                    this.handleApplicationStrictModeViolation(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_isTopActivityImmersive:
                {
                    boolean _result = this.isTopActivityImmersive();
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_crashApplicationWithType:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    int _arg3;
                    _arg3 = data.readInt();
                    java.lang.String _arg4;
                    _arg4 = data.readString();
                    boolean _arg5;
                    _arg5 = data.readBoolean();
                    int _arg6;
                    _arg6 = data.readInt();
                    data.enforceNoDataAvail();
                    this.crashApplicationWithType(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_crashApplicationWithTypeWithExtras:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    int _arg3;
                    _arg3 = data.readInt();
                    java.lang.String _arg4;
                    _arg4 = data.readString();
                    boolean _arg5;
                    _arg5 = data.readBoolean();
                    int _arg6;
                    _arg6 = data.readInt();
                    android.os.Bundle _arg7;
                    _arg7 = data.readTypedObject(android.os.Bundle.CREATOR);
                    data.enforceNoDataAvail();
                    this.crashApplicationWithTypeWithExtras(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getProviderMimeType:
                {
                    android.net.Uri _arg0;
                    _arg0 = data.readTypedObject(android.net.Uri.CREATOR);
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    java.lang.String _result = this.getProviderMimeType(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeString(_result);
                    break;
                }
                case TRANSACTION_getProviderMimeTypeAsync:
                {
                    android.net.Uri _arg0;
                    _arg0 = data.readTypedObject(android.net.Uri.CREATOR);
                    int _arg1;
                    _arg1 = data.readInt();
                    android.os.RemoteCallback _arg2;
                    _arg2 = data.readTypedObject(android.os.RemoteCallback.CREATOR);
                    data.enforceNoDataAvail();
                    this.getProviderMimeTypeAsync(_arg0, _arg1, _arg2);
                    break;
                }
                case TRANSACTION_dumpHeap:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    boolean _arg2;
                    _arg2 = data.readBoolean();
                    boolean _arg3;
                    _arg3 = data.readBoolean();
                    boolean _arg4;
                    _arg4 = data.readBoolean();
                    java.lang.String _arg5;
                    _arg5 = data.readString();
                    android.os.ParcelFileDescriptor _arg6;
                    _arg6 = data.readTypedObject(android.os.ParcelFileDescriptor.CREATOR);
                    android.os.RemoteCallback _arg7;
                    _arg7 = data.readTypedObject(android.os.RemoteCallback.CREATOR);
                    data.enforceNoDataAvail();
                    boolean _result = this.dumpHeap(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_isUserRunning:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.isUserRunning(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_setPackageScreenCompatMode:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.setPackageScreenCompatMode(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_switchUser:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.switchUser(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_getSwitchingFromUserMessage:
                {
                    java.lang.String _result = this.getSwitchingFromUserMessage();
                    reply.writeNoException();
                    reply.writeString(_result);
                    break;
                }
                case TRANSACTION_getSwitchingToUserMessage:
                {
                    java.lang.String _result = this.getSwitchingToUserMessage();
                    reply.writeNoException();
                    reply.writeString(_result);
                    break;
                }
                case TRANSACTION_setStopUserOnSwitch:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.setStopUserOnSwitch(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_removeTask:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.removeTask(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_registerProcessObserver:
                {
                    android.app.IProcessObserver _arg0;
                    _arg0 = android.app.IProcessObserver.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    this.registerProcessObserver(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_unregisterProcessObserver:
                {
                    android.app.IProcessObserver _arg0;
                    _arg0 = android.app.IProcessObserver.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    this.unregisterProcessObserver(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_isIntentSenderTargetedToPackage:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    boolean _result = this.isIntentSenderTargetedToPackage(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_updatePersistentConfiguration:
                {
                    android.content.res.Configuration _arg0;
                    _arg0 = data.readTypedObject(android.content.res.Configuration.CREATOR);
                    data.enforceNoDataAvail();
                    this.updatePersistentConfiguration(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_updatePersistentConfigurationWithAttribution:
                {
                    android.content.res.Configuration _arg0;
                    _arg0 = data.readTypedObject(android.content.res.Configuration.CREATOR);
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    data.enforceNoDataAvail();
                    this.updatePersistentConfigurationWithAttribution(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getProcessPss:
                {
                    int[] _arg0;
                    _arg0 = data.createIntArray();
                    data.enforceNoDataAvail();
                    long[] _result = this.getProcessPss(_arg0);
                    reply.writeNoException();
                    reply.writeLongArray(_result);
                    break;
                }
                case TRANSACTION_showBootMessage:
                {
                    java.lang.CharSequence _arg0;
                    _arg0 = data.readTypedObject(android.text.TextUtils.CHAR_SEQUENCE_CREATOR);
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.showBootMessage(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_killAllBackgroundProcesses:
                {
                    this.killAllBackgroundProcesses();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getContentProviderExternal:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    android.os.IBinder _arg2;
                    _arg2 = data.readStrongBinder();
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    data.enforceNoDataAvail();
                    android.app.ContentProviderHolder _result = this.getContentProviderExternal(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_removeContentProviderExternal:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    android.os.IBinder _arg1;
                    _arg1 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    this.removeContentProviderExternal(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_removeContentProviderExternalAsUser:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    android.os.IBinder _arg1;
                    _arg1 = data.readStrongBinder();
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    this.removeContentProviderExternalAsUser(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getMyMemoryState:
                {
                    android.app.ActivityManager.RunningAppProcessInfo _arg0;
                    _arg0 = new android.app.ActivityManager.RunningAppProcessInfo();
                    data.enforceNoDataAvail();
                    this.getMyMemoryState(_arg0);
                    reply.writeNoException();
                    reply.writeTypedObject(_arg0, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_killProcessesBelowForeground:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    data.enforceNoDataAvail();
                    boolean _result = this.killProcessesBelowForeground(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_getCurrentUser:
                {
                    android.content.pm.UserInfo _result = this.getCurrentUser();
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_getCurrentUserId:
                {
                    int _result = this.getCurrentUserId();
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_getLaunchedFromUid:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    int _result = this.getLaunchedFromUid(_arg0);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_unstableProviderDied:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    this.unstableProviderDied(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_isIntentSenderAnActivity:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    boolean _result = this.isIntentSenderAnActivity(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_startActivityAsUser:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    android.content.Intent _arg2;
                    _arg2 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    android.os.IBinder _arg4;
                    _arg4 = data.readStrongBinder();
                    java.lang.String _arg5;
                    _arg5 = data.readString();
                    int _arg6;
                    _arg6 = data.readInt();
                    int _arg7;
                    _arg7 = data.readInt();
                    android.app.ProfilerInfo _arg8;
                    _arg8 = data.readTypedObject(android.app.ProfilerInfo.CREATOR);
                    android.os.Bundle _arg9;
                    _arg9 = data.readTypedObject(android.os.Bundle.CREATOR);
                    int _arg10;
                    _arg10 = data.readInt();
                    data.enforceNoDataAvail();
                    int _result = this.startActivityAsUser(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_startActivityAsUserWithFeature:
                {
                    android.app.IApplicationThread _arg0;
                    _arg0 = android.app.IApplicationThread.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    android.content.Intent _arg3;
                    _arg3 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg4;
                    _arg4 = data.readString();
                    android.os.IBinder _arg5;
                    _arg5 = data.readStrongBinder();
                    java.lang.String _arg6;
                    _arg6 = data.readString();
                    int _arg7;
                    _arg7 = data.readInt();
                    int _arg8;
                    _arg8 = data.readInt();
                    android.app.ProfilerInfo _arg9;
                    _arg9 = data.readTypedObject(android.app.ProfilerInfo.CREATOR);
                    android.os.Bundle _arg10;
                    _arg10 = data.readTypedObject(android.os.Bundle.CREATOR);
                    int _arg11;
                    _arg11 = data.readInt();
                    data.enforceNoDataAvail();
                    int _result = this.startActivityAsUserWithFeature(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_stopUser:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    android.app.IStopUserCallback _arg2;
                    _arg2 = android.app.IStopUserCallback.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    int _result = this.stopUser(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_stopUserWithDelayedLocking:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    android.app.IStopUserCallback _arg2;
                    _arg2 = android.app.IStopUserCallback.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    int _result = this.stopUserWithDelayedLocking(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_registerUserSwitchObserver:
                {
                    android.app.IUserSwitchObserver _arg0;
                    _arg0 = android.app.IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    this.registerUserSwitchObserver(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_unregisterUserSwitchObserver:
                {
                    android.app.IUserSwitchObserver _arg0;
                    _arg0 = android.app.IUserSwitchObserver.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    this.unregisterUserSwitchObserver(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getRunningUserIds:
                {
                    int[] _result = this.getRunningUserIds();
                    reply.writeNoException();
                    reply.writeIntArray(_result);
                    break;
                }
                case TRANSACTION_requestSystemServerHeapDump:
                {
                    this.requestSystemServerHeapDump();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_requestBugReport:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.requestBugReport(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_requestBugReportWithDescription:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    this.requestBugReportWithDescription(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_requestTelephonyBugReport:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    this.requestTelephonyBugReport(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_requestWifiBugReport:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    this.requestWifiBugReport(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_requestInteractiveBugReportWithDescription:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    this.requestInteractiveBugReportWithDescription(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_requestInteractiveBugReport:
                {
                    this.requestInteractiveBugReport();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_requestFullBugReport:
                {
                    this.requestFullBugReport();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_requestRemoteBugReport:
                {
                    long _arg0;
                    _arg0 = data.readLong();
                    data.enforceNoDataAvail();
                    this.requestRemoteBugReport(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_launchBugReportHandlerApp:
                {
                    boolean _result = this.launchBugReportHandlerApp();
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_getBugreportWhitelistedPackages:
                {
                    java.util.List<java.lang.String> _result = this.getBugreportWhitelistedPackages();
                    reply.writeNoException();
                    reply.writeStringList(_result);
                    break;
                }
                case TRANSACTION_getIntentForIntentSender:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    android.content.Intent _result = this.getIntentForIntentSender(_arg0);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_getLaunchedFromPackage:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    java.lang.String _result = this.getLaunchedFromPackage(_arg0);
                    reply.writeNoException();
                    reply.writeString(_result);
                    break;
                }
                case TRANSACTION_killUid:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    data.enforceNoDataAvail();
                    this.killUid(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setUserIsMonkey:
                {
                    boolean _arg0;
                    _arg0 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.setUserIsMonkey(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_hang:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    boolean _arg1;
                    _arg1 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.hang(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getAllRootTaskInfos:
                {
                    java.util.List<android.app.ActivityTaskManager.RootTaskInfo> _result = this.getAllRootTaskInfos();
                    reply.writeNoException();
                    reply.writeTypedList(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_moveTaskToRootTask:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    boolean _arg2;
                    _arg2 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.moveTaskToRootTask(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setFocusedRootTask:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.setFocusedRootTask(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getFocusedRootTaskInfo:
                {
                    android.app.ActivityTaskManager.RootTaskInfo _result = this.getFocusedRootTaskInfo();
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_restart:
                {
                    this.restart();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_performIdleMaintenance:
                {
                    this.performIdleMaintenance();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_appNotRespondingViaProvider:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    this.appNotRespondingViaProvider(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getTaskBounds:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    android.graphics.Rect _result = this.getTaskBounds(_arg0);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_setProcessMemoryTrimLevel:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.setProcessMemoryTrimLevel(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_getTagForIntentSender:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    java.lang.String _result = this.getTagForIntentSender(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeString(_result);
                    break;
                }
                case TRANSACTION_startUserInBackground:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.startUserInBackground(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_isInLockTaskMode:
                {
                    boolean _result = this.isInLockTaskMode();
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_startActivityFromRecents:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    android.os.Bundle _arg1;
                    _arg1 = data.readTypedObject(android.os.Bundle.CREATOR);
                    data.enforceNoDataAvail();
                    int _result = this.startActivityFromRecents(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_startSystemLockTaskMode:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.startSystemLockTaskMode(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_isTopOfTask:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    boolean _result = this.isTopOfTask(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_bootAnimationComplete:
                {
                    this.bootAnimationComplete();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_registerTaskStackListener:
                {
                    android.app.ITaskStackListener _arg0;
                    _arg0 = android.app.ITaskStackListener.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    this.registerTaskStackListener(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_unregisterTaskStackListener:
                {
                    android.app.ITaskStackListener _arg0;
                    _arg0 = android.app.ITaskStackListener.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    this.unregisterTaskStackListener(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_notifyCleartextNetwork:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    byte[] _arg1;
                    _arg1 = data.createByteArray();
                    data.enforceNoDataAvail();
                    this.notifyCleartextNetwork(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setTaskResizeable:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.setTaskResizeable(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_resizeTask:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    android.graphics.Rect _arg1;
                    _arg1 = data.readTypedObject(android.graphics.Rect.CREATOR);
                    int _arg2;
                    _arg2 = data.readInt();
                    data.enforceNoDataAvail();
                    this.resizeTask(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getLockTaskModeState:
                {
                    int _result = this.getLockTaskModeState();
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_setDumpHeapDebugLimit:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    long _arg2;
                    _arg2 = data.readLong();
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    data.enforceNoDataAvail();
                    this.setDumpHeapDebugLimit(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_dumpHeapFinished:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    data.enforceNoDataAvail();
                    this.dumpHeapFinished(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_updateLockTaskPackages:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    java.lang.String[] _arg1;
                    _arg1 = data.createStringArray();
                    data.enforceNoDataAvail();
                    this.updateLockTaskPackages(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_noteAlarmStart:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    android.os.WorkSource _arg1;
                    _arg1 = data.readTypedObject(android.os.WorkSource.CREATOR);
                    int _arg2;
                    _arg2 = data.readInt();
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    data.enforceNoDataAvail();
                    this.noteAlarmStart(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_noteAlarmFinish:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    android.os.WorkSource _arg1;
                    _arg1 = data.readTypedObject(android.os.WorkSource.CREATOR);
                    int _arg2;
                    _arg2 = data.readInt();
                    java.lang.String _arg3;
                    _arg3 = data.readString();
                    data.enforceNoDataAvail();
                    this.noteAlarmFinish(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getPackageProcessState:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    int _result = this.getPackageProcessState(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_startBinderTracking:
                {
                    boolean _result = this.startBinderTracking();
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_stopBinderTrackingAndDump:
                {
                    android.os.ParcelFileDescriptor _arg0;
                    _arg0 = data.readTypedObject(android.os.ParcelFileDescriptor.CREATOR);
                    data.enforceNoDataAvail();
                    boolean _result = this.stopBinderTrackingAndDump(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_suppressResizeConfigChanges:
                {
                    boolean _arg0;
                    _arg0 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.suppressResizeConfigChanges(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_unlockUser:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    byte[] _arg1;
                    _arg1 = data.createByteArray();
                    byte[] _arg2;
                    _arg2 = data.createByteArray();
                    android.os.IProgressListener _arg3;
                    _arg3 = android.os.IProgressListener.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    boolean _result = this.unlockUser(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_killPackageDependents:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.killPackageDependents(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_makePackageIdle:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.makePackageIdle(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getMemoryTrimLevel:
                {
                    int _result = this.getMemoryTrimLevel();
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_isVrModePackageEnabled:
                {
                    android.content.ComponentName _arg0;
                    _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
                    data.enforceNoDataAvail();
                    boolean _result = this.isVrModePackageEnabled(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_notifyLockedProfile:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.notifyLockedProfile(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_startConfirmDeviceCredentialIntent:
                {
                    android.content.Intent _arg0;
                    _arg0 = data.readTypedObject(android.content.Intent.CREATOR);
                    android.os.Bundle _arg1;
                    _arg1 = data.readTypedObject(android.os.Bundle.CREATOR);
                    data.enforceNoDataAvail();
                    this.startConfirmDeviceCredentialIntent(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_sendIdleJobTrigger:
                {
                    this.sendIdleJobTrigger();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_sendIntentSender:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    android.os.IBinder _arg1;
                    _arg1 = data.readStrongBinder();
                    int _arg2;
                    _arg2 = data.readInt();
                    android.content.Intent _arg3;
                    _arg3 = data.readTypedObject(android.content.Intent.CREATOR);
                    java.lang.String _arg4;
                    _arg4 = data.readString();
                    android.content.IIntentReceiver _arg5;
                    _arg5 = android.content.IIntentReceiver.Stub.asInterface(data.readStrongBinder());
                    java.lang.String _arg6;
                    _arg6 = data.readString();
                    android.os.Bundle _arg7;
                    _arg7 = data.readTypedObject(android.os.Bundle.CREATOR);
                    data.enforceNoDataAvail();
                    int _result = this.sendIntentSender(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_isBackgroundRestricted:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    data.enforceNoDataAvail();
                    boolean _result = this.isBackgroundRestricted(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_setRenderThread:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.setRenderThread(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setHasTopUi:
                {
                    boolean _arg0;
                    _arg0 = data.readBoolean();
                    data.enforceNoDataAvail();
                    this.setHasTopUi(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_restartUserInBackground:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    int _result = this.restartUserInBackground(_arg0);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_cancelTaskWindowTransition:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.cancelTaskWindowTransition(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_scheduleApplicationInfoChanged:
                {
                    java.util.List<java.lang.String> _arg0;
                    _arg0 = data.createStringArrayList();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.scheduleApplicationInfoChanged(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setPersistentVrThread:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.setPersistentVrThread(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_waitForNetworkStateUpdate:
                {
                    long _arg0;
                    _arg0 = data.readLong();
                    data.enforceNoDataAvail();
                    this.waitForNetworkStateUpdate(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_backgroundAllowlistUid:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    this.backgroundAllowlistUid(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_startUserInBackgroundWithListener:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    android.os.IProgressListener _arg1;
                    _arg1 = android.os.IProgressListener.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    boolean _result = this.startUserInBackgroundWithListener(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_startDelegateShellPermissionIdentity:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    java.lang.String[] _arg1;
                    _arg1 = data.createStringArray();
                    data.enforceNoDataAvail();
                    this.startDelegateShellPermissionIdentity(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_stopDelegateShellPermissionIdentity:
                {
                    this.stopDelegateShellPermissionIdentity();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getDelegatedShellPermissions:
                {
                    java.util.List<java.lang.String> _result = this.getDelegatedShellPermissions();
                    reply.writeNoException();
                    reply.writeStringList(_result);
                    break;
                }
                case TRANSACTION_getLifeMonitor:
                {
                    android.os.ParcelFileDescriptor _result = this.getLifeMonitor();
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_startUserInForegroundWithListener:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    android.os.IProgressListener _arg1;
                    _arg1 = android.os.IProgressListener.Stub.asInterface(data.readStrongBinder());
                    data.enforceNoDataAvail();
                    boolean _result = this.startUserInForegroundWithListener(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_appNotResponding:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    data.enforceNoDataAvail();
                    this.appNotResponding(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getHistoricalProcessExitReasons:
                {
                    java.lang.String _arg0;
                    _arg0 = data.readString();
                    int _arg1;
                    _arg1 = data.readInt();
                    int _arg2;
                    _arg2 = data.readInt();
                    int _arg3;
                    _arg3 = data.readInt();
                    data.enforceNoDataAvail();
                    android.content.pm.ParceledListSlice<android.app.ApplicationExitInfo> _result = this.getHistoricalProcessExitReasons(_arg0, _arg1, _arg2, _arg3);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_killProcessesWhenImperceptible:
                {
                    int[] _arg0;
                    _arg0 = data.createIntArray();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    this.killProcessesWhenImperceptible(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setActivityLocusContext:
                {
                    android.content.ComponentName _arg0;
                    _arg0 = data.readTypedObject(android.content.ComponentName.CREATOR);
                    android.content.LocusId _arg1;
                    _arg1 = data.readTypedObject(android.content.LocusId.CREATOR);
                    android.os.IBinder _arg2;
                    _arg2 = data.readStrongBinder();
                    data.enforceNoDataAvail();
                    this.setActivityLocusContext(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_setProcessStateSummary:
                {
                    byte[] _arg0;
                    _arg0 = data.createByteArray();
                    data.enforceNoDataAvail();
                    this.setProcessStateSummary(_arg0);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_isAppFreezerSupported:
                {
                    boolean _result = this.isAppFreezerSupported();
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_isAppFreezerEnabled:
                {
                    boolean _result = this.isAppFreezerEnabled();
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_killUidForPermissionChange:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    java.lang.String _arg2;
                    _arg2 = data.readString();
                    data.enforceNoDataAvail();
                    this.killUidForPermissionChange(_arg0, _arg1, _arg2);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_resetAppErrors:
                {
                    this.resetAppErrors();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_enableAppFreezer:
                {
                    boolean _arg0;
                    _arg0 = data.readBoolean();
                    data.enforceNoDataAvail();
                    boolean _result = this.enableAppFreezer(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_enableFgsNotificationRateLimit:
                {
                    boolean _arg0;
                    _arg0 = data.readBoolean();
                    data.enforceNoDataAvail();
                    boolean _result = this.enableFgsNotificationRateLimit(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_holdLock:
                {
                    android.os.IBinder _arg0;
                    _arg0 = data.readStrongBinder();
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    this.holdLock(_arg0, _arg1);
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_startProfile:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.startProfile(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_stopProfile:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    boolean _result = this.stopProfile(_arg0);
                    reply.writeNoException();
                    reply.writeBoolean(_result);
                    break;
                }
                case TRANSACTION_queryIntentComponentsForIntentSender:
                {
                    android.content.IIntentSender _arg0;
                    _arg0 = android.content.IIntentSender.Stub.asInterface(data.readStrongBinder());
                    int _arg1;
                    _arg1 = data.readInt();
                    data.enforceNoDataAvail();
                    android.content.pm.ParceledListSlice _result = this.queryIntentComponentsForIntentSender(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeTypedObject(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
                    break;
                }
                case TRANSACTION_getUidProcessCapabilities:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    java.lang.String _arg1;
                    _arg1 = data.readString();
                    data.enforceNoDataAvail();
                    int _result = this.getUidProcessCapabilities(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                case TRANSACTION_waitForBroadcastIdle:
                {
                    this.waitForBroadcastIdle();
                    reply.writeNoException();
                    break;
                }
                case TRANSACTION_getBackgroundRestrictionExemptionReason:
                {
                    int _arg0;
                    _arg0 = data.readInt();
                    data.enforceNoDataAvail();
                    int _result = this.getBackgroundRestrictionExemptionReason(_arg0);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    break;
                }
                default:
                {
                    return super.onTransact(code, data, reply, flags);
                }
            }
            return true;
        }
//        private static class Proxy implements android.app.IActivityManager
//        {
//            private android.os.IBinder mRemote;
//            Proxy(android.os.IBinder remote)
//            {
//                mRemote = remote;
//            }
//            @Override public android.os.IBinder asBinder()
//            {
//                return mRemote;
//            }
//            public java.lang.String getInterfaceDescriptor()
//            {
//                return DESCRIPTOR;
//            }
//            // WARNING: when these transactions are updated, check if they are any callers on the native
//            // side. If so, make sure they are using the correct transaction ids and arguments.
//            // If a transaction which will also be used on the native side is being inserted, add it to
//            // below block of transactions.
//            // Since these transactions are also called from native code, these must be kept in sync with
//            // the ones in frameworks/native/libs/binder/include/binder/IActivityManager.h
//            // =============== Beginning of transactions used on native side as well ======================
//            @Override public android.os.ParcelFileDescriptor openContentUri(java.lang.String uriString) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.os.ParcelFileDescriptor _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(uriString);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_openContentUri, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.os.ParcelFileDescriptor.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void registerUidObserver(android.app.IUidObserver observer, int which, int cutpoint, java.lang.String callingPackage) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(observer);
//                    _data.writeInt(which);
//                    _data.writeInt(cutpoint);
//                    _data.writeString(callingPackage);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_registerUidObserver, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void unregisterUidObserver(android.app.IUidObserver observer) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(observer);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unregisterUidObserver, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean isUidActive(int uid, java.lang.String callingPackage) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(uid);
//                    _data.writeString(callingPackage);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isUidActive, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int getUidProcessState(int uid, java.lang.String callingPackage) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(uid);
//                    _data.writeString(callingPackage);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getUidProcessState, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int checkPermission(java.lang.String permission, int pid, int uid) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(permission);
//                    _data.writeInt(pid);
//                    _data.writeInt(uid);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_checkPermission, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // =============== End of transactions used on native side as well ============================
//            // Special low-level communication with activity manager.
//            @Override public void handleApplicationCrash(android.os.IBinder app, android.app.ApplicationErrorReport.ParcelableCrashInfo crashInfo) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(app);
//                    _data.writeTypedObject(crashInfo, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_handleApplicationCrash, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /** @deprecated Use {@link #startActivityWithFeature} instead */
//            @Override public int startActivity(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int flags, android.app.ProfilerInfo profilerInfo, android.os.Bundle options) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(callingPackage);
//                    _data.writeTypedObject(intent, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeStrongBinder(resultTo);
//                    _data.writeString(resultWho);
//                    _data.writeInt(requestCode);
//                    _data.writeInt(flags);
//                    _data.writeTypedObject(profilerInfo, 0);
//                    _data.writeTypedObject(options, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startActivity, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int startActivityWithFeature(android.app.IApplicationThread caller, java.lang.String callingPackage, java.lang.String callingFeatureId, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int flags, android.app.ProfilerInfo profilerInfo, android.os.Bundle options) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(callingPackage);
//                    _data.writeString(callingFeatureId);
//                    _data.writeTypedObject(intent, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeStrongBinder(resultTo);
//                    _data.writeString(resultWho);
//                    _data.writeInt(requestCode);
//                    _data.writeInt(flags);
//                    _data.writeTypedObject(profilerInfo, 0);
//                    _data.writeTypedObject(options, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startActivityWithFeature, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void unhandledBack() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unhandledBack, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean finishActivity(android.os.IBinder token, int code, android.content.Intent data, int finishTask) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(token);
//                    _data.writeInt(code);
//                    _data.writeTypedObject(data, 0);
//                    _data.writeInt(finishTask);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_finishActivity, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public android.content.Intent registerReceiver(android.app.IApplicationThread caller, java.lang.String callerPackage, android.content.IIntentReceiver receiver, android.content.IntentFilter filter, java.lang.String requiredPermission, int userId, int flags) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.Intent _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(callerPackage);
//                    _data.writeStrongInterface(receiver);
//                    _data.writeTypedObject(filter, 0);
//                    _data.writeString(requiredPermission);
//                    _data.writeInt(userId);
//                    _data.writeInt(flags);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_registerReceiver, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.content.Intent.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread caller, java.lang.String callerPackage, java.lang.String callingFeatureId, java.lang.String receiverId, android.content.IIntentReceiver receiver, android.content.IntentFilter filter, java.lang.String requiredPermission, int userId, int flags) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.Intent _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(callerPackage);
//                    _data.writeString(callingFeatureId);
//                    _data.writeString(receiverId);
//                    _data.writeStrongInterface(receiver);
//                    _data.writeTypedObject(filter, 0);
//                    _data.writeString(requiredPermission);
//                    _data.writeInt(userId);
//                    _data.writeInt(flags);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_registerReceiverWithFeature, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.content.Intent.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void unregisterReceiver(android.content.IIntentReceiver receiver) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(receiver);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unregisterReceiver, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /** @deprecated Use {@link #broadcastIntentWithFeature} instead */
//            @Override public int broadcastIntent(android.app.IApplicationThread caller, android.content.Intent intent, java.lang.String resolvedType, android.content.IIntentReceiver resultTo, int resultCode, java.lang.String resultData, android.os.Bundle map, java.lang.String[] requiredPermissions, int appOp, android.os.Bundle options, boolean serialized, boolean sticky, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeTypedObject(intent, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeStrongInterface(resultTo);
//                    _data.writeInt(resultCode);
//                    _data.writeString(resultData);
//                    _data.writeTypedObject(map, 0);
//                    _data.writeStringArray(requiredPermissions);
//                    _data.writeInt(appOp);
//                    _data.writeTypedObject(options, 0);
//                    _data.writeBoolean(serialized);
//                    _data.writeBoolean(sticky);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_broadcastIntent, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int broadcastIntentWithFeature(android.app.IApplicationThread caller, java.lang.String callingFeatureId, android.content.Intent intent, java.lang.String resolvedType, android.content.IIntentReceiver resultTo, int resultCode, java.lang.String resultData, android.os.Bundle map, java.lang.String[] requiredPermissions, java.lang.String[] excludePermissions, java.lang.String[] excludePackages, int appOp, android.os.Bundle options, boolean serialized, boolean sticky, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(callingFeatureId);
//                    _data.writeTypedObject(intent, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeStrongInterface(resultTo);
//                    _data.writeInt(resultCode);
//                    _data.writeString(resultData);
//                    _data.writeTypedObject(map, 0);
//                    _data.writeStringArray(requiredPermissions);
//                    _data.writeStringArray(excludePermissions);
//                    _data.writeStringArray(excludePackages);
//                    _data.writeInt(appOp);
//                    _data.writeTypedObject(options, 0);
//                    _data.writeBoolean(serialized);
//                    _data.writeBoolean(sticky);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_broadcastIntentWithFeature, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void unbroadcastIntent(android.app.IApplicationThread caller, android.content.Intent intent, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeTypedObject(intent, 0);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unbroadcastIntent, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void finishReceiver(android.os.IBinder who, int resultCode, java.lang.String resultData, android.os.Bundle map, boolean abortBroadcast, int flags) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(who);
//                    _data.writeInt(resultCode);
//                    _data.writeString(resultData);
//                    _data.writeTypedObject(map, 0);
//                    _data.writeBoolean(abortBroadcast);
//                    _data.writeInt(flags);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_finishReceiver, _data, null, android.os.IBinder.FLAG_ONEWAY);
//                }
//                finally {
//                    _data.recycle();
//                }
//            }
//            @Override public void attachApplication(android.app.IApplicationThread app, long startSeq) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(app);
//                    _data.writeLong(startSeq);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_attachApplication, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public java.util.List<android.app.ActivityManager.RunningTaskInfo> getTasks(int maxNum) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.util.List<android.app.ActivityManager.RunningTaskInfo> _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(maxNum);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getTasks, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createTypedArrayList(android.app.ActivityManager.RunningTaskInfo.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void moveTaskToFront(android.app.IApplicationThread caller, java.lang.String callingPackage, int task, int flags, android.os.Bundle options) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(callingPackage);
//                    _data.writeInt(task);
//                    _data.writeInt(flags);
//                    _data.writeTypedObject(options, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_moveTaskToFront, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public int getTaskForActivity(android.os.IBinder token, boolean onlyRoot) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(token);
//                    _data.writeBoolean(onlyRoot);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getTaskForActivity, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread caller, java.lang.String callingPackage, java.lang.String name, int userId, boolean stable) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.app.ContentProviderHolder _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(callingPackage);
//                    _data.writeString(name);
//                    _data.writeInt(userId);
//                    _data.writeBoolean(stable);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getContentProvider, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.app.ContentProviderHolder.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void publishContentProviders(android.app.IApplicationThread caller, java.util.List<android.app.ContentProviderHolder> providers) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeTypedList(providers, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_publishContentProviders, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean refContentProvider(android.os.IBinder connection, int stableDelta, int unstableDelta) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(connection);
//                    _data.writeInt(stableDelta);
//                    _data.writeInt(unstableDelta);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_refContentProvider, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName service) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.app.PendingIntent _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(service, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getRunningServiceControlPanel, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.app.PendingIntent.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public android.content.ComponentName startService(android.app.IApplicationThread caller, android.content.Intent service, java.lang.String resolvedType, boolean requireForeground, java.lang.String callingPackage, java.lang.String callingFeatureId, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.ComponentName _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeTypedObject(service, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeBoolean(requireForeground);
//                    _data.writeString(callingPackage);
//                    _data.writeString(callingFeatureId);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startService, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.content.ComponentName.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int stopService(android.app.IApplicationThread caller, android.content.Intent service, java.lang.String resolvedType, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeTypedObject(service, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_stopService, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // Currently keeping old bindService because it is on the greylist
//            @Override public int bindService(android.app.IApplicationThread caller, android.os.IBinder token, android.content.Intent service, java.lang.String resolvedType, android.app.IServiceConnection connection, int flags, java.lang.String callingPackage, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeStrongBinder(token);
//                    _data.writeTypedObject(service, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeStrongInterface(connection);
//                    _data.writeInt(flags);
//                    _data.writeString(callingPackage);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_bindService, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int bindServiceInstance(android.app.IApplicationThread caller, android.os.IBinder token, android.content.Intent service, java.lang.String resolvedType, android.app.IServiceConnection connection, int flags, java.lang.String instanceName, java.lang.String callingPackage, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeStrongBinder(token);
//                    _data.writeTypedObject(service, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeStrongInterface(connection);
//                    _data.writeInt(flags);
//                    _data.writeString(instanceName);
//                    _data.writeString(callingPackage);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_bindServiceInstance, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void updateServiceGroup(android.app.IServiceConnection connection, int group, int importance) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(connection);
//                    _data.writeInt(group);
//                    _data.writeInt(importance);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_updateServiceGroup, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean unbindService(android.app.IServiceConnection connection) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(connection);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unbindService, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void publishService(android.os.IBinder token, android.content.Intent intent, android.os.IBinder service) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(token);
//                    _data.writeTypedObject(intent, 0);
//                    _data.writeStrongBinder(service);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_publishService, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void setDebugApp(java.lang.String packageName, boolean waitForDebugger, boolean persistent) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeBoolean(waitForDebugger);
//                    _data.writeBoolean(persistent);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setDebugApp, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void setAgentApp(java.lang.String packageName, java.lang.String agent) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeString(agent);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setAgentApp, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void setAlwaysFinish(boolean enabled) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeBoolean(enabled);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setAlwaysFinish, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean startInstrumentation(android.content.ComponentName className, java.lang.String profileFile, int flags, android.os.Bundle arguments, android.app.IInstrumentationWatcher watcher, android.app.IUiAutomationConnection connection, int userId, java.lang.String abiOverride) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(className, 0);
//                    _data.writeString(profileFile);
//                    _data.writeInt(flags);
//                    _data.writeTypedObject(arguments, 0);
//                    _data.writeStrongInterface(watcher);
//                    _data.writeStrongInterface(connection);
//                    _data.writeInt(userId);
//                    _data.writeString(abiOverride);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startInstrumentation, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void addInstrumentationResults(android.app.IApplicationThread target, android.os.Bundle results) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(target);
//                    _data.writeTypedObject(results, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_addInstrumentationResults, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void finishInstrumentation(android.app.IApplicationThread target, int resultCode, android.os.Bundle results) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(target);
//                    _data.writeInt(resultCode);
//                    _data.writeTypedObject(results, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_finishInstrumentation, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * @return A copy of global {@link Configuration}, contains general settings for the entire
//             *         system. Corresponds to the configuration of the default display.
//             * @throws RemoteException
//             */
//            @Override public android.content.res.Configuration getConfiguration() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.res.Configuration _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getConfiguration, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.content.res.Configuration.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /**
//             * Updates global configuration and applies changes to the entire system.
//             * @param values Update values for global configuration. If null is passed it will request the
//             *               Window Manager to compute new config for the default display.
//             * @throws RemoteException
//             * @return Returns true if the configuration was updated.
//             */
//            @Override public boolean updateConfiguration(android.content.res.Configuration values) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(values, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_updateConfiguration, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /**
//             * Updates mcc mnc configuration and applies changes to the entire system.
//             *
//             * @param mcc mcc configuration to update.
//             * @param mnc mnc configuration to update.
//             * @throws RemoteException; IllegalArgumentException if mcc or mnc is null.
//             * @return Returns {@code true} if the configuration was updated;
//             *         {@code false} otherwise.
//             */
//            @Override public boolean updateMccMncConfiguration(java.lang.String mcc, java.lang.String mnc) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(mcc);
//                    _data.writeString(mnc);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_updateMccMncConfiguration, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public boolean stopServiceToken(android.content.ComponentName className, android.os.IBinder token, int startId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(className, 0);
//                    _data.writeStrongBinder(token);
//                    _data.writeInt(startId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_stopServiceToken, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void setProcessLimit(int max) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(max);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setProcessLimit, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public int getProcessLimit() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getProcessLimit, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int checkUriPermission(android.net.Uri uri, int pid, int uid, int mode, int userId, android.os.IBinder callerToken) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(uri, 0);
//                    _data.writeInt(pid);
//                    _data.writeInt(uid);
//                    _data.writeInt(mode);
//                    _data.writeInt(userId);
//                    _data.writeStrongBinder(callerToken);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_checkUriPermission, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int[] checkUriPermissions(java.util.List<android.net.Uri> uris, int pid, int uid, int mode, int userId, android.os.IBinder callerToken) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int[] _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedList(uris, 0);
//                    _data.writeInt(pid);
//                    _data.writeInt(uid);
//                    _data.writeInt(mode);
//                    _data.writeInt(userId);
//                    _data.writeStrongBinder(callerToken);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_checkUriPermissions, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createIntArray();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void grantUriPermission(android.app.IApplicationThread caller, java.lang.String targetPkg, android.net.Uri uri, int mode, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(targetPkg);
//                    _data.writeTypedObject(uri, 0);
//                    _data.writeInt(mode);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_grantUriPermission, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void revokeUriPermission(android.app.IApplicationThread caller, java.lang.String targetPkg, android.net.Uri uri, int mode, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(targetPkg);
//                    _data.writeTypedObject(uri, 0);
//                    _data.writeInt(mode);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_revokeUriPermission, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void setActivityController(android.app.IActivityController watcher, boolean imAMonkey) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(watcher);
//                    _data.writeBoolean(imAMonkey);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setActivityController, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void showWaitingForDebugger(android.app.IApplicationThread who, boolean waiting) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(who);
//                    _data.writeBoolean(waiting);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_showWaitingForDebugger, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * This will deliver the specified signal to all the persistent processes. Currently only
//             * SIGUSR1 is delivered. All others are ignored.
//             */
//            @Override public void signalPersistentProcesses(int signal) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(signal);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_signalPersistentProcesses, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public android.content.pm.ParceledListSlice getRecentTasks(int maxNum, int flags, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.pm.ParceledListSlice _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(maxNum);
//                    _data.writeInt(flags);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getRecentTasks, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void serviceDoneExecuting(android.os.IBinder token, int type, int startId, int res) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(token);
//                    _data.writeInt(type);
//                    _data.writeInt(startId);
//                    _data.writeInt(res);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_serviceDoneExecuting, _data, null, android.os.IBinder.FLAG_ONEWAY);
//                }
//                finally {
//                    _data.recycle();
//                }
//            }
//            /** @deprecated  Use {@link #getIntentSenderWithFeature} instead */
//            @Override public android.content.IIntentSender getIntentSender(int type, java.lang.String packageName, android.os.IBinder token, java.lang.String resultWho, int requestCode, android.content.Intent[] intents, java.lang.String[] resolvedTypes, int flags, android.os.Bundle options, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.IIntentSender _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(type);
//                    _data.writeString(packageName);
//                    _data.writeStrongBinder(token);
//                    _data.writeString(resultWho);
//                    _data.writeInt(requestCode);
//                    _data.writeTypedArray(intents, 0);
//                    _data.writeStringArray(resolvedTypes);
//                    _data.writeInt(flags);
//                    _data.writeTypedObject(options, 0);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getIntentSender, _data, _reply, 0);
//                    _reply.readException();
//                    _result = android.content.IIntentSender.Stub.asInterface(_reply.readStrongBinder());
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public android.content.IIntentSender getIntentSenderWithFeature(int type, java.lang.String packageName, java.lang.String featureId, android.os.IBinder token, java.lang.String resultWho, int requestCode, android.content.Intent[] intents, java.lang.String[] resolvedTypes, int flags, android.os.Bundle options, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.IIntentSender _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(type);
//                    _data.writeString(packageName);
//                    _data.writeString(featureId);
//                    _data.writeStrongBinder(token);
//                    _data.writeString(resultWho);
//                    _data.writeInt(requestCode);
//                    _data.writeTypedArray(intents, 0);
//                    _data.writeStringArray(resolvedTypes);
//                    _data.writeInt(flags);
//                    _data.writeTypedObject(options, 0);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getIntentSenderWithFeature, _data, _reply, 0);
//                    _reply.readException();
//                    _result = android.content.IIntentSender.Stub.asInterface(_reply.readStrongBinder());
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void cancelIntentSender(android.content.IIntentSender sender) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_cancelIntentSender, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public android.app.ActivityManager.PendingIntentInfo getInfoForIntentSender(android.content.IIntentSender sender) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.app.ActivityManager.PendingIntentInfo _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getInfoForIntentSender, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.app.ActivityManager.PendingIntentInfo.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /**
//             * This method used to be called registerIntentSenderCancelListener(), was void, and
//             * would call `receiver` if the PI has already been canceled.
//             * Now it returns false if the PI is cancelled, without calling `receiver`.
//             * The method was renamed to catch calls to the original method.
//             */
//            @Override public boolean registerIntentSenderCancelListenerEx(android.content.IIntentSender sender, com.android.internal.os.IResultReceiver receiver) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    _data.writeStrongInterface(receiver);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_registerIntentSenderCancelListenerEx, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void unregisterIntentSenderCancelListener(android.content.IIntentSender sender, com.android.internal.os.IResultReceiver receiver) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    _data.writeStrongInterface(receiver);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unregisterIntentSenderCancelListener, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void enterSafeMode() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_enterSafeMode, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void noteWakeupAlarm(android.content.IIntentSender sender, android.os.WorkSource workSource, int sourceUid, java.lang.String sourcePkg, java.lang.String tag) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    _data.writeTypedObject(workSource, 0);
//                    _data.writeInt(sourceUid);
//                    _data.writeString(sourcePkg);
//                    _data.writeString(tag);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_noteWakeupAlarm, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void removeContentProvider(android.os.IBinder connection, boolean stable) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(connection);
//                    _data.writeBoolean(stable);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_removeContentProvider, _data, null, android.os.IBinder.FLAG_ONEWAY);
//                }
//                finally {
//                    _data.recycle();
//                }
//            }
//            @Override public void setRequestedOrientation(android.os.IBinder token, int requestedOrientation) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(token);
//                    _data.writeInt(requestedOrientation);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setRequestedOrientation, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void unbindFinished(android.os.IBinder token, android.content.Intent service, boolean doRebind) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(token);
//                    _data.writeTypedObject(service, 0);
//                    _data.writeBoolean(doRebind);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unbindFinished, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void setProcessImportant(android.os.IBinder token, int pid, boolean isForeground, java.lang.String reason) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(token);
//                    _data.writeInt(pid);
//                    _data.writeBoolean(isForeground);
//                    _data.writeString(reason);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setProcessImportant, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void setServiceForeground(android.content.ComponentName className, android.os.IBinder token, int id, android.app.Notification notification, int flags, int foregroundServiceType) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(className, 0);
//                    _data.writeStrongBinder(token);
//                    _data.writeInt(id);
//                    _data.writeTypedObject(notification, 0);
//                    _data.writeInt(flags);
//                    _data.writeInt(foregroundServiceType);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setServiceForeground, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public int getForegroundServiceType(android.content.ComponentName className, android.os.IBinder token) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(className, 0);
//                    _data.writeStrongBinder(token);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getForegroundServiceType, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public boolean moveActivityTaskToBack(android.os.IBinder token, boolean nonRoot) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(token);
//                    _data.writeBoolean(nonRoot);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_moveActivityTaskToBack, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void getMemoryInfo(android.app.ActivityManager.MemoryInfo outInfo) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getMemoryInfo, _data, _reply, 0);
//                    _reply.readException();
//                    if ((0!=_reply.readInt())) {
//                        outInfo.readFromParcel(_reply);
//                    }
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public java.util.List<android.app.ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.util.List<android.app.ActivityManager.ProcessErrorStateInfo> _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getProcessesInErrorState, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createTypedArrayList(android.app.ActivityManager.ProcessErrorStateInfo.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public boolean clearApplicationUserData(java.lang.String packageName, boolean keepState, android.content.pm.IPackageDataObserver observer, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeBoolean(keepState);
//                    _data.writeStrongInterface(observer);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_clearApplicationUserData, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void stopAppForUser(java.lang.String packageName, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_stopAppForUser, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /** Returns {@code false} if the callback could not be registered, {@true} otherwise. */
//            @Override public boolean registerForegroundServiceObserver(android.app.IForegroundServiceObserver callback) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(callback);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_registerForegroundServiceObserver, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void forceStopPackage(java.lang.String packageName, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_forceStopPackage, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean killPids(int[] pids, java.lang.String reason, boolean secure) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeIntArray(pids);
//                    _data.writeString(reason);
//                    _data.writeBoolean(secure);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_killPids, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public java.util.List<android.app.ActivityManager.RunningServiceInfo> getServices(int maxNum, int flags) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.util.List<android.app.ActivityManager.RunningServiceInfo> _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(maxNum);
//                    _data.writeInt(flags);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getServices, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createTypedArrayList(android.app.ActivityManager.RunningServiceInfo.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // Retrieve running application processes in the system
//            @Override public java.util.List<android.app.ActivityManager.RunningAppProcessInfo> getRunningAppProcesses() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.util.List<android.app.ActivityManager.RunningAppProcessInfo> _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getRunningAppProcesses, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createTypedArrayList(android.app.ActivityManager.RunningAppProcessInfo.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public android.os.IBinder peekService(android.content.Intent service, java.lang.String resolvedType, java.lang.String callingPackage) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.os.IBinder _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(service, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeString(callingPackage);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_peekService, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readStrongBinder();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // Turn on/off profiling in a particular process.
//            @Override public boolean profileControl(java.lang.String process, int userId, boolean start, android.app.ProfilerInfo profilerInfo, int profileType) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(process);
//                    _data.writeInt(userId);
//                    _data.writeBoolean(start);
//                    _data.writeTypedObject(profilerInfo, 0);
//                    _data.writeInt(profileType);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_profileControl, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public boolean shutdown(int timeout) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(timeout);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_shutdown, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void stopAppSwitches() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_stopAppSwitches, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void resumeAppSwitches() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_resumeAppSwitches, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean bindBackupAgent(java.lang.String packageName, int backupRestoreMode, int targetUserId, int operationType) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeInt(backupRestoreMode);
//                    _data.writeInt(targetUserId);
//                    _data.writeInt(operationType);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_bindBackupAgent, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void backupAgentCreated(java.lang.String packageName, android.os.IBinder agent, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeStrongBinder(agent);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_backupAgentCreated, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void unbindBackupAgent(android.content.pm.ApplicationInfo appInfo) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(appInfo, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unbindBackupAgent, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll, boolean requireFull, java.lang.String name, java.lang.String callerPackage) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(callingPid);
//                    _data.writeInt(callingUid);
//                    _data.writeInt(userId);
//                    _data.writeBoolean(allowAll);
//                    _data.writeBoolean(requireFull);
//                    _data.writeString(name);
//                    _data.writeString(callerPackage);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_handleIncomingUser, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void addPackageDependency(java.lang.String packageName) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_addPackageDependency, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void killApplication(java.lang.String pkg, int appId, int userId, java.lang.String reason) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(pkg);
//                    _data.writeInt(appId);
//                    _data.writeInt(userId);
//                    _data.writeString(reason);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_killApplication, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void closeSystemDialogs(java.lang.String reason) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(reason);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_closeSystemDialogs, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public android.os.Debug.MemoryInfo[] getProcessMemoryInfo(int[] pids) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.os.Debug.MemoryInfo[] _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeIntArray(pids);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getProcessMemoryInfo, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createTypedArray(android.os.Debug.MemoryInfo.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void killApplicationProcess(java.lang.String processName, int uid) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(processName);
//                    _data.writeInt(uid);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_killApplicationProcess, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            // Special low-level communication with activity manager.
//            @Override public boolean handleApplicationWtf(android.os.IBinder app, java.lang.String tag, boolean system, android.app.ApplicationErrorReport.ParcelableCrashInfo crashInfo, int immediateCallerPid) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(app);
//                    _data.writeString(tag);
//                    _data.writeBoolean(system);
//                    _data.writeTypedObject(crashInfo, 0);
//                    _data.writeInt(immediateCallerPid);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_handleApplicationWtf, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void killBackgroundProcesses(java.lang.String packageName, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_killBackgroundProcesses, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean isUserAMonkey() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isUserAMonkey, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // Retrieve info of applications installed on external media that are currently
//            // running.
//            @Override public java.util.List<android.content.pm.ApplicationInfo> getRunningExternalApplications() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.util.List<android.content.pm.ApplicationInfo> _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getRunningExternalApplications, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createTypedArrayList(android.content.pm.ApplicationInfo.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void finishHeavyWeightApp() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_finishHeavyWeightApp, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            // A StrictMode violation to be handled.
//            @Override public void handleApplicationStrictModeViolation(android.os.IBinder app, int penaltyMask, android.os.StrictMode.ViolationInfo crashInfo) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(app);
//                    _data.writeInt(penaltyMask);
//                    _data.writeTypedObject(crashInfo, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_handleApplicationStrictModeViolation, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean isTopActivityImmersive() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isTopActivityImmersive, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void crashApplicationWithType(int uid, int initialPid, java.lang.String packageName, int userId, java.lang.String message, boolean force, int exceptionTypeId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(uid);
//                    _data.writeInt(initialPid);
//                    _data.writeString(packageName);
//                    _data.writeInt(userId);
//                    _data.writeString(message);
//                    _data.writeBoolean(force);
//                    _data.writeInt(exceptionTypeId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_crashApplicationWithType, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void crashApplicationWithTypeWithExtras(int uid, int initialPid, java.lang.String packageName, int userId, java.lang.String message, boolean force, int exceptionTypeId, android.os.Bundle extras) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(uid);
//                    _data.writeInt(initialPid);
//                    _data.writeString(packageName);
//                    _data.writeInt(userId);
//                    _data.writeString(message);
//                    _data.writeBoolean(force);
//                    _data.writeInt(exceptionTypeId);
//                    _data.writeTypedObject(extras, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_crashApplicationWithTypeWithExtras, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /** @deprecated -- use getProviderMimeTypeAsync */
//            @Override public java.lang.String getProviderMimeType(android.net.Uri uri, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.lang.String _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(uri, 0);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getProviderMimeType, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readString();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void getProviderMimeTypeAsync(android.net.Uri uri, int userId, android.os.RemoteCallback resultCallback) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(uri, 0);
//                    _data.writeInt(userId);
//                    _data.writeTypedObject(resultCallback, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getProviderMimeTypeAsync, _data, null, android.os.IBinder.FLAG_ONEWAY);
//                }
//                finally {
//                    _data.recycle();
//                }
//            }
//            // Cause the specified process to dump the specified heap.
//            @Override public boolean dumpHeap(java.lang.String process, int userId, boolean managed, boolean mallocInfo, boolean runGc, java.lang.String path, android.os.ParcelFileDescriptor fd, android.os.RemoteCallback finishCallback) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(process);
//                    _data.writeInt(userId);
//                    _data.writeBoolean(managed);
//                    _data.writeBoolean(mallocInfo);
//                    _data.writeBoolean(runGc);
//                    _data.writeString(path);
//                    _data.writeTypedObject(fd, 0);
//                    _data.writeTypedObject(finishCallback, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_dumpHeap, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public boolean isUserRunning(int userid, int flags) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userid);
//                    _data.writeInt(flags);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isUserRunning, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void setPackageScreenCompatMode(java.lang.String packageName, int mode) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeInt(mode);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setPackageScreenCompatMode, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean switchUser(int userid) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userid);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_switchUser, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public java.lang.String getSwitchingFromUserMessage() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.lang.String _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getSwitchingFromUserMessage, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readString();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public java.lang.String getSwitchingToUserMessage() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.lang.String _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getSwitchingToUserMessage, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readString();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void setStopUserOnSwitch(int value) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(value);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setStopUserOnSwitch, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean removeTask(int taskId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(taskId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_removeTask, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void registerProcessObserver(android.app.IProcessObserver observer) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(observer);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_registerProcessObserver, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void unregisterProcessObserver(android.app.IProcessObserver observer) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(observer);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unregisterProcessObserver, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean isIntentSenderTargetedToPackage(android.content.IIntentSender sender) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isIntentSenderTargetedToPackage, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void updatePersistentConfiguration(android.content.res.Configuration values) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(values, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_updatePersistentConfiguration, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void updatePersistentConfigurationWithAttribution(android.content.res.Configuration values, java.lang.String callingPackageName, java.lang.String callingAttributionTag) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(values, 0);
//                    _data.writeString(callingPackageName);
//                    _data.writeString(callingAttributionTag);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_updatePersistentConfigurationWithAttribution, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public long[] getProcessPss(int[] pids) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                long[] _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeIntArray(pids);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getProcessPss, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createLongArray();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void showBootMessage(java.lang.CharSequence msg, boolean always) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    if (msg!=null) {
//                        _data.writeInt(1);
//                        android.text.TextUtils.writeToParcel(msg, _data, 0);
//                    }
//                    else {
//                        _data.writeInt(0);
//                    }
//                    _data.writeBoolean(always);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_showBootMessage, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void killAllBackgroundProcesses() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_killAllBackgroundProcesses, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public android.app.ContentProviderHolder getContentProviderExternal(java.lang.String name, int userId, android.os.IBinder token, java.lang.String tag) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.app.ContentProviderHolder _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(name);
//                    _data.writeInt(userId);
//                    _data.writeStrongBinder(token);
//                    _data.writeString(tag);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getContentProviderExternal, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.app.ContentProviderHolder.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /** @deprecated - Use {@link #removeContentProviderExternalAsUser} which takes a user ID. */
//            @Override public void removeContentProviderExternal(java.lang.String name, android.os.IBinder token) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(name);
//                    _data.writeStrongBinder(token);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_removeContentProviderExternal, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void removeContentProviderExternalAsUser(java.lang.String name, android.os.IBinder token, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(name);
//                    _data.writeStrongBinder(token);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_removeContentProviderExternalAsUser, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            // Get memory information about the calling process.
//            @Override public void getMyMemoryState(android.app.ActivityManager.RunningAppProcessInfo outInfo) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getMyMemoryState, _data, _reply, 0);
//                    _reply.readException();
//                    if ((0!=_reply.readInt())) {
//                        outInfo.readFromParcel(_reply);
//                    }
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean killProcessesBelowForeground(java.lang.String reason) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(reason);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_killProcessesBelowForeground, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public android.content.pm.UserInfo getCurrentUser() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.pm.UserInfo _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getCurrentUser, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.content.pm.UserInfo.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int getCurrentUserId() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getCurrentUserId, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // This is not public because you need to be very careful in how you
//            // manage your activity to make sure it is always the uid you expect.
//            @Override public int getLaunchedFromUid(android.os.IBinder activityToken) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(activityToken);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getLaunchedFromUid, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void unstableProviderDied(android.os.IBinder connection) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(connection);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unstableProviderDied, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean isIntentSenderAnActivity(android.content.IIntentSender sender) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isIntentSenderAnActivity, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /** @deprecated Use {@link startActivityAsUserWithFeature} instead */
//            @Override public int startActivityAsUser(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int flags, android.app.ProfilerInfo profilerInfo, android.os.Bundle options, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(callingPackage);
//                    _data.writeTypedObject(intent, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeStrongBinder(resultTo);
//                    _data.writeString(resultWho);
//                    _data.writeInt(requestCode);
//                    _data.writeInt(flags);
//                    _data.writeTypedObject(profilerInfo, 0);
//                    _data.writeTypedObject(options, 0);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startActivityAsUser, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int startActivityAsUserWithFeature(android.app.IApplicationThread caller, java.lang.String callingPackage, java.lang.String callingFeatureId, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int flags, android.app.ProfilerInfo profilerInfo, android.os.Bundle options, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(caller);
//                    _data.writeString(callingPackage);
//                    _data.writeString(callingFeatureId);
//                    _data.writeTypedObject(intent, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeStrongBinder(resultTo);
//                    _data.writeString(resultWho);
//                    _data.writeInt(requestCode);
//                    _data.writeInt(flags);
//                    _data.writeTypedObject(profilerInfo, 0);
//                    _data.writeTypedObject(options, 0);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startActivityAsUserWithFeature, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int stopUser(int userid, boolean force, android.app.IStopUserCallback callback) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userid);
//                    _data.writeBoolean(force);
//                    _data.writeStrongInterface(callback);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_stopUser, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /**
//             * Check {@link com.android.server.am.ActivityManagerService#stopUserWithDelayedLocking(int, boolean, IStopUserCallback)}
//             * for details.
//             */
//            @Override public int stopUserWithDelayedLocking(int userid, boolean force, android.app.IStopUserCallback callback) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userid);
//                    _data.writeBoolean(force);
//                    _data.writeStrongInterface(callback);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_stopUserWithDelayedLocking, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void registerUserSwitchObserver(android.app.IUserSwitchObserver observer, java.lang.String name) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(observer);
//                    _data.writeString(name);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_registerUserSwitchObserver, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void unregisterUserSwitchObserver(android.app.IUserSwitchObserver observer) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(observer);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unregisterUserSwitchObserver, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public int[] getRunningUserIds() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int[] _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getRunningUserIds, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createIntArray();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // Request a heap dump for the system server.
//            @Override public void requestSystemServerHeapDump() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_requestSystemServerHeapDump, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void requestBugReport(int bugreportType) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(bugreportType);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_requestBugReport, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void requestBugReportWithDescription(java.lang.String shareTitle, java.lang.String shareDescription, int bugreportType) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(shareTitle);
//                    _data.writeString(shareDescription);
//                    _data.writeInt(bugreportType);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_requestBugReportWithDescription, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             *  Takes a telephony bug report and notifies the user with the title and description
//             *  that are passed to this API as parameters
//             *
//             *  @param shareTitle should be a valid legible string less than 50 chars long
//             *  @param shareDescription should be less than 150 chars long
//             *
//             *  @throws IllegalArgumentException if shareTitle or shareDescription is too big or if the
//             *          paremeters cannot be encoding to an UTF-8 charset.
//             */
//            @Override public void requestTelephonyBugReport(java.lang.String shareTitle, java.lang.String shareDescription) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(shareTitle);
//                    _data.writeString(shareDescription);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_requestTelephonyBugReport, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             *  This method is only used by Wifi.
//             *
//             *  Takes a minimal bugreport of Wifi-related state.
//             *
//             *  @param shareTitle should be a valid legible string less than 50 chars long
//             *  @param shareDescription should be less than 150 chars long
//             *
//             *  @throws IllegalArgumentException if shareTitle or shareDescription is too big or if the
//             *          parameters cannot be encoding to an UTF-8 charset.
//             */
//            @Override public void requestWifiBugReport(java.lang.String shareTitle, java.lang.String shareDescription) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(shareTitle);
//                    _data.writeString(shareDescription);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_requestWifiBugReport, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void requestInteractiveBugReportWithDescription(java.lang.String shareTitle, java.lang.String shareDescription) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(shareTitle);
//                    _data.writeString(shareDescription);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_requestInteractiveBugReportWithDescription, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void requestInteractiveBugReport() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_requestInteractiveBugReport, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void requestFullBugReport() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_requestFullBugReport, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void requestRemoteBugReport(long nonce) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeLong(nonce);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_requestRemoteBugReport, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean launchBugReportHandlerApp() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_launchBugReportHandlerApp, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public java.util.List<java.lang.String> getBugreportWhitelistedPackages() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.util.List<java.lang.String> _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getBugreportWhitelistedPackages, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createStringArrayList();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public android.content.Intent getIntentForIntentSender(android.content.IIntentSender sender) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.Intent _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getIntentForIntentSender, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.content.Intent.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // This is not public because you need to be very careful in how you
//            // manage your activity to make sure it is always the uid you expect.
//            @Override public java.lang.String getLaunchedFromPackage(android.os.IBinder activityToken) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.lang.String _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(activityToken);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getLaunchedFromPackage, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readString();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void killUid(int appId, int userId, java.lang.String reason) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(appId);
//                    _data.writeInt(userId);
//                    _data.writeString(reason);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_killUid, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void setUserIsMonkey(boolean monkey) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeBoolean(monkey);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setUserIsMonkey, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void hang(android.os.IBinder who, boolean allowRestart) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(who);
//                    _data.writeBoolean(allowRestart);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_hang, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public java.util.List<android.app.ActivityTaskManager.RootTaskInfo> getAllRootTaskInfos() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.util.List<android.app.ActivityTaskManager.RootTaskInfo> _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getAllRootTaskInfos, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createTypedArrayList(android.app.ActivityTaskManager.RootTaskInfo.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void moveTaskToRootTask(int taskId, int rootTaskId, boolean toTop) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(taskId);
//                    _data.writeInt(rootTaskId);
//                    _data.writeBoolean(toTop);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_moveTaskToRootTask, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void setFocusedRootTask(int taskId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(taskId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setFocusedRootTask, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public android.app.ActivityTaskManager.RootTaskInfo getFocusedRootTaskInfo() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.app.ActivityTaskManager.RootTaskInfo _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getFocusedRootTaskInfo, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.app.ActivityTaskManager.RootTaskInfo.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void restart() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_restart, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void performIdleMaintenance() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_performIdleMaintenance, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void appNotRespondingViaProvider(android.os.IBinder connection) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(connection);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_appNotRespondingViaProvider, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public android.graphics.Rect getTaskBounds(int taskId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.graphics.Rect _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(taskId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getTaskBounds, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.graphics.Rect.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public boolean setProcessMemoryTrimLevel(java.lang.String process, int userId, int level) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(process);
//                    _data.writeInt(userId);
//                    _data.writeInt(level);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setProcessMemoryTrimLevel, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // Start of L transactions
//            @Override public java.lang.String getTagForIntentSender(android.content.IIntentSender sender, java.lang.String prefix) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.lang.String _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    _data.writeString(prefix);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getTagForIntentSender, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readString();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public boolean startUserInBackground(int userid) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userid);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startUserInBackground, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public boolean isInLockTaskMode() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isInLockTaskMode, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int startActivityFromRecents(int taskId, android.os.Bundle options) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(taskId);
//                    _data.writeTypedObject(options, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startActivityFromRecents, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void startSystemLockTaskMode(int taskId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(taskId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startSystemLockTaskMode, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean isTopOfTask(android.os.IBinder token) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(token);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isTopOfTask, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void bootAnimationComplete() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_bootAnimationComplete, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void registerTaskStackListener(android.app.ITaskStackListener listener) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(listener);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_registerTaskStackListener, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void unregisterTaskStackListener(android.app.ITaskStackListener listener) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(listener);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unregisterTaskStackListener, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void notifyCleartextNetwork(int uid, byte[] firstPacket) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(uid);
//                    _data.writeByteArray(firstPacket);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_notifyCleartextNetwork, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void setTaskResizeable(int taskId, int resizeableMode) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(taskId);
//                    _data.writeInt(resizeableMode);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setTaskResizeable, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void resizeTask(int taskId, android.graphics.Rect bounds, int resizeMode) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(taskId);
//                    _data.writeTypedObject(bounds, 0);
//                    _data.writeInt(resizeMode);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_resizeTask, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public int getLockTaskModeState() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getLockTaskModeState, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void setDumpHeapDebugLimit(java.lang.String processName, int uid, long maxMemSize, java.lang.String reportPackage) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(processName);
//                    _data.writeInt(uid);
//                    _data.writeLong(maxMemSize);
//                    _data.writeString(reportPackage);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setDumpHeapDebugLimit, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void dumpHeapFinished(java.lang.String path) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(path);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_dumpHeapFinished, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void updateLockTaskPackages(int userId, java.lang.String[] packages) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userId);
//                    _data.writeStringArray(packages);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_updateLockTaskPackages, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void noteAlarmStart(android.content.IIntentSender sender, android.os.WorkSource workSource, int sourceUid, java.lang.String tag) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    _data.writeTypedObject(workSource, 0);
//                    _data.writeInt(sourceUid);
//                    _data.writeString(tag);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_noteAlarmStart, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void noteAlarmFinish(android.content.IIntentSender sender, android.os.WorkSource workSource, int sourceUid, java.lang.String tag) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    _data.writeTypedObject(workSource, 0);
//                    _data.writeInt(sourceUid);
//                    _data.writeString(tag);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_noteAlarmFinish, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public int getPackageProcessState(java.lang.String packageName, java.lang.String callingPackage) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeString(callingPackage);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getPackageProcessState, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // Start of N transactions
//            // Start Binder transaction tracking for all applications.
//            @Override public boolean startBinderTracking() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startBinderTracking, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // Stop Binder transaction tracking for all applications and dump trace data to the given file
//            // descriptor.
//            @Override public boolean stopBinderTrackingAndDump(android.os.ParcelFileDescriptor fd) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(fd, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_stopBinderTrackingAndDump, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void suppressResizeConfigChanges(boolean suppress) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeBoolean(suppress);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_suppressResizeConfigChanges, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public boolean unlockUser(int userid, byte[] token, byte[] secret, android.os.IProgressListener listener) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userid);
//                    _data.writeByteArray(token);
//                    _data.writeByteArray(secret);
//                    _data.writeStrongInterface(listener);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_unlockUser, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void killPackageDependents(java.lang.String packageName, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_killPackageDependents, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void makePackageIdle(java.lang.String packageName, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_makePackageIdle, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public int getMemoryTrimLevel() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getMemoryTrimLevel, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public boolean isVrModePackageEnabled(android.content.ComponentName packageName) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(packageName, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isVrModePackageEnabled, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public void notifyLockedProfile(int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_notifyLockedProfile, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void startConfirmDeviceCredentialIntent(android.content.Intent intent, android.os.Bundle options) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(intent, 0);
//                    _data.writeTypedObject(options, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startConfirmDeviceCredentialIntent, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void sendIdleJobTrigger() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_sendIdleJobTrigger, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public int sendIntentSender(android.content.IIntentSender target, android.os.IBinder whitelistToken, int code, android.content.Intent intent, java.lang.String resolvedType, android.content.IIntentReceiver finishedReceiver, java.lang.String requiredPermission, android.os.Bundle options) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(target);
//                    _data.writeStrongBinder(whitelistToken);
//                    _data.writeInt(code);
//                    _data.writeTypedObject(intent, 0);
//                    _data.writeString(resolvedType);
//                    _data.writeStrongInterface(finishedReceiver);
//                    _data.writeString(requiredPermission);
//                    _data.writeTypedObject(options, 0);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_sendIntentSender, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public boolean isBackgroundRestricted(java.lang.String packageName) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isBackgroundRestricted, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            // Start of N MR1 transactions
//            @Override public void setRenderThread(int tid) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(tid);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setRenderThread, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * Lets activity manager know whether the calling process is currently showing "top-level" UI
//             * that is not an activity, i.e. windows on the screen the user is currently interacting with.
//             *
//             * <p>This flag can only be set for persistent processes.
//             *
//             * @param hasTopUi Whether the calling process has "top-level" UI.
//             */
//            @Override public void setHasTopUi(boolean hasTopUi) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeBoolean(hasTopUi);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setHasTopUi, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            // Start of O transactions
//            @Override public int restartUserInBackground(int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_restartUserInBackground, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /** Cancels the window transitions for the given task. */
//            @Override public void cancelTaskWindowTransition(int taskId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(taskId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_cancelTaskWindowTransition, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void scheduleApplicationInfoChanged(java.util.List<java.lang.String> packageNames, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStringList(packageNames);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_scheduleApplicationInfoChanged, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void setPersistentVrThread(int tid) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(tid);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setPersistentVrThread, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            @Override public void waitForNetworkStateUpdate(long procStateSeq) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeLong(procStateSeq);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_waitForNetworkStateUpdate, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /** Add a bare uid to the background restrictions whitelist.  Only the system uid may call this. */
//            @Override public void backgroundAllowlistUid(int uid) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(uid);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_backgroundAllowlistUid, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            // Start of P transactions
//            /**
//             *  Similar to {@link #startUserInBackground(int userId), but with a listener to report
//             *  user unlock progress.
//             */
//            @Override public boolean startUserInBackgroundWithListener(int userid, android.os.IProgressListener unlockProgressListener) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userid);
//                    _data.writeStrongInterface(unlockProgressListener);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startUserInBackgroundWithListener, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /**
//             * Method for the shell UID to start deletating its permission identity to an
//             * active instrumenation. The shell can delegate permissions only to one active
//             * instrumentation at a time. An active instrumentation is one running and
//             * started from the shell.
//             */
//            @Override public void startDelegateShellPermissionIdentity(int uid, java.lang.String[] permissions) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(uid);
//                    _data.writeStringArray(permissions);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startDelegateShellPermissionIdentity, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * Method for the shell UID to stop deletating its permission identity to an
//             * active instrumenation. An active instrumentation is one running and
//             * started from the shell.
//             */
//            @Override public void stopDelegateShellPermissionIdentity() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_stopDelegateShellPermissionIdentity, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * Method for the shell UID to get currently adopted permissions for an active instrumentation.
//             * An active instrumentation is one running and started from the shell.
//             */
//            @Override public java.util.List<java.lang.String> getDelegatedShellPermissions() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                java.util.List<java.lang.String> _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getDelegatedShellPermissions, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.createStringArrayList();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /** Returns a file descriptor that'll be closed when the system server process dies. */
//            @Override public android.os.ParcelFileDescriptor getLifeMonitor() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.os.ParcelFileDescriptor _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getLifeMonitor, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.os.ParcelFileDescriptor.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /**
//             * Start user, if it us not already running, and bring it to foreground.
//             * unlockProgressListener can be null if monitoring progress is not necessary.
//             */
//            @Override public boolean startUserInForegroundWithListener(int userid, android.os.IProgressListener unlockProgressListener) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userid);
//                    _data.writeStrongInterface(unlockProgressListener);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startUserInForegroundWithListener, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /** Method for the app to tell system that it's wedged and would like to trigger an ANR. */
//            @Override public void appNotResponding(java.lang.String reason) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(reason);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_appNotResponding, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * Return a list of {@link ApplicationExitInfo} records.
//             *
//             * <p class="note"> Note: System stores these historical information in a ring buffer, older
//             * records would be overwritten by newer records. </p>
//             *
//             * <p class="note"> Note: In the case that this application bound to an external service with
//             * flag {@link android.content.Context#BIND_EXTERNAL_SERVICE}, the process of that external
//             * service will be included in this package's exit info. </p>
//             *
//             * @param packageName Optional, an empty value means match all packages belonging to the
//             *                    caller's UID. If this package belongs to another UID, you must hold
//             *                    {@link android.Manifest.permission#DUMP} in order to retrieve it.
//             * @param pid         Optional, it could be a process ID that used to belong to this package but
//             *                    died later; A value of 0 means to ignore this parameter and return all
//             *                    matching records.
//             * @param maxNum      Optional, the maximum number of results should be returned; A value of 0
//             *                    means to ignore this parameter and return all matching records
//             * @param userId      The userId in the multi-user environment.
//             *
//             * @return a list of {@link ApplicationExitInfo} records with the matching criteria, sorted in
//             *         the order from most recent to least recent.
//             */
//            @Override public android.content.pm.ParceledListSlice<android.app.ApplicationExitInfo> getHistoricalProcessExitReasons(java.lang.String packageName, int pid, int maxNum, int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.pm.ParceledListSlice<android.app.ApplicationExitInfo> _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeString(packageName);
//                    _data.writeInt(pid);
//                    _data.writeInt(maxNum);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getHistoricalProcessExitReasons, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /**
//             * Kill the given PIDs, but the killing will be delayed until the device is idle
//             * and the given process is imperceptible.
//             */
//            @Override public void killProcessesWhenImperceptible(int[] pids, java.lang.String reason) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeIntArray(pids);
//                    _data.writeString(reason);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_killProcessesWhenImperceptible, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * Set locus context for a given activity.
//             * @param activity
//             * @param locusId a unique, stable id that identifies this activity instance from others.
//             * @param appToken ActivityRecord's appToken.
//             */
//            @Override public void setActivityLocusContext(android.content.ComponentName activity, android.content.LocusId locusId, android.os.IBinder appToken) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeTypedObject(activity, 0);
//                    _data.writeTypedObject(locusId, 0);
//                    _data.writeStrongBinder(appToken);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setActivityLocusContext, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * Set custom state data for this process. It will be included in the record of
//             * {@link ApplicationExitInfo} on the death of the current calling process; the new process
//             * of the app can retrieve this state data by calling
//             * {@link ApplicationExitInfo#getProcessStateSummary} on the record returned by
//             * {@link #getHistoricalProcessExitReasons}.
//             *
//             * <p> This would be useful for the calling app to save its stateful data: if it's
//             * killed later for any reason, the new process of the app can know what the
//             * previous process of the app was doing. For instance, you could use this to encode
//             * the current level in a game, or a set of features/experiments that were enabled. Later you
//             * could analyze under what circumstances the app tends to crash or use too much memory.
//             * However, it's not suggested to rely on this to restore the applications previous UI state
//             * or so, it's only meant for analyzing application healthy status.</p>
//             *
//             * <p> System might decide to throttle the calls to this API; so call this API in a reasonable
//             * manner, excessive calls to this API could result a {@link java.lang.RuntimeException}.
//             * </p>
//             *
//             * @param state The customized state data
//             */
//            @Override public void setProcessStateSummary(byte[] state) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeByteArray(state);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_setProcessStateSummary, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /** Return whether the app freezer is supported (true) or not (false) by this system. */
//            @Override public boolean isAppFreezerSupported() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isAppFreezerSupported, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /** Return whether the app freezer is enabled (true) or not (false) by this system. */
//            @Override public boolean isAppFreezerEnabled() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_isAppFreezerEnabled, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /** Kills uid with the reason of permission change. */
//            @Override public void killUidForPermissionChange(int appId, int userId, java.lang.String reason) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(appId);
//                    _data.writeInt(userId);
//                    _data.writeString(reason);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_killUidForPermissionChange, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * Resets the state of the {@link com.android.server.am.AppErrors} instance.
//             * This is intended for testing within the CTS only and is protected by
//             * android.permission.RESET_APP_ERRORS.
//             */
//            @Override public void resetAppErrors() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_resetAppErrors, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * Control the app freezer state. Returns true in case of success, false if the operation
//             * didn't succeed (for example, when the app freezer isn't supported).
//             * Handling the freezer state via this method is reentrant, that is it can be
//             * disabled and re-enabled multiple times in parallel. As long as there's a 1:1 disable to
//             * enable match, the freezer is re-enabled at last enable only.
//             * @param enable set it to true to enable the app freezer, false to disable it.
//             */
//            @Override public boolean enableAppFreezer(boolean enable) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeBoolean(enable);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_enableAppFreezer, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /**
//             * Suppress or reenable the rate limit on foreground service notification deferral.
//             * This is for use within CTS and is protected by android.permission.WRITE_DEVICE_CONFIG.
//             *
//             * @param enable false to suppress rate-limit policy; true to reenable it.
//             */
//            @Override public boolean enableFgsNotificationRateLimit(boolean enable) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeBoolean(enable);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_enableFgsNotificationRateLimit, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /**
//             * Holds the AM lock for the specified amount of milliseconds.
//             * This is intended for use by the tests that need to imitate lock contention.
//             * The token should be obtained by
//             * {@link android.content.pm.PackageManager#getHoldLockToken()}.
//             */
//            @Override public void holdLock(android.os.IBinder token, int durationMs) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongBinder(token);
//                    _data.writeInt(durationMs);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_holdLock, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * Starts a profile.
//             * @param userId the user id of the profile.
//             * @return true if the profile has been successfully started or if the profile is already
//             * running, false if profile failed to start.
//             * @throws IllegalArgumentException if the user is not a profile.
//             */
//            @Override public boolean startProfile(int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_startProfile, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /**
//             * Stops a profile.
//             * @param userId the user id of the profile.
//             * @return true if the profile has been successfully stopped or is already stopped. Otherwise
//             * the exceptions listed below are thrown.
//             * @throws IllegalArgumentException if the user is not a profile.
//             */
//            @Override public boolean stopProfile(int userId) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                boolean _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(userId);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_stopProfile, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readBoolean();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /** Called by PendingIntent.queryIntentComponents() */
//            @Override public android.content.pm.ParceledListSlice queryIntentComponentsForIntentSender(android.content.IIntentSender sender, int matchFlags) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                android.content.pm.ParceledListSlice _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeStrongInterface(sender);
//                    _data.writeInt(matchFlags);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_queryIntentComponentsForIntentSender, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readTypedObject(android.content.pm.ParceledListSlice.CREATOR);
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            @Override public int getUidProcessCapabilities(int uid, java.lang.String callingPackage) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(uid);
//                    _data.writeString(callingPackage);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getUidProcessCapabilities, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//            /** Blocks until all broadcast queues become idle. */
//            @Override public void waitForBroadcastIdle() throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_waitForBroadcastIdle, _data, _reply, 0);
//                    _reply.readException();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//            }
//            /**
//             * @return The reason code of whether or not the given UID should be exempted from background
//             * restrictions here.
//             *
//             * <p>
//             * Note: Call it with caution as it'll try to acquire locks in other services.
//             * </p>
//             */
//            @Override public int getBackgroundRestrictionExemptionReason(int uid) throws android.os.RemoteException
//            {
//                android.os.Parcel _data = android.os.Parcel.obtain(asBinder());
//                android.os.Parcel _reply = android.os.Parcel.obtain();
//                int _result;
//                try {
//                    _data.writeInterfaceToken(DESCRIPTOR);
//                    _data.writeInt(uid);
//                    boolean _status = mRemote.transact(Stub.TRANSACTION_getBackgroundRestrictionExemptionReason, _data, _reply, 0);
//                    _reply.readException();
//                    _result = _reply.readInt();
//                }
//                finally {
//                    _reply.recycle();
//                    _data.recycle();
//                }
//                return _result;
//            }
//        }
        public static final java.lang.String DESCRIPTOR = "android.app.IActivityManager";
        static final int TRANSACTION_openContentUri = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);
        static final int TRANSACTION_registerUidObserver = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);
        static final int TRANSACTION_unregisterUidObserver = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);
        static final int TRANSACTION_isUidActive = (android.os.IBinder.FIRST_CALL_TRANSACTION + 3);
        static final int TRANSACTION_getUidProcessState = (android.os.IBinder.FIRST_CALL_TRANSACTION + 4);
        static final int TRANSACTION_checkPermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 5);
        static final int TRANSACTION_handleApplicationCrash = (android.os.IBinder.FIRST_CALL_TRANSACTION + 6);
        static final int TRANSACTION_startActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 7);
        static final int TRANSACTION_startActivityWithFeature = (android.os.IBinder.FIRST_CALL_TRANSACTION + 8);
        static final int TRANSACTION_unhandledBack = (android.os.IBinder.FIRST_CALL_TRANSACTION + 9);
        static final int TRANSACTION_finishActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 10);
        static final int TRANSACTION_registerReceiver = (android.os.IBinder.FIRST_CALL_TRANSACTION + 11);
        static final int TRANSACTION_registerReceiverWithFeature = (android.os.IBinder.FIRST_CALL_TRANSACTION + 12);
        static final int TRANSACTION_unregisterReceiver = (android.os.IBinder.FIRST_CALL_TRANSACTION + 13);
        static final int TRANSACTION_broadcastIntent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 14);
        static final int TRANSACTION_broadcastIntentWithFeature = (android.os.IBinder.FIRST_CALL_TRANSACTION + 15);
        static final int TRANSACTION_unbroadcastIntent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 16);
        static final int TRANSACTION_finishReceiver = (android.os.IBinder.FIRST_CALL_TRANSACTION + 17);
        static final int TRANSACTION_attachApplication = (android.os.IBinder.FIRST_CALL_TRANSACTION + 18);
        static final int TRANSACTION_getTasks = (android.os.IBinder.FIRST_CALL_TRANSACTION + 19);
        static final int TRANSACTION_moveTaskToFront = (android.os.IBinder.FIRST_CALL_TRANSACTION + 20);
        static final int TRANSACTION_getTaskForActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 21);
        static final int TRANSACTION_getContentProvider = (android.os.IBinder.FIRST_CALL_TRANSACTION + 22);
        static final int TRANSACTION_publishContentProviders = (android.os.IBinder.FIRST_CALL_TRANSACTION + 23);
        static final int TRANSACTION_refContentProvider = (android.os.IBinder.FIRST_CALL_TRANSACTION + 24);
        static final int TRANSACTION_getRunningServiceControlPanel = (android.os.IBinder.FIRST_CALL_TRANSACTION + 25);
        static final int TRANSACTION_startService = (android.os.IBinder.FIRST_CALL_TRANSACTION + 26);
        static final int TRANSACTION_stopService = (android.os.IBinder.FIRST_CALL_TRANSACTION + 27);
        static final int TRANSACTION_bindService = (android.os.IBinder.FIRST_CALL_TRANSACTION + 28);
        static final int TRANSACTION_bindServiceInstance = (android.os.IBinder.FIRST_CALL_TRANSACTION + 29);
        static final int TRANSACTION_updateServiceGroup = (android.os.IBinder.FIRST_CALL_TRANSACTION + 30);
        static final int TRANSACTION_unbindService = (android.os.IBinder.FIRST_CALL_TRANSACTION + 31);
        static final int TRANSACTION_publishService = (android.os.IBinder.FIRST_CALL_TRANSACTION + 32);
        static final int TRANSACTION_setDebugApp = (android.os.IBinder.FIRST_CALL_TRANSACTION + 33);
        static final int TRANSACTION_setAgentApp = (android.os.IBinder.FIRST_CALL_TRANSACTION + 34);
        static final int TRANSACTION_setAlwaysFinish = (android.os.IBinder.FIRST_CALL_TRANSACTION + 35);
        static final int TRANSACTION_startInstrumentation = (android.os.IBinder.FIRST_CALL_TRANSACTION + 36);
        static final int TRANSACTION_addInstrumentationResults = (android.os.IBinder.FIRST_CALL_TRANSACTION + 37);
        static final int TRANSACTION_finishInstrumentation = (android.os.IBinder.FIRST_CALL_TRANSACTION + 38);
        static final int TRANSACTION_getConfiguration = (android.os.IBinder.FIRST_CALL_TRANSACTION + 39);
        static final int TRANSACTION_updateConfiguration = (android.os.IBinder.FIRST_CALL_TRANSACTION + 40);
        static final int TRANSACTION_updateMccMncConfiguration = (android.os.IBinder.FIRST_CALL_TRANSACTION + 41);
        static final int TRANSACTION_stopServiceToken = (android.os.IBinder.FIRST_CALL_TRANSACTION + 42);
        static final int TRANSACTION_setProcessLimit = (android.os.IBinder.FIRST_CALL_TRANSACTION + 43);
        static final int TRANSACTION_getProcessLimit = (android.os.IBinder.FIRST_CALL_TRANSACTION + 44);
        static final int TRANSACTION_checkUriPermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 45);
        static final int TRANSACTION_checkUriPermissions = (android.os.IBinder.FIRST_CALL_TRANSACTION + 46);
        static final int TRANSACTION_grantUriPermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 47);
        static final int TRANSACTION_revokeUriPermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 48);
        static final int TRANSACTION_setActivityController = (android.os.IBinder.FIRST_CALL_TRANSACTION + 49);
        static final int TRANSACTION_showWaitingForDebugger = (android.os.IBinder.FIRST_CALL_TRANSACTION + 50);
        static final int TRANSACTION_signalPersistentProcesses = (android.os.IBinder.FIRST_CALL_TRANSACTION + 51);
        static final int TRANSACTION_getRecentTasks = (android.os.IBinder.FIRST_CALL_TRANSACTION + 52);
        static final int TRANSACTION_serviceDoneExecuting = (android.os.IBinder.FIRST_CALL_TRANSACTION + 53);
        static final int TRANSACTION_getIntentSender = (android.os.IBinder.FIRST_CALL_TRANSACTION + 54);
        static final int TRANSACTION_getIntentSenderWithFeature = (android.os.IBinder.FIRST_CALL_TRANSACTION + 55);
        static final int TRANSACTION_cancelIntentSender = (android.os.IBinder.FIRST_CALL_TRANSACTION + 56);
        static final int TRANSACTION_getInfoForIntentSender = (android.os.IBinder.FIRST_CALL_TRANSACTION + 57);
        static final int TRANSACTION_registerIntentSenderCancelListenerEx = (android.os.IBinder.FIRST_CALL_TRANSACTION + 58);
        static final int TRANSACTION_unregisterIntentSenderCancelListener = (android.os.IBinder.FIRST_CALL_TRANSACTION + 59);
        static final int TRANSACTION_enterSafeMode = (android.os.IBinder.FIRST_CALL_TRANSACTION + 60);
        static final int TRANSACTION_noteWakeupAlarm = (android.os.IBinder.FIRST_CALL_TRANSACTION + 61);
        static final int TRANSACTION_removeContentProvider = (android.os.IBinder.FIRST_CALL_TRANSACTION + 62);
        static final int TRANSACTION_setRequestedOrientation = (android.os.IBinder.FIRST_CALL_TRANSACTION + 63);
        static final int TRANSACTION_unbindFinished = (android.os.IBinder.FIRST_CALL_TRANSACTION + 64);
        static final int TRANSACTION_setProcessImportant = (android.os.IBinder.FIRST_CALL_TRANSACTION + 65);
        static final int TRANSACTION_setServiceForeground = (android.os.IBinder.FIRST_CALL_TRANSACTION + 66);
        static final int TRANSACTION_getForegroundServiceType = (android.os.IBinder.FIRST_CALL_TRANSACTION + 67);
        static final int TRANSACTION_moveActivityTaskToBack = (android.os.IBinder.FIRST_CALL_TRANSACTION + 68);
        static final int TRANSACTION_getMemoryInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 69);
        static final int TRANSACTION_getProcessesInErrorState = (android.os.IBinder.FIRST_CALL_TRANSACTION + 70);
        static final int TRANSACTION_clearApplicationUserData = (android.os.IBinder.FIRST_CALL_TRANSACTION + 71);
        static final int TRANSACTION_stopAppForUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 72);
        static final int TRANSACTION_registerForegroundServiceObserver = (android.os.IBinder.FIRST_CALL_TRANSACTION + 73);
        static final int TRANSACTION_forceStopPackage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 74);
        static final int TRANSACTION_killPids = (android.os.IBinder.FIRST_CALL_TRANSACTION + 75);
        static final int TRANSACTION_getServices = (android.os.IBinder.FIRST_CALL_TRANSACTION + 76);
        static final int TRANSACTION_getRunningAppProcesses = (android.os.IBinder.FIRST_CALL_TRANSACTION + 77);
        static final int TRANSACTION_peekService = (android.os.IBinder.FIRST_CALL_TRANSACTION + 78);
        static final int TRANSACTION_profileControl = (android.os.IBinder.FIRST_CALL_TRANSACTION + 79);
        static final int TRANSACTION_shutdown = (android.os.IBinder.FIRST_CALL_TRANSACTION + 80);
        static final int TRANSACTION_stopAppSwitches = (android.os.IBinder.FIRST_CALL_TRANSACTION + 81);
        static final int TRANSACTION_resumeAppSwitches = (android.os.IBinder.FIRST_CALL_TRANSACTION + 82);
        static final int TRANSACTION_bindBackupAgent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 83);
        static final int TRANSACTION_backupAgentCreated = (android.os.IBinder.FIRST_CALL_TRANSACTION + 84);
        static final int TRANSACTION_unbindBackupAgent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 85);
        static final int TRANSACTION_handleIncomingUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 86);
        static final int TRANSACTION_addPackageDependency = (android.os.IBinder.FIRST_CALL_TRANSACTION + 87);
        static final int TRANSACTION_killApplication = (android.os.IBinder.FIRST_CALL_TRANSACTION + 88);
        static final int TRANSACTION_closeSystemDialogs = (android.os.IBinder.FIRST_CALL_TRANSACTION + 89);
        static final int TRANSACTION_getProcessMemoryInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 90);
        static final int TRANSACTION_killApplicationProcess = (android.os.IBinder.FIRST_CALL_TRANSACTION + 91);
        static final int TRANSACTION_handleApplicationWtf = (android.os.IBinder.FIRST_CALL_TRANSACTION + 92);
        static final int TRANSACTION_killBackgroundProcesses = (android.os.IBinder.FIRST_CALL_TRANSACTION + 93);
        static final int TRANSACTION_isUserAMonkey = (android.os.IBinder.FIRST_CALL_TRANSACTION + 94);
        static final int TRANSACTION_getRunningExternalApplications = (android.os.IBinder.FIRST_CALL_TRANSACTION + 95);
        static final int TRANSACTION_finishHeavyWeightApp = (android.os.IBinder.FIRST_CALL_TRANSACTION + 96);
        static final int TRANSACTION_handleApplicationStrictModeViolation = (android.os.IBinder.FIRST_CALL_TRANSACTION + 97);
        static final int TRANSACTION_isTopActivityImmersive = (android.os.IBinder.FIRST_CALL_TRANSACTION + 98);
        static final int TRANSACTION_crashApplicationWithType = (android.os.IBinder.FIRST_CALL_TRANSACTION + 99);
        static final int TRANSACTION_crashApplicationWithTypeWithExtras = (android.os.IBinder.FIRST_CALL_TRANSACTION + 100);
        static final int TRANSACTION_getProviderMimeType = (android.os.IBinder.FIRST_CALL_TRANSACTION + 101);
        static final int TRANSACTION_getProviderMimeTypeAsync = (android.os.IBinder.FIRST_CALL_TRANSACTION + 102);
        static final int TRANSACTION_dumpHeap = (android.os.IBinder.FIRST_CALL_TRANSACTION + 103);
        static final int TRANSACTION_isUserRunning = (android.os.IBinder.FIRST_CALL_TRANSACTION + 104);
        static final int TRANSACTION_setPackageScreenCompatMode = (android.os.IBinder.FIRST_CALL_TRANSACTION + 105);
        static final int TRANSACTION_switchUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 106);
        static final int TRANSACTION_getSwitchingFromUserMessage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 107);
        static final int TRANSACTION_getSwitchingToUserMessage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 108);
        static final int TRANSACTION_setStopUserOnSwitch = (android.os.IBinder.FIRST_CALL_TRANSACTION + 109);
        static final int TRANSACTION_removeTask = (android.os.IBinder.FIRST_CALL_TRANSACTION + 110);
        static final int TRANSACTION_registerProcessObserver = (android.os.IBinder.FIRST_CALL_TRANSACTION + 111);
        static final int TRANSACTION_unregisterProcessObserver = (android.os.IBinder.FIRST_CALL_TRANSACTION + 112);
        static final int TRANSACTION_isIntentSenderTargetedToPackage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 113);
        static final int TRANSACTION_updatePersistentConfiguration = (android.os.IBinder.FIRST_CALL_TRANSACTION + 114);
        static final int TRANSACTION_updatePersistentConfigurationWithAttribution = (android.os.IBinder.FIRST_CALL_TRANSACTION + 115);
        static final int TRANSACTION_getProcessPss = (android.os.IBinder.FIRST_CALL_TRANSACTION + 116);
        static final int TRANSACTION_showBootMessage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 117);
        static final int TRANSACTION_killAllBackgroundProcesses = (android.os.IBinder.FIRST_CALL_TRANSACTION + 118);
        static final int TRANSACTION_getContentProviderExternal = (android.os.IBinder.FIRST_CALL_TRANSACTION + 119);
        static final int TRANSACTION_removeContentProviderExternal = (android.os.IBinder.FIRST_CALL_TRANSACTION + 120);
        static final int TRANSACTION_removeContentProviderExternalAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 121);
        static final int TRANSACTION_getMyMemoryState = (android.os.IBinder.FIRST_CALL_TRANSACTION + 122);
        static final int TRANSACTION_killProcessesBelowForeground = (android.os.IBinder.FIRST_CALL_TRANSACTION + 123);
        static final int TRANSACTION_getCurrentUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 124);
        static final int TRANSACTION_getCurrentUserId = (android.os.IBinder.FIRST_CALL_TRANSACTION + 125);
        static final int TRANSACTION_getLaunchedFromUid = (android.os.IBinder.FIRST_CALL_TRANSACTION + 126);
        static final int TRANSACTION_unstableProviderDied = (android.os.IBinder.FIRST_CALL_TRANSACTION + 127);
        static final int TRANSACTION_isIntentSenderAnActivity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 128);
        static final int TRANSACTION_startActivityAsUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 129);
        static final int TRANSACTION_startActivityAsUserWithFeature = (android.os.IBinder.FIRST_CALL_TRANSACTION + 130);
        static final int TRANSACTION_stopUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 131);
        static final int TRANSACTION_stopUserWithDelayedLocking = (android.os.IBinder.FIRST_CALL_TRANSACTION + 132);
        static final int TRANSACTION_registerUserSwitchObserver = (android.os.IBinder.FIRST_CALL_TRANSACTION + 133);
        static final int TRANSACTION_unregisterUserSwitchObserver = (android.os.IBinder.FIRST_CALL_TRANSACTION + 134);
        static final int TRANSACTION_getRunningUserIds = (android.os.IBinder.FIRST_CALL_TRANSACTION + 135);
        static final int TRANSACTION_requestSystemServerHeapDump = (android.os.IBinder.FIRST_CALL_TRANSACTION + 136);
        static final int TRANSACTION_requestBugReport = (android.os.IBinder.FIRST_CALL_TRANSACTION + 137);
        static final int TRANSACTION_requestBugReportWithDescription = (android.os.IBinder.FIRST_CALL_TRANSACTION + 138);
        static final int TRANSACTION_requestTelephonyBugReport = (android.os.IBinder.FIRST_CALL_TRANSACTION + 139);
        static final int TRANSACTION_requestWifiBugReport = (android.os.IBinder.FIRST_CALL_TRANSACTION + 140);
        static final int TRANSACTION_requestInteractiveBugReportWithDescription = (android.os.IBinder.FIRST_CALL_TRANSACTION + 141);
        static final int TRANSACTION_requestInteractiveBugReport = (android.os.IBinder.FIRST_CALL_TRANSACTION + 142);
        static final int TRANSACTION_requestFullBugReport = (android.os.IBinder.FIRST_CALL_TRANSACTION + 143);
        static final int TRANSACTION_requestRemoteBugReport = (android.os.IBinder.FIRST_CALL_TRANSACTION + 144);
        static final int TRANSACTION_launchBugReportHandlerApp = (android.os.IBinder.FIRST_CALL_TRANSACTION + 145);
        static final int TRANSACTION_getBugreportWhitelistedPackages = (android.os.IBinder.FIRST_CALL_TRANSACTION + 146);
        static final int TRANSACTION_getIntentForIntentSender = (android.os.IBinder.FIRST_CALL_TRANSACTION + 147);
        static final int TRANSACTION_getLaunchedFromPackage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 148);
        static final int TRANSACTION_killUid = (android.os.IBinder.FIRST_CALL_TRANSACTION + 149);
        static final int TRANSACTION_setUserIsMonkey = (android.os.IBinder.FIRST_CALL_TRANSACTION + 150);
        static final int TRANSACTION_hang = (android.os.IBinder.FIRST_CALL_TRANSACTION + 151);
        static final int TRANSACTION_getAllRootTaskInfos = (android.os.IBinder.FIRST_CALL_TRANSACTION + 152);
        static final int TRANSACTION_moveTaskToRootTask = (android.os.IBinder.FIRST_CALL_TRANSACTION + 153);
        static final int TRANSACTION_setFocusedRootTask = (android.os.IBinder.FIRST_CALL_TRANSACTION + 154);
        static final int TRANSACTION_getFocusedRootTaskInfo = (android.os.IBinder.FIRST_CALL_TRANSACTION + 155);
        static final int TRANSACTION_restart = (android.os.IBinder.FIRST_CALL_TRANSACTION + 156);
        static final int TRANSACTION_performIdleMaintenance = (android.os.IBinder.FIRST_CALL_TRANSACTION + 157);
        static final int TRANSACTION_appNotRespondingViaProvider = (android.os.IBinder.FIRST_CALL_TRANSACTION + 158);
        static final int TRANSACTION_getTaskBounds = (android.os.IBinder.FIRST_CALL_TRANSACTION + 159);
        static final int TRANSACTION_setProcessMemoryTrimLevel = (android.os.IBinder.FIRST_CALL_TRANSACTION + 160);
        static final int TRANSACTION_getTagForIntentSender = (android.os.IBinder.FIRST_CALL_TRANSACTION + 161);
        static final int TRANSACTION_startUserInBackground = (android.os.IBinder.FIRST_CALL_TRANSACTION + 162);
        static final int TRANSACTION_isInLockTaskMode = (android.os.IBinder.FIRST_CALL_TRANSACTION + 163);
        static final int TRANSACTION_startActivityFromRecents = (android.os.IBinder.FIRST_CALL_TRANSACTION + 164);
        static final int TRANSACTION_startSystemLockTaskMode = (android.os.IBinder.FIRST_CALL_TRANSACTION + 165);
        static final int TRANSACTION_isTopOfTask = (android.os.IBinder.FIRST_CALL_TRANSACTION + 166);
        static final int TRANSACTION_bootAnimationComplete = (android.os.IBinder.FIRST_CALL_TRANSACTION + 167);
        static final int TRANSACTION_registerTaskStackListener = (android.os.IBinder.FIRST_CALL_TRANSACTION + 168);
        static final int TRANSACTION_unregisterTaskStackListener = (android.os.IBinder.FIRST_CALL_TRANSACTION + 169);
        static final int TRANSACTION_notifyCleartextNetwork = (android.os.IBinder.FIRST_CALL_TRANSACTION + 170);
        static final int TRANSACTION_setTaskResizeable = (android.os.IBinder.FIRST_CALL_TRANSACTION + 171);
        static final int TRANSACTION_resizeTask = (android.os.IBinder.FIRST_CALL_TRANSACTION + 172);
        static final int TRANSACTION_getLockTaskModeState = (android.os.IBinder.FIRST_CALL_TRANSACTION + 173);
        static final int TRANSACTION_setDumpHeapDebugLimit = (android.os.IBinder.FIRST_CALL_TRANSACTION + 174);
        static final int TRANSACTION_dumpHeapFinished = (android.os.IBinder.FIRST_CALL_TRANSACTION + 175);
        static final int TRANSACTION_updateLockTaskPackages = (android.os.IBinder.FIRST_CALL_TRANSACTION + 176);
        static final int TRANSACTION_noteAlarmStart = (android.os.IBinder.FIRST_CALL_TRANSACTION + 177);
        static final int TRANSACTION_noteAlarmFinish = (android.os.IBinder.FIRST_CALL_TRANSACTION + 178);
        static final int TRANSACTION_getPackageProcessState = (android.os.IBinder.FIRST_CALL_TRANSACTION + 179);
        static final int TRANSACTION_startBinderTracking = (android.os.IBinder.FIRST_CALL_TRANSACTION + 180);
        static final int TRANSACTION_stopBinderTrackingAndDump = (android.os.IBinder.FIRST_CALL_TRANSACTION + 181);
        static final int TRANSACTION_suppressResizeConfigChanges = (android.os.IBinder.FIRST_CALL_TRANSACTION + 182);
        static final int TRANSACTION_unlockUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + 183);
        static final int TRANSACTION_killPackageDependents = (android.os.IBinder.FIRST_CALL_TRANSACTION + 184);
        static final int TRANSACTION_makePackageIdle = (android.os.IBinder.FIRST_CALL_TRANSACTION + 185);
        static final int TRANSACTION_getMemoryTrimLevel = (android.os.IBinder.FIRST_CALL_TRANSACTION + 186);
        static final int TRANSACTION_isVrModePackageEnabled = (android.os.IBinder.FIRST_CALL_TRANSACTION + 187);
        static final int TRANSACTION_notifyLockedProfile = (android.os.IBinder.FIRST_CALL_TRANSACTION + 188);
        static final int TRANSACTION_startConfirmDeviceCredentialIntent = (android.os.IBinder.FIRST_CALL_TRANSACTION + 189);
        static final int TRANSACTION_sendIdleJobTrigger = (android.os.IBinder.FIRST_CALL_TRANSACTION + 190);
        static final int TRANSACTION_sendIntentSender = (android.os.IBinder.FIRST_CALL_TRANSACTION + 191);
        static final int TRANSACTION_isBackgroundRestricted = (android.os.IBinder.FIRST_CALL_TRANSACTION + 192);
        static final int TRANSACTION_setRenderThread = (android.os.IBinder.FIRST_CALL_TRANSACTION + 193);
        static final int TRANSACTION_setHasTopUi = (android.os.IBinder.FIRST_CALL_TRANSACTION + 194);
        static final int TRANSACTION_restartUserInBackground = (android.os.IBinder.FIRST_CALL_TRANSACTION + 195);
        static final int TRANSACTION_cancelTaskWindowTransition = (android.os.IBinder.FIRST_CALL_TRANSACTION + 196);
        static final int TRANSACTION_scheduleApplicationInfoChanged = (android.os.IBinder.FIRST_CALL_TRANSACTION + 197);
        static final int TRANSACTION_setPersistentVrThread = (android.os.IBinder.FIRST_CALL_TRANSACTION + 198);
        static final int TRANSACTION_waitForNetworkStateUpdate = (android.os.IBinder.FIRST_CALL_TRANSACTION + 199);
        static final int TRANSACTION_backgroundAllowlistUid = (android.os.IBinder.FIRST_CALL_TRANSACTION + 200);
        static final int TRANSACTION_startUserInBackgroundWithListener = (android.os.IBinder.FIRST_CALL_TRANSACTION + 201);
        static final int TRANSACTION_startDelegateShellPermissionIdentity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 202);
        static final int TRANSACTION_stopDelegateShellPermissionIdentity = (android.os.IBinder.FIRST_CALL_TRANSACTION + 203);
        static final int TRANSACTION_getDelegatedShellPermissions = (android.os.IBinder.FIRST_CALL_TRANSACTION + 204);
        static final int TRANSACTION_getLifeMonitor = (android.os.IBinder.FIRST_CALL_TRANSACTION + 205);
        static final int TRANSACTION_startUserInForegroundWithListener = (android.os.IBinder.FIRST_CALL_TRANSACTION + 206);
        static final int TRANSACTION_appNotResponding = (android.os.IBinder.FIRST_CALL_TRANSACTION + 207);
        static final int TRANSACTION_getHistoricalProcessExitReasons = (android.os.IBinder.FIRST_CALL_TRANSACTION + 208);
        static final int TRANSACTION_killProcessesWhenImperceptible = (android.os.IBinder.FIRST_CALL_TRANSACTION + 209);
        static final int TRANSACTION_setActivityLocusContext = (android.os.IBinder.FIRST_CALL_TRANSACTION + 210);
        static final int TRANSACTION_setProcessStateSummary = (android.os.IBinder.FIRST_CALL_TRANSACTION + 211);
        static final int TRANSACTION_isAppFreezerSupported = (android.os.IBinder.FIRST_CALL_TRANSACTION + 212);
        static final int TRANSACTION_isAppFreezerEnabled = (android.os.IBinder.FIRST_CALL_TRANSACTION + 213);
        static final int TRANSACTION_killUidForPermissionChange = (android.os.IBinder.FIRST_CALL_TRANSACTION + 214);
        static final int TRANSACTION_resetAppErrors = (android.os.IBinder.FIRST_CALL_TRANSACTION + 215);
        static final int TRANSACTION_enableAppFreezer = (android.os.IBinder.FIRST_CALL_TRANSACTION + 216);
        static final int TRANSACTION_enableFgsNotificationRateLimit = (android.os.IBinder.FIRST_CALL_TRANSACTION + 217);
        static final int TRANSACTION_holdLock = (android.os.IBinder.FIRST_CALL_TRANSACTION + 218);
        static final int TRANSACTION_startProfile = (android.os.IBinder.FIRST_CALL_TRANSACTION + 219);
        static final int TRANSACTION_stopProfile = (android.os.IBinder.FIRST_CALL_TRANSACTION + 220);
        static final int TRANSACTION_queryIntentComponentsForIntentSender = (android.os.IBinder.FIRST_CALL_TRANSACTION + 221);
        static final int TRANSACTION_getUidProcessCapabilities = (android.os.IBinder.FIRST_CALL_TRANSACTION + 222);
        static final int TRANSACTION_waitForBroadcastIdle = (android.os.IBinder.FIRST_CALL_TRANSACTION + 223);
        static final int TRANSACTION_getBackgroundRestrictionExemptionReason = (android.os.IBinder.FIRST_CALL_TRANSACTION + 224);
        /** @hide */
        public int getMaxTransactionId()
        {
            return 224;
        }
    }

}